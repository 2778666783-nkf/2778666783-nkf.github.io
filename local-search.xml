<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第四章SpringBoot的web配置</title>
    <link href="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="第四章SpringBoot的web配置"><a href="#第四章SpringBoot的web配置" class="headerlink" title="第四章SpringBoot的web配置"></a>第四章SpringBoot的web配置</h1><h2 id="4-1-Spring-Boot-中的-JSON"><a href="#4-1-Spring-Boot-中的-JSON" class="headerlink" title="4.1 Spring Boot 中的 JSON"></a>4.1 Spring Boot 中的 JSON</h2><p><strong>JSON 处理</strong></p><p>有三大主流框架：</p><ul><li>jackson</li><li>gson</li><li>fastjson</li></ul><p><strong>序列化和反序列化：</strong></p><blockquote><ul><li><p>序列化：把 对象 变成 JSON（响应JSON）</p></li><li><p>反序列化：把 JSON 变成 对象 （请求参数是 JSON）</p></li></ul></blockquote><p><strong>HttpMessageConverter：</strong></p><p>转换器：对象-&gt;JSON，JSON-&gt;对象</p><p>所有的JSON工具都会提供各自的 HttpMessageConverter</p><ul><li>jackson:MappingJackson2HttpMessageConverter</li><li>gson:GsonHttpMessageConverter</li><li>fastjaon:</li></ul><p>SpringMVC 框架中，jackson 和 gson 的 HttpMessageConverter   已经自动配置好了,只需要添加依赖就能使用。Fastjson，需要添加依赖才能使用。</p><h2 id="4-2-Spring-Boot-整合-jackson"><a href="#4-2-Spring-Boot-整合-jackson" class="headerlink" title="4.2 Spring Boot 整合 jackson"></a>4.2 Spring Boot 整合 jackson</h2><p>jackson 配置两种思路：</p><ol><li>在各个对象进行配置</li><li>在全局进行配置</li></ol><h3 id="对象配置"><a href="#对象配置" class="headerlink" title="对象配置"></a>对象配置</h3><h4 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h4><blockquote><p>指定属性序列化&#x2F;反序列化时的名称，默认就是属性名称</p><p>有两个属性配置</p><ul><li>value：设置属性名</li><li>index：设置优先级【数值越小优先级越高】</li></ul><p>在序列化和反序列化时，采用的都是注解标识的属性名</p></blockquote><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@JsonProperty(value = &quot;stuAge&quot;,index = 99)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@JsonProperty(value = &quot;name&quot;,index = 98)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@JsonProperty(value = &quot;date&quot;,index = 96)</span><br>    <span class="hljs-keyword">private</span> Date birthdate;<br><br>    <span class="hljs-meta">@JsonProperty(index = 97)</span><br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>序列化：</strong></p><p>getUserById: 返回一个 user 对象，采用的是 RestController，所以返回前端的是 JSON 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;贵阳&quot;</span>);<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setBirthdate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220520213405063.png" class title="image-20220520213405063"><p><strong>反序列化：</strong></p><p>saveUser: 通过**@RequestBody**接收前端的JSON传参，进行反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>APIPost：</p><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220520214356654.png" class title="image-20220520214356654"><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User(age=<span class="hljs-number">22</span>, username=李四, birthdate=Fri May <span class="hljs-number">20</span> 08:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> CST <span class="hljs-number">2022</span>, address=徐州)<br></code></pre></td></tr></table></figure><h4 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h4><blockquote><p>标识此注解的属性，在序列化和反序列化时会被忽略</p></blockquote><p><strong>注意：此注解不能和 @JsonProperty 同时存在与同一属性，否则序列化时字段不会被忽略，反序列化时才会被忽略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@JsonProperty(value = &quot;stuAge&quot;,index = 99)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@JsonProperty(value = &quot;name&quot;,index = 98)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@JsonProperty(value = &quot;date&quot;,index = 96)</span><br>    <span class="hljs-keyword">private</span> Date birthdate;<br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>序列化：address 字段被忽略</strong></p><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220520214737972.png" class title="image-20220520214737972"><p><strong>反序列化：address 不会被接收到</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User(age=<span class="hljs-number">22</span>, username=李四, birthdate=Fri May <span class="hljs-number">20</span> 08:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> CST <span class="hljs-number">2022</span>, address=<span class="hljs-literal">null</span>)<br></code></pre></td></tr></table></figure><h4 id="JsonIgnoreProperties"><a href="#JsonIgnoreProperties" class="headerlink" title="@JsonIgnoreProperties"></a>@JsonIgnoreProperties</h4><blockquote><p>批量忽略字段</p><p>参数接收一个数组，传入多个字段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnoreProperties(</span><br><span class="hljs-meta">        &#123;&quot;birthday&quot;,&quot;address&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@JsonProperty(value = &quot;stuAge&quot;,index = 99)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@JsonProperty(value = &quot;name&quot;,index = 98)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> Date birthdate;<br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220520215851121.png" class title="image-20220520215851121"><h4 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h4><blockquote><p>如果字段是时间 ，标识此注解可以进行日期的格式化，有两个常用属性值</p><ul><li>pattern：格式化字符串</li><li>timezone：配置时区</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy:MM:dd hh:ss:mm&quot;,timezone = &quot;Asia/Shanghai&quot;)</span><br><span class="hljs-keyword">private</span> Date birthdate;<br></code></pre></td></tr></table></figure><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220520220749815.png" class title="image-20220520220749815"><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>如果我们有很多日期字段，就可以采用全局配置 JSON 来实现</p><p>在 Jackson 的自动配置类 JacksonAutoConfiguration 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(Jackson2ObjectMapperBuilder.class)</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonObjectMapperConfiguration</span> &#123;<br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@Primary</span><br>   <span class="hljs-meta">@ConditionalOnMissingBean</span><br>   ObjectMapper <span class="hljs-title function_">jacksonObjectMapper</span><span class="hljs-params">(Jackson2ObjectMapperBuilder builder)</span> &#123;<br>      <span class="hljs-keyword">return</span> builder.createXmlMapper(<span class="hljs-literal">false</span>).build();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果在容器中没有找到 ObjectMapper 这个 Bean，就会将这个 ObjectMapper配置到容器中，所以想要实现全局配置，就需要自己将这个Bean装配到容器中，这样上述配置就不会生效</p></blockquote><p><strong>创建一个 WebMvcConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">objectMapper</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>        <span class="hljs-keyword">return</span> om;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-SpringBoot整合-Gson"><a href="#4-3-SpringBoot整合-Gson" class="headerlink" title="4.3 SpringBoot整合 Gson"></a>4.3 SpringBoot整合 Gson</h2><p>Spring Boot 默认使用的是 Jackson ，我们需要先将 Jackson 依赖剔除，然后添加 gson 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Gson 的自动配置类中 配置了 gson</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> GsonBuilder <span class="hljs-title function_">gsonBuilder</span><span class="hljs-params">(List&lt;GsonBuilderCustomizer&gt; customizers)</span> &#123;<br><span class="hljs-type">GsonBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>();<br>customizers.forEach((c) -&gt; c.customize(builder));<br><span class="hljs-keyword">return</span> builder;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-keyword">public</span> Gson <span class="hljs-title function_">gson</span><span class="hljs-params">(GsonBuilder gsonBuilder)</span> &#123;<br><span class="hljs-keyword">return</span> gsonBuilder.create();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果在容器中没有找到上述两个 Bean，才会将两个Bean注册到容器，所以我们要想自定义 Gson，只需要自己向容器注册 Bean，这样上述两个 方法不会生效</p></blockquote><p><strong>WebMVCconfig.java</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMVCConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方式1：构建 gsonBuilder</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    GsonBuilder <span class="hljs-title function_">gsonBuilder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">GsonBuilder</span> <span class="hljs-variable">gb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>();<br>        gb.setDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-keyword">return</span> gb;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方式2：构建 Gson</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    Gson <span class="hljs-title function_">gson</span><span class="hljs-params">(GsonBuilder gb)</span>&#123;<br>        gb.setDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-keyword">return</span> gb.create();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMVCConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    GsonBuilder <span class="hljs-title function_">gsonBuilder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">GsonBuilder</span> <span class="hljs-variable">gb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>();<br>        gb.setDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-keyword">return</span> gb;<br>    &#125;<br><br><span class="hljs-comment">//    @Bean</span><br>    Gson <span class="hljs-title function_">gson</span><span class="hljs-params">(GsonBuilder gb)</span>&#123;<br>        gb.setDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-keyword">return</span> gb.create();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    GsonHttpMessageConverter <span class="hljs-title function_">gsonHttpMessageConverter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">GsonBuilder</span> <span class="hljs-variable">gb</span> <span class="hljs-operator">=</span> gsonBuilder();<br>        <span class="hljs-type">GsonHttpMessageConverter</span> <span class="hljs-variable">gbc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonHttpMessageConverter</span>();<br>        gbc.setGson(gb.create());<br>        <span class="hljs-keyword">return</span> gbc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-SpringBoot整合-FastJson"><a href="#4-4-SpringBoot整合-FastJson" class="headerlink" title="4.4 SpringBoot整合 FastJson"></a>4.4 SpringBoot整合 FastJson</h2><p>首先创建项目添加web依赖，剔除 jackson ，添加 fastjson</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.71<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>spring 为 jackson 和 gson 提供了 HttpMessageConverter ，直接添加依赖就可以将数据转换为 JSON，而 fastJson 需要自己提供一个 HttpMessageConverter 来进行转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方式2：继承 WMvcConfigurer 实现 configureMessageConverters 方法，将消息转换器进行配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> converters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>        converters.add(fastJsonHttpMessageConverter());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方式1：直接配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    FastJsonHttpMessageConverter <span class="hljs-title function_">fastJsonHttpMessageConverter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FastJsonHttpMessageConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJsonHttpMessageConverter</span>();<br>        <span class="hljs-type">FastJsonConfig</span> <span class="hljs-variable">fastJsonConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FastJsonConfig</span>();<br>        fastJsonConfig.setCharset(Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        fastJsonConfig.setDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        converter.setFastJsonConfig(fastJsonConfig);<br>        converter.setDefaultCharset(Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-SpringBoot-处理静态资源"><a href="#4-5-SpringBoot-处理静态资源" class="headerlink" title="4.5 SpringBoot 处理静态资源"></a>4.5 SpringBoot 处理静态资源</h2><h3 id="4-5-1-静态资源位置"><a href="#4-5-1-静态资源位置" class="headerlink" title="4.5.1 静态资源位置"></a>4.5.1 静态资源位置</h3><p>在 spring boot 中默认的静态资源访问路径有五个</p><p>静态资源一共有五个位置 static 只是其中之一，</p><ul><li>resources&#x2F;META-INF&#x2F;resources: 优先级最高</li><li>resources&#x2F;resources:</li><li>resources&#x2F;static:</li><li>resources&#x2F;public:</li><li>webapp</li></ul><p>在 MVC 的自动配置类 中：</p><p>以下方法配置了 静态资源 的映射路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>            <span class="hljs-comment">// spring.resources.add-mappings = false 默认的资源映射禁用</span><br>            <span class="hljs-comment">// 如果在配置文件中配置了如上配置，就不会进行静态资源的映射</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">Duration</span> <span class="hljs-variable">cachePeriod</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceProperties.getCache().getPeriod();<br><span class="hljs-type">CacheControl</span> <span class="hljs-variable">cacheControl</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();<br>            <span class="hljs-comment">// webjar 的静态资源映射</span><br><span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;<br>customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>.addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)<br>.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>&#125;<br>            <span class="hljs-comment">// staticPathPattern = /**</span><br><span class="hljs-type">String</span> <span class="hljs-variable">staticPathPattern</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern();<br><span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;<br>customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)<br>.addResourceLocations(getResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations()))<br>.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));<br>&#125;<br>&#125;<br><br><br><br>-------------------------------------------------------------------------------------<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br><span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> &#125;;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span><br><span class="hljs-comment">         * /resources/, /static/, /public/].</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br>    <span class="hljs-keyword">static</span> String[] getResourceLocations(String[] staticLocations) &#123;<br>    <span class="hljs-comment">// SERVLET_LOCATIONS = /</span><br>            String[] locations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[staticLocations.length + SERVLET_LOCATIONS.length];<br>            System.arraycopy(staticLocations, <span class="hljs-number">0</span>, locations, <span class="hljs-number">0</span>, staticLocations.length);<br>            System.arraycopy(SERVLET_LOCATIONS, <span class="hljs-number">0</span>, locations, staticLocations.length, SERVLET_LOCATIONS.length);<br>            <span class="hljs-keyword">return</span> locations;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码可以看出先添加的 CLASSPATH_RESOURCE_LOCATIONS 后添加的 SERVLET_LOCATIONS ，所以 webapp 的优先级最低</p><h3 id="4-5-1-静态资源配置方式"><a href="#4-5-1-静态资源配置方式" class="headerlink" title="4.5.1 静态资源配置方式"></a>4.5.1 静态资源配置方式</h3><p>在 resources 文件夹下创建自定义的 静态资源文件夹 ws</p><p><strong>方式一：在配置文件中进行配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/ws</span><br><span class="hljs-comment"># 静态资源请求 只有请求中带有 static 才会被认为是静态资源请求</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static/**</span><br></code></pre></td></tr></table></figure><p><strong>方式二：实现接口 WebMvcConfigurer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/ws/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-Spring-Boot-中的文件上传"><a href="#4-6-Spring-Boot-中的文件上传" class="headerlink" title="4.6 Spring Boot 中的文件上传"></a>4.6 Spring Boot 中的文件上传</h2><h3 id="4-6-1-单文件上传"><a href="#4-6-1-单文件上传" class="headerlink" title="4.6.1 单文件上传"></a>4.6.1 单文件上传</h3><blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">* 1.构建文件夹<br>* 2.构建文件名<br>* 3.file.transferTo(new File(文件夹,文件名));<br></code></pre></td></tr></table></figure></blockquote><p>首先创建项目 4-6-file-upload，添加 web 依赖</p><p>在 Spring Boot 中有两个文件文件解析器：</p><ul><li>StandardServletMultipartResolver</li><li>CommonsMultipartResolver</li></ul><p>默认采用的 文件解析器是 <strong>StandardServletMultipartResolver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.servlet.multipart&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@EnableConfigurationProperties(MultipartProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipartAutoConfiguration</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MultipartProperties multipartProperties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MultipartAutoConfiguration</span><span class="hljs-params">(MultipartProperties multipartProperties)</span> &#123;<br><span class="hljs-built_in">this</span>.multipartProperties = multipartProperties;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123; MultipartConfigElement.class, CommonsMultipartResolver.class &#125;)</span><br><span class="hljs-keyword">public</span> MultipartConfigElement <span class="hljs-title function_">multipartConfigElement</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.multipartProperties.createMultipartConfig();<br>&#125;<br><br><span class="hljs-meta">@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(MultipartResolver.class)</span><br><span class="hljs-keyword">public</span> StandardServletMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">StandardServletMultipartResolver</span> <span class="hljs-variable">multipartResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardServletMultipartResolver</span>();<br>multipartResolver.setResolveLazily(<span class="hljs-built_in">this</span>.multipartProperties.isResolveLazily());<br><span class="hljs-keyword">return</span> multipartResolver;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>前端请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload1&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;/yyyy/MM/dd/&quot;</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传到服务器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/upload1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//这里将文件放在resources目录的static/upload子目录下，通过ClassPathResource的方式先拿到application.properties文件的路径。</span><br>        <span class="hljs-comment">//然后，取父目录得到resources目录。</span><br>        <span class="hljs-comment">//先通过ClassPathResource获取application.properties的路径</span><br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">applicationProperties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;application.properties&quot;</span>);<br>        <span class="hljs-comment">//然后通过取其父目录获得resources目录，设置上传文件的目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadFileSavePath</span> <span class="hljs-operator">=</span> applicationProperties.getFile().getParentFile().getAbsolutePath() + File.separator + <span class="hljs-string">&quot;static/upload&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">File</span> <span class="hljs-variable">uploadFileSaveDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFileSavePath+ format);<br>        System.out.println(<span class="hljs-string">&quot;上传文件的存放目录：&quot;</span>+uploadFileSaveDir.getAbsolutePath());<br>        <span class="hljs-keyword">if</span>(!uploadFileSaveDir.exists())&#123;<br>            <span class="hljs-comment">// 递归生成文件夹</span><br>            uploadFileSaveDir.mkdirs();<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>        file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFileSaveDir,newName));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + <span class="hljs-string">&quot;/upload&quot;</span> +format + newName;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="上传到本地："><a href="#上传到本地：" class="headerlink" title="上传到本地："></a>上传到本地：</h4><p><strong>设置本地静态资源路径：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 单个文件的大小</span><br><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">50MB</span><br><span class="hljs-comment"># 请求的大小</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">50MB</span><br><br><span class="hljs-attr">web.upload-path</span>=<span class="hljs-string">G:/upload</span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:$&#123;web.upload-path&#125;</span><br></code></pre></td></tr></table></figure><p><strong>后端请求</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;<br><br><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;/yyyy/MM/dd/&quot;</span>);<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;web.upload-path&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String fileUpload;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传到本地</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/upload1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload2</span><span class="hljs-params">(MultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//然后通过取其父目录获得resources目录，设置上传文件的目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadFileSavePath</span> <span class="hljs-operator">=</span> fileUpload;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">File</span> <span class="hljs-variable">uploadFileSaveDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFileSavePath+ format);<br>        System.out.println(<span class="hljs-string">&quot;上传文件的存放目录：&quot;</span>+uploadFileSaveDir.getAbsolutePath());<br>        <span class="hljs-keyword">if</span>(!uploadFileSaveDir.exists())&#123;<br>            <span class="hljs-comment">// 递归生成文件夹</span><br>            uploadFileSaveDir.mkdirs();<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>        file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFileSaveDir,newName));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() +format + newName;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-2-多文件上传"><a href="#4-6-2-多文件上传" class="headerlink" title="4.6.2 多文件上传"></a>4.6.2 多文件上传</h3><p><strong>单个文件请求：多个文件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload3&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;files&quot;</span> <span class="hljs-attr">multiple</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传到服务器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/upload3&quot;)</span><br><span class="hljs-keyword">public</span> List <span class="hljs-title function_">upload3</span><span class="hljs-params">(MultipartFile[] files, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-comment">//这里将文件放在resources目录的static/upload子目录下，通过ClassPathResource的方式先拿到application.properties文件的路径。</span><br>    <span class="hljs-comment">//然后，取父目录得到resources目录。</span><br>    <span class="hljs-comment">//先通过ClassPathResource获取application.properties的路径</span><br>    <span class="hljs-type">Resource</span> <span class="hljs-variable">applicationProperties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;application.properties&quot;</span>);<br>    <span class="hljs-comment">//然后通过取其父目录获得resources目录，设置上传文件的目录</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">uploadFileSavePath</span> <span class="hljs-operator">=</span> applicationProperties.getFile().getParentFile().getAbsolutePath() + File.separator + <span class="hljs-string">&quot;static/upload&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-type">File</span> <span class="hljs-variable">uploadFileSaveDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFileSavePath+ format);<br>    System.out.println(<span class="hljs-string">&quot;上传文件的存放目录：&quot;</span>+uploadFileSaveDir.getAbsolutePath());<br>    <span class="hljs-keyword">if</span>(!uploadFileSaveDir.exists())&#123;<br>        <span class="hljs-comment">// 递归生成文件夹</span><br>        uploadFileSaveDir.mkdirs();<br>    &#125;<br><br>    List&lt;String&gt; ssList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span> (MultipartFile file : files) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldName</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>        file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFileSaveDir,newName));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + <span class="hljs-string">&quot;/upload&quot;</span> +format + newName;<br>        ssList.add(s);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ssList;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>多个文件请求：多个文件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html">多文件请求：多个文件<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload4&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><br><br> @PostMapping(&quot;/upload4&quot;)<br>    public String upload4(MultipartFile file,MultipartFile file2, HttpServletRequest request) throws IOException &#123;<br><br>        //然后通过取其父目录获得resources目录，设置上传文件的目录<br>        String uploadFileSavePath = fileUpload;<br>        String format = sdf.format(new Date());<br>        File uploadFileSaveDir = new File(uploadFileSavePath+ format);<br>        System.out.println(&quot;上传文件的存放目录：&quot;+uploadFileSaveDir.getAbsolutePath());<br>        if(!uploadFileSaveDir.exists())&#123;<br>            // 递归生成文件夹<br>            uploadFileSaveDir.mkdirs();<br>        &#125;<br><br>        String oldName = file.getOriginalFilename();<br>        String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(&quot;.&quot;));<br>        file.transferTo(new File(uploadFileSaveDir,newName));<br>        String s1 = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() +format + newName;<br><br>        String oldName2 = file2.getOriginalFilename();<br>        String newName2 = UUID.randomUUID().toString() + oldName2.substring(oldName2.lastIndexOf(&quot;.&quot;));<br>        file2.transferTo(new File(uploadFileSaveDir,newName2));<br>        String s2 = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() +format + newName2;<br><br><br>        return s1+ &quot; &quot; + s2 ;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-6-3-Ajax-文件上传"><a href="#4-6-3-Ajax-文件上传" class="headerlink" title="4.6.3 Ajax 文件上传"></a>4.6.3 Ajax 文件上传</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag">            <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.0.js&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;uploadLoad()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadLoad</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> file = $(<span class="hljs-string">&#x27;#file&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>,file);</span><br><span class="language-javascript">        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;zhansgan&quot;</span>);</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/upload2&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">/*#不用处理数据*/</span></span><br><span class="language-javascript">            <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: formData,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>)&#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#result&quot;</span>).<span class="hljs-title function_">html</span>(resp);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-7-ControllerAdvice"><a href="#4-7-ControllerAdvice" class="headerlink" title="4.7 @ControllerAdvice"></a>4.7 @ControllerAdvice</h2><p><strong>@ControllerAdvice</strong> 有三个方面的功能：</p><ul><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理</li></ul><h3 id="4-7-1-全局异常处理"><a href="#4-7-1-全局异常处理" class="headerlink" title="4.7.1 全局异常处理"></a>4.7.1 全局异常处理</h3><p><strong>@ControllerAdvice + @ExceptionHandler</strong></p><blockquote><p>捕捉全局发生的异常：返回视图，可以将错误信息返回到前端</p><p>@ExceptionHandler:指定拦截的异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">error</span><span class="hljs-params">(ArithmeticException e)</span>&#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        mv.setViewName(<span class="hljs-string">&quot;error&quot;</span>);<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,e.getMessage());<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@ControllerAdvice + @ExceptionHandler</strong></p><blockquote><p>捕捉全局发生的异常：返回响应数据，可以将错误信息作为JSON数据返回到前端进行相应的处理1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 捕捉全局发生的异常：可指定异常，返回响应数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">error</span><span class="hljs-params">(ArithmeticException e)</span>&#123;<br>        <span class="hljs-keyword">return</span> e.getMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-7-2-全局数据绑定"><a href="#4-7-2-全局数据绑定" class="headerlink" title="4.7.2 全局数据绑定"></a>4.7.2 全局数据绑定</h3><p>@RestControllerAdvice 也可以进行全局数据绑定 </p><p>标注了 @ModelAttribute 的方法返回的数据可以在全局的 controller 都可以通过 model 进行获取</p><p>默认的 key 是返回值类型的驼峰命名</p><p>想要修改默认的key，需要在@ModelAttribute 注解中添加name属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalData</span> &#123;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">v1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;v1&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">v2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">v3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;v3&quot;</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">v4</span><span class="hljs-params">()</span>&#123;<br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;ws&quot;</span>);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">data</span><span class="hljs-params">(Model model)</span>&#123;<br>        System.out.println(model);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220522083419940.png" class title="image-20220522083419940"><h3 id="4-7-3-全局数据参数预处理"><a href="#4-7-3-全局数据参数预处理" class="headerlink" title="4.7.3 全局数据参数预处理"></a>4.7.3 全局数据参数预处理</h3><p><strong>定义两个类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span>  Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分别添加数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">addUser</span><span class="hljs-params">(</span><br><span class="hljs-params">            User user,</span><br><span class="hljs-params">            Student student)</span>&#123;<br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(user);<br>        list.add(student);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候，添加操作就会有问题，因为两个实体类都有一个 name 属性，从前端传递时 ，无法区分。此时，通过 @ControllerAdvice 的全局数据预处理可以解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@InitBinder(&quot;u&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">u</span><span class="hljs-params">(WebDataBinder webDataBinder)</span>&#123;<br>    webDataBinder.setFieldDefaultPrefix(<span class="hljs-string">&quot;u.&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@InitBinder(&quot;s&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">s</span><span class="hljs-params">(WebDataBinder webDataBinder)</span>&#123;<br>    webDataBinder.setFieldDefaultPrefix(<span class="hljs-string">&quot;s.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 controller 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">addUser</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@ModelAttribute(&quot;u&quot;)</span> User user,</span><br><span class="hljs-params">            <span class="hljs-meta">@ModelAttribute(&quot;s&quot;)</span> Student student)</span>&#123;<br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(user);<br>        list.add(student);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-7-4-异常页面定义"><a href="#4-7-4-异常页面定义" class="headerlink" title="4.7.4 异常页面定义"></a>4.7.4 异常页面定义</h3><p>在 spring boot 中当程序发生错误，跳转的是一个默认的错误页面</p><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220522095935101.png" class title="image-20220522095935101"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> getMessage(model);<br>logger.error(message);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>response.setContentType(TEXT_HTML_UTF8.toString());<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;timestamp&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;message&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">trace</span> <span class="hljs-operator">=</span> model.get(<span class="hljs-string">&quot;trace&quot;</span>);<br><span class="hljs-keyword">if</span> (response.getContentType() == <span class="hljs-literal">null</span>) &#123;<br>response.setContentType(getContentType());<br>&#125;<br>builder.append(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&quot;</span>).append(<br><span class="hljs-string">&quot;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&quot;</span>)<br>.append(<span class="hljs-string">&quot;&lt;div id=&#x27;created&#x27;&gt;&quot;</span>).append(timestamp).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>)<br>.append(<span class="hljs-string">&quot;&lt;div&gt;There was an unexpected error (type=&quot;</span>).append(htmlEscape(model.get(<span class="hljs-string">&quot;error&quot;</span>)))<br>.append(<span class="hljs-string">&quot;, status=&quot;</span>).append(htmlEscape(model.get(<span class="hljs-string">&quot;status&quot;</span>))).append(<span class="hljs-string">&quot;).&lt;/div&gt;&quot;</span>);<br><span class="hljs-keyword">if</span> (message != <span class="hljs-literal">null</span>) &#123;<br>builder.append(<span class="hljs-string">&quot;&lt;div&gt;&quot;</span>).append(htmlEscape(message)).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (trace != <span class="hljs-literal">null</span>) &#123;<br>builder.append(<span class="hljs-string">&quot;&lt;div style=&#x27;white-space:pre-wrap;&#x27;&gt;&quot;</span>).append(htmlEscape(trace)).append(<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>);<br>&#125;<br>builder.append(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>response.getWriter().append(builder.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>当程序发生错误时，由上述源码可知，直接写死了一个错误页面响应到前端</p><p>ErrorMvcAutoConfiguration：错误处理的自动配置；它给容器中添加了以下组件。</p><p>DefaultErrorAttributes：帮我们在页面共享信息</p><ul><li>timestamp：时间</li><li>path：错误路径</li><li>status：状态码</li><li>error：错误</li><li>message：错误信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getErrorAttributes</span><span class="hljs-params">(ServerRequest request, <span class="hljs-type">boolean</span> includeStackTrace)</span> &#123;<br>   Map&lt;String, Object&gt; errorAttributes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>   errorAttributes.put(<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>   errorAttributes.put(<span class="hljs-string">&quot;path&quot;</span>, request.path());<br>   <span class="hljs-type">Throwable</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> getError(request);<br>   MergedAnnotation&lt;ResponseStatus&gt; responseStatusAnnotation = MergedAnnotations<br>         .from(error.getClass(), SearchStrategy.TYPE_HIERARCHY).get(ResponseStatus.class);<br>   <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">errorStatus</span> <span class="hljs-operator">=</span> determineHttpStatus(error, responseStatusAnnotation);<br>   errorAttributes.put(<span class="hljs-string">&quot;status&quot;</span>, errorStatus.value());<br>   errorAttributes.put(<span class="hljs-string">&quot;error&quot;</span>, errorStatus.getReasonPhrase());<br>   errorAttributes.put(<span class="hljs-string">&quot;message&quot;</span>, determineMessage(error, responseStatusAnnotation));<br>   errorAttributes.put(<span class="hljs-string">&quot;requestId&quot;</span>, request.exchange().getRequest().getId());<br>   handleException(errorAttributes, determineException(error), includeStackTrace);<br>   <span class="hljs-keyword">return</span> errorAttributes;<br>&#125;<br></code></pre></td></tr></table></figure><p>BasicErrorController：处理默认&#x2F;error请求（根据请求头选择具体方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractErrorController</span> &#123;<br>    ...<br>    <span class="hljs-meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span><span class="hljs-comment">//产生HTML数据，浏览器发送的请求来到这个方法进行处理</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">errorHtml</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br><span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br>Map&lt;String, Object&gt; model = Collections<br>.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));<br>response.setStatus(status.value());<br>        <span class="hljs-comment">//去哪个页面作为错误页面：包含页面地址和页面内容</span><br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolveErrorView(request, response, status, model);<br><span class="hljs-keyword">return</span> (modelAndView != <span class="hljs-literal">null</span>) ? modelAndView : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;error&quot;</span>, model);<br>&#125;<br>    <br>    ...<br>    <span class="hljs-comment">//产生JSON数据，来到这个方法进行处理</span><br>    <span class="hljs-meta">@RequestMapping</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><span class="hljs-type">HttpStatus</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> getStatus(request);<br><span class="hljs-keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(status);<br>&#125;<br>Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(body, status);<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p>ErrorPageCustomizer：<br>系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/error&quot;</span>; <span class="hljs-comment">//系统出现错误以后来到 error 请求进行处理</span><br></code></pre></td></tr></table></figure><p>DefaultErrorViewResolver：默认的错误视图解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ModelAndView <span class="hljs-title function_">resolve</span><span class="hljs-params">(String viewName, Map&lt;String, Object&gt; model)</span> &#123;<br>   <span class="hljs-comment">// 默认SpringBoot可以去找到一个页面? error/404</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">errorViewName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;error/&quot;</span> + viewName;<br>    <br>   <span class="hljs-comment">// 如果模板引擎可以解析，就是用模板引擎</span><br>   <span class="hljs-type">TemplateAvailabilityProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.templateAvailabilityProviders.getProvider(errorViewName,<br>         <span class="hljs-built_in">this</span>.applicationContext);<br>   <span class="hljs-keyword">if</span> (provider != <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-comment">//模板引擎解析，就返回到 errorViewName 指定的试图地址</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(errorViewName, model);<br>   &#125;<br>   <span class="hljs-comment">//模板引擎不可用，就在静态资源下找到errorViewName对应的页面</span><br>   <span class="hljs-keyword">return</span> resolveResource(errorViewName, model);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>springboot错误处理步骤：<br>a）一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到&#x2F;error请求；</p><p>b）error请求会被BasicErrorController处理（根据请求头进行不同处理）；</p><p>c）响应页面；去哪个页面是由DefaultErrorViewResolver解析得到的；</p></blockquote><p> <strong>如何定制错误响应</strong></p><ol><li>添加 thymeleaf 依赖</li><li>定制 错误页面</li></ol><p>400.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>400<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入样式 element-ui--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/element.css&#125;&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入组件库 element-ui--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/element.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入 axios--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span></span><br><span class="hljs-tag">            <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;90%&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;imgList&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:row-class-name</span>=<span class="hljs-string">&quot;tableRowClassName&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;timestamp&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;时间&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;path&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;请求路径&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;状态码&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;status&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;error&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;错误&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;message&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;错误信息&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">                <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;requestId&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;请求ID&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">                 *</span></span><br><span class="hljs-comment"><span class="language-javascript">                 - timestamp：时间</span></span><br><span class="hljs-comment"><span class="language-javascript">                 - path：错误路径</span></span><br><span class="hljs-comment"><span class="language-javascript">                 - status：状态码</span></span><br><span class="hljs-comment"><span class="language-javascript">                 - error：错误</span></span><br><span class="hljs-comment"><span class="language-javascript">                 - message：错误信息</span></span><br><span class="hljs-comment"><span class="language-javascript">                 - requestId：请求ID</span></span><br><span class="hljs-comment"><span class="language-javascript">                 */</span></span><br><span class="language-javascript">                <span class="hljs-attr">imgList</span>:[&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">timestamp</span>: [[$&#123;timestamp&#125;]],</span><br><span class="language-javascript">                    <span class="hljs-attr">path</span>: [[$&#123;path&#125;]],</span><br><span class="language-javascript">                    <span class="hljs-attr">status</span>: [[$&#123;status&#125;]],</span><br><span class="language-javascript">                    <span class="hljs-attr">error</span>: [[$&#123;error&#125;]],</span><br><span class="language-javascript">                    <span class="hljs-attr">message</span>: [[$&#123;message&#125;]],</span><br><span class="language-javascript">                    <span class="hljs-attr">requestId</span>: [[$&#123;requestId&#125;]],</span><br><span class="language-javascript">                &#125;]</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当页面请求找不到时，会报 404 错误，查找顺序是：</p><ul><li>templates&#x2F;error&#x2F;404.html</li><li>static&#x2F;error&#x2F;404.html</li><li>template&#x2F;error&#x2F;4xx.html</li><li>static&#x2F;error&#x2F;4xx.html</li></ul><h3 id="4-7-5-自定义异常数据"><a href="#4-7-5-自定义异常数据" class="headerlink" title="4.7.5 自定义异常数据"></a>4.7.5 自定义异常数据</h3><p><strong>自定义数据：继承DefaultErrorAttribute</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyErrorAttribute</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultErrorAttributes</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getErrorAttributes</span><span class="hljs-params">(WebRequest webRequest, ErrorAttributeOptions options)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-built_in">super</span>.getErrorAttributes(webRequest, options);<br>        <span class="hljs-keyword">if</span>((Integer)map.get(<span class="hljs-string">&quot;status&quot;</span>)== <span class="hljs-number">404</span>)&#123;<br>            map.put(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;页面不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义页面：继承DefaultErrorViewResolver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyErrorViewResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultErrorViewResolver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyErrorViewResolver</span><span class="hljs-params">(ApplicationContext applicationContext, WebProperties.Resources resources)</span> &#123;<br>        <span class="hljs-built_in">super</span>(applicationContext, resources);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(<span class="hljs-string">&quot;error/400&quot;</span>,model);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-8-Spring-Boot-中的跨域问题"><a href="#4-8-Spring-Boot-中的跨域问题" class="headerlink" title="4.8 Spring Boot 中的跨域问题"></a>4.8 Spring Boot 中的跨域问题</h2><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p><blockquote><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong><code>同源策略</code></strong></h3><blockquote><p>同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p></blockquote></blockquote><p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</p><p>CORS </p><p>全称：Corss-Origin Resource Sharing 跨域资源共享</p><p>域：协议+域名&#x2F;IP+端口</p><ol><li><p>首先，创建两个项目分别是 cors01：8001，cors02：8002</p></li><li><p>cors01 提供一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>cors02 发送跨域请求，请求这个接口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>跨域请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/jquery-3.4.1.min.js&quot;</span>/&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>8002<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getData()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>)&#123;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://lcoalhost:8001/hello&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>)&#123;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">            <span class="hljs-title function_">alert</span>(resp)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"></span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在浏览器输入 <a href="http://localhost:8002/">http://localhost:8002</a></p></li><li><p>点击按钮，发送请求，出现如下报错</p><p>localhost&#x2F;:1 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Access to XMLHttpRequest at &#x27;http://localhost:8001/hello&#x27; from origin &#x27;http://localhost:8002&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.<br></code></pre></td></tr></table></figure></li></ol><p>对于 CORS的跨域请求，主要有以下几种方式可供选择：</p><ol><li>返回新的CorsFilter</li><li>重写 WebMvcConfigurer</li><li>使用注解 @CrossOrigin</li><li>手动设置响应头 (HttpServletResponse)</li><li>自定web filter 实现跨域</li></ol><h3 id="4-8-1-方式一：编写新的-CorsFilter"><a href="#4-8-1-方式一：编写新的-CorsFilter" class="headerlink" title="4.8.1 方式一：编写新的 CorsFilter"></a>4.8.1 方式一：编写新的 CorsFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalCorsConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CorsFilter <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 添加 CORS配置信息</span><br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>        <span class="hljs-comment">//放行哪些原始域</span><br>        config.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">//是否发送 Cookie</span><br>        config.setAllowCredentials(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//放行哪些请求方式</span><br>        config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">//放行哪些原始请求头部信息</span><br>        config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">//暴露哪些头部信息</span><br>        config.addExposedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">//2. 添加映射路径</span><br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">corsConfigurationSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        corsConfigurationSource.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>,config);<br>        <span class="hljs-comment">//3. 返回新的CorsFilter</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>(corsConfigurationSource);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-8-2-方式二：重写-WebMvcConfigurer"><a href="#4-8-2-方式二：重写-WebMvcConfigurer" class="headerlink" title="4.8.2 方式二：重写 WebMvcConfigurer"></a>4.8.2 方式二：重写 WebMvcConfigurer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">//是否发送Cookie</span><br>                .allowCredentials(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">//放行哪些原始域</span><br>                .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>&#125;)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>                .exposedHeaders(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-8-3-方式三：接口方使用注解-CorsOrigin"><a href="#4-8-3-方式三：接口方使用注解-CorsOrigin" class="headerlink" title="4.8.3 方式三：接口方使用注解 @CorsOrigin"></a>4.8.3 方式三：接口方使用注解 @CorsOrigin</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin(&quot;http://localhost:8002&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以标注在类上，也可以标注在方法上</p><p>指定可以跨域的地址</p><p>写在类上表示，该类下面的所有方法都可以跨域</p><p>写在方法上表示，只有这个方法可以进行跨域</p></blockquote><h3 id="4-8-4-方式四：手动设置响应头-局部跨域"><a href="#4-8-4-方式四：手动设置响应头-局部跨域" class="headerlink" title="4.8.4 方式四：手动设置响应头(局部跨域)"></a>4.8.4 方式四：手动设置响应头(局部跨域)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>    response.addHeader(<span class="hljs-string">&quot;Access-Allow-Control-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-8-5-方式五：使用自定义filter实现跨域"><a href="#4-8-5-方式五：使用自定义filter实现跨域" class="headerlink" title="4.8.5 方式五：使用自定义filter实现跨域"></a>4.8.5 方式五：使用自定义filter实现跨域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(filterName = &quot;CorsFilter &quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) res;<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;POST, GET, PATCH, DELETE, PUT&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Max-Age&quot;</span>, <span class="hljs-string">&quot;3600&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);<br>        chain.doFilter(req, res);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-9-Spring-Boot-导入-XML-配置"><a href="#4-9-Spring-Boot-导入-XML-配置" class="headerlink" title="4.9 Spring Boot 导入 XML 配置"></a>4.9 Spring Boot 导入 XML 配置</h2><p>首先，创建一个 UserService</p><p>第二，在 resources 目录下创建一个 bean.xml 配置文件，并将 UserService 注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ws.cors01.UserService&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>第三，创建一个配置类，导入该 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanXmlConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功配置</p><h2 id="4-10-Spring-Boot-中配置拦截器"><a href="#4-10-Spring-Boot-中配置拦截器" class="headerlink" title="4.10 Spring Boot 中配置拦截器"></a>4.10 Spring Boot 中配置拦截器</h2><ul><li><p>日志记录拦截器</p></li><li><p>权限检查拦截器</p></li><li><p>性能监控拦截器</p></li></ul><p>首先，提供一个 MyInterceptor 继承 HandleInterceptor，实现三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，创建一个 WEB 的配置类,实现其中的 添加拦截器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置成功</p><h2 id="4-11-Spring-Boot-中的系统启动任务"><a href="#4-11-Spring-Boot-中的系统启动任务" class="headerlink" title="4.11 Spring Boot 中的系统启动任务"></a>4.11 Spring Boot 中的系统启动任务</h2><p>在java web项目中，如果涉及到系统任务，例如在项目启动阶段要做一些数据初始化操作，这些操作有一个共同的特点，只在项目启动时进行，以后都不再执行，这里，容易想到web基础中的三大组件（ Servlet、Filter、Listener ）之一 Listener ，这种情况下，一般定义一个 ServletContextListener，然后就可以监听到项目启动和销毁，进而做出相应的数据初始化和销毁操作，例如下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        <span class="hljs-comment">//在这里做数据初始化操作</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        <span class="hljs-comment">//在这里做数据备份操作</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当然，这是基础web项目的解决方案，如果使用了 Spring Boot，那么我们可以使用更为简便的方式。Spring Boot 中针对系统启动任务提供了两种解决方案，分别是 CommandLineRunner 和 ApplicationRunner。</p><h3 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(10)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCommandLineRunner1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (String arg:args) &#123;<br>            System.out.println(<span class="hljs-string">&quot;MyConmandRunner1&gt;&gt;&gt;&quot;</span>+arg);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(9)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCommandLineRunner2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (String arg:args) &#123;<br>            System.out.println(<span class="hljs-string">&quot;MyConmandRunner2&gt;&gt;&gt;&quot;</span>+arg);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> 首先通过 @Compoent 注解将 MyCommandLineRunner1 注册为Spring容器中的一个 Bean。<br>添加 @Order注解，表示这个启动任务的执行优先级，因为在一个项目中，启动任务可能有多个，所以需要有一个排序。@Order 注解中，数字越小，优先级越大，默认情况下，优先级的值为 Integer.MAX_VALUE，表示优先级最低。<br>在 run 方法中，写启动任务的核心逻辑，当项目启动时，run方法会被自动执行。</p><h3 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h3><p>ApplicationRunner 和 CommandLineRunner 功能一致，用法也基本一致，唯一的区别主要体现在对参数的处理上，ApplicationRunner 可以接收更多类型的参数（ApplicationRunner 除了可以接收 CommandLineRunner 的参数之外，还可以接收 key&#x2F;value形式的参数）。</p><p>  使用 ApplicationRunner ，自定义类实现 ApplicationRunner 接口即可，组件注册以及组件优先级的配置都和 CommandLineRunner 一致，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(8)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationRunner1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();<br>        System.out.println(<span class="hljs-string">&quot;MyApplicationRunner1&gt;&gt;&gt;&quot;</span>+nonOptionArgs);<br>        Set&lt;String&gt; optionNames = args.getOptionNames();<br>        <span class="hljs-keyword">for</span> (String key : optionNames) &#123;<br>            System.out.println(<span class="hljs-string">&quot;MyApplicationRunner1&gt;&gt;&gt;&quot;</span>+key + <span class="hljs-string">&quot;:&quot;</span> + args.getOptionValues(key));<br>        &#125;<br>        String[] sourceArgs = args.getSourceArgs();<br>        System.out.println(<span class="hljs-string">&quot;MyApplicationRunner1&gt;&gt;&gt;&quot;</span>+ Arrays.toString(sourceArgs));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当项目启动时，这里的 run 方法就会被自动执行，关于 run 方法的参数 ApplicationArguments:</p><p>args.getNonOptionArgs();可以用来获取命令行中的无key参数（和CommandLineRunner一样）。<br>args.getOptionNames();可以用来获取所有key&#x2F;value形式的参数的key。<br>args.getOptionValues(key));可以根据key获取key&#x2F;value 形式的参数的value。<br>args.getSourceArgs(); 则表示获取命令行中的所有参数。</p><h2 id="4-12-Spring-Boot-整合-WEB-基础组件"><a href="#4-12-Spring-Boot-整合-WEB-基础组件" class="headerlink" title="4.12 Spring Boot 整合 WEB 基础组件"></a>4.12 Spring Boot 整合 WEB 基础组件</h2><h3 id="4-12-1-基本使用方式"><a href="#4-12-1-基本使用方式" class="headerlink" title="4.12.1 基本使用方式"></a>4.12.1 基本使用方式</h3><p>首先，分别创建 Servlet Filter Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;servlet success&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Filter success&quot;</span>);<br>        chain.doFilter(request,response);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequestContextListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent requestEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请求初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent requestEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请求销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，在启动类上方添加注解开启WEB组件扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ServletComponentScan(&quot;com.ws.webcomponent&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">请求初始化<br>Filter success<br>servlet success<br>请求销毁<br></code></pre></td></tr></table></figure><h3 id="4-12-2-注册过滤器的N种方式"><a href="#4-12-2-注册过滤器的N种方式" class="headerlink" title="4.12.2 注册过滤器的N种方式"></a>4.12.2 注册过滤器的N种方式</h3><p><strong>第一种方式：4.12.1</strong></p><p>​    缺点：无法指定 Filter 的优先级</p><p><strong>第二种方式：直接添加到容器中</strong></p><p>​缺点：拦截所有请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(100)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyFilter02&quot;</span>);<br>        chain.doFilter(request,response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第三种方式：注册到注册器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    FilterRegistrationBean&lt;MyFilter04&gt; <span class="hljs-title function_">filter04FilterRegistrationBean</span><span class="hljs-params">()</span>&#123;<br>        FilterRegistrationBean&lt;MyFilter04&gt; bean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>&lt;&gt;();<br>        bean.setOrder(<span class="hljs-number">102</span>);<br>        bean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter04</span>());<br>        bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-13-Spring-Boot-路径映射"><a href="#4-13-Spring-Boot-路径映射" class="headerlink" title="4.13 Spring Boot 路径映射"></a>4.13 Spring Boot 路径映射</h2><p>如果你只需要进行页面的跳转，不需要做其他的业务，就可以进行路径设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>    registry.addViewController(<span class="hljs-string">&quot;/01&quot;</span>).setViewName(<span class="hljs-string">&quot;01&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-14-参数类型转换"><a href="#4-14-参数类型转换" class="headerlink" title="4.14 参数类型转换"></a>4.14 参数类型转换</h2><blockquote><p>我们发现在Controller中定义Post方法需要传递接收一个对象类型的数据，会出现<a href="https://so.csdn.net/so/search?q=%E7%8A%B6%E6%80%81%E7%A0%81&spm=1001.2101.3001.7020">状态码</a>出现400的问题，根本原因在于传递的Key&#x2F;Value值使用的String类型的数据，我们对象类型中则接收的是其他类型的数据</p></blockquote><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/image-20220523101448721.png" class title="image-20220523101448721"><p><strong>创建User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date date;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>请求：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/user-kv&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userK</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义类型转换器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> format.parse(source);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>或者采用JSON传参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/user-json&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userJ</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Post 请求参数可以是Key&#x2F;Value形式，也可以是Json形式</li><li>自定义类型转换器，只对Key&#x2F;Value形式的参数有效</li><li>Json形式的参数不需要类型转换器，JSON字符串是通过HttpMessageConverter转换为其他类型的对象</li></ul><h2 id="4-14-添加浏览器图标-ICON"><a href="#4-14-添加浏览器图标-ICON" class="headerlink" title="4.14 添加浏览器图标 ICON"></a>4.14 添加浏览器图标 ICON</h2><p>新版删除了旧版的一些方法，现提供最新版的角标修改方式：</p><p>在<a href="https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020">static</a>下加入图片，改名为favicon.ico<br>就会自动给页面添加浏览器角标</p><h2 id="4-15-SpringBoot-整合-AOP"><a href="#4-15-SpringBoot-整合-AOP" class="headerlink" title="4.15 SpringBoot 整合 AOP"></a>4.15 SpringBoot 整合 AOP</h2><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">(Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getUser&quot;</span>);<br>        <span class="hljs-keyword">return</span> id.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除 ID:&quot;</span>+id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwError</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>添加AOP切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.ws.aop.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;log()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;:开始执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;log()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;:结束执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;log()&quot;,returning = &quot;resp&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnIng</span><span class="hljs-params">(JoinPoint joinPoint,Object resp)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;:方法返回值-&gt;&quot;</span>+resp);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;log()&quot;,throwing = &quot;e&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint,Exception e)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;:方法异常-&gt;&quot;</span>+e.getMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;log()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pc)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> pc.proceed();<span class="hljs-comment">//类似于反射中的invoke</span><br>            <span class="hljs-keyword">return</span> proceed;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>单元测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>    userService.getUser(<span class="hljs-number">100</span>);<br>    userService.deleteUser(<span class="hljs-number">100</span>);<br>    userService.throwError(<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">getUser:开始执行<br>getUser<br>getUser:方法返回值-&gt;100<br>getUser:结束执行<br>deleteUser:开始执行<br>删除 ID:100<br>deleteUser:方法返回值-&gt;null<br>deleteUser:结束执行<br>throwError:开始执行<br>throwError:方法异常-&gt;/ by zero<br>throwError:结束执行<br>java.lang.ArithmeticException: / by zero<br></code></pre></td></tr></table></figure><h2 id="4-16-定时任务"><a href="#4-16-定时任务" class="headerlink" title="4.16 定时任务"></a>4.16 定时任务</h2><h3 id="方式一：-Scheduled"><a href="#方式一：-Scheduled" class="headerlink" title="方式一：@Scheduled"></a>方式一：@Scheduled</h3><p>使用@Scheduled非常容易，直接创建一个SpringBoot项目，并添加web依赖，项目创建成功后，添加**@EnableScheduling**注解，开启定时任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ScheduledApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，配置定时任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(fixedRate = 2000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixedRate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;fixedRate&gt;&gt;&gt;&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());    <br>    &#125;<br>    <span class="hljs-meta">@Scheduled(fixedDelay = 2000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fixedDelay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;fixedDelay&gt;&gt;&gt;&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br>    <span class="hljs-meta">@Scheduled(initialDelay = 2000,fixedDelay = 2000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialDelay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;initialDelay&gt;&gt;&gt;&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br></code></pre></td></tr></table></figure><ol><li>首先使用 @Scheduled 注解开启一个定时任务。</li><li>fixedRate 表示任务执行之间的时间间隔，具体是指两次任务的开始时间间隔，即第二次任务开始时，第一次任务可能还没结束。</li><li>fixedDelay 表示任务执行之间的时间间隔，具体是指本次任务结束到下次任务开始之间的时间间隔。</li><li>initialDelay 表示首次任务启动的延迟时间。</li><li>所有时间的单位都是毫秒。</li></ol><p>上面这是一个基本用法，除了这几个基本属性之外，@Scheduled 注解也支持 cron 表达式，使用 cron 表达式，可以非常丰富的描述定时任务的时间。cron 表达式格式如下：</p><blockquote><p>[秒] [分] [小时] [日] [月] [周] [年]</p></blockquote><p>具体取值如下：</p><table><thead><tr><th align="left">序号</th><th align="left">说明</th><th align="left">是否必填</th><th align="left">允许填写的值</th><th align="left">允许的通配符</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">秒</td><td align="left">是</td><td align="left">0-59</td><td align="left">- * &#x2F;</td></tr><tr><td align="left">2</td><td align="left">分</td><td align="left">是</td><td align="left">0-59</td><td align="left">- * &#x2F;</td></tr><tr><td align="left">3</td><td align="left">时</td><td align="left">是</td><td align="left">0-23</td><td align="left">- * &#x2F;</td></tr><tr><td align="left">4</td><td align="left">日</td><td align="left">是</td><td align="left">1-31</td><td align="left">- * ? &#x2F; L W</td></tr><tr><td align="left">5</td><td align="left">月</td><td align="left">是</td><td align="left">1-12 or JAN-DEC</td><td align="left">- * &#x2F;</td></tr><tr><td align="left">6</td><td align="left">周</td><td align="left">是</td><td align="left">1-7 or SUN-SAT</td><td align="left">- * ? &#x2F; L #</td></tr><tr><td align="left">7</td><td align="left">年</td><td align="left">否</td><td align="left">1970-2099</td><td align="left">- * &#x2F;</td></tr></tbody></table><p><strong>这一块需要大家注意的是，月份中的日期和星期可能会起冲突，因此在配置时这两个得有一个是 <code>?</code></strong></p><p><strong>通配符含义：</strong></p><ul><li><code>?</code> 表示不指定值，即不关心某个字段的取值时使用。需要注意的是，月份中的日期和星期可能会起冲突，因此在配置时这两个得有一个是 <code>?</code></li><li><code>*</code> 表示所有值，例如:在秒的字段上设置 <code>*</code>,表示每一秒都会触发</li><li><code>,</code> 用来分开多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</li><li><code>-</code> 表示区间，例如在秒上设置 “10-12”,表示 10,11,12秒都会触发</li><li><code>/</code> 用于递增触发，如在秒上面设置”5&#x2F;15” 表示从5秒开始，每增15秒触发(5,20,35,50)</li><li><code>#</code> 序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六，(用 在母亲节和父亲节再合适不过了)</li><li>周字段的设置，若使用英文字母是不区分大小写的 ，即 MON 与mon相同</li><li><code>L</code> 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会自动判断是否是润年), 在周字段上表示星期六，相当于”7”或”SAT”（注意周日算是第一天）。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示”本月最后一个星期五”</li><li><code>W</code> 表示离指定日期的最近工作日(周一至周五)，例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发，如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“)</li><li><code>L</code> 和 <code>W</code> 可以一组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发(一般指发工资 )</li></ul><p>例如，在 @Scheduled 注解中来一个简单的 cron 表达式，每隔5秒触发一次，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * *&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cron</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>上面介绍的是使用 @Scheduled 注解的方式来实现定时任务，接下来我们再来看看如何使用 Quartz 实现定时任务。</p><h3 id="方式二：Quartz"><a href="#方式二：Quartz" class="headerlink" title="方式二：Quartz"></a>方式二：Quartz</h3><p>一般在项目中，除非定时任务涉及到的业务实在是太简单，使用 @Scheduled 注解来解决定时任务，否则大部分情况可能都是使用 Quartz 来做定时任务。在 Spring Boot 中使用 Quartz ，只需要在创建项目时，添加 Quartz 依赖即可：</p><p>项目创建完成后，也需要添加开启定时任务的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(QuartzApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Quartz 在使用过程中，有两个关键概念，一个是JobDetail（要做的事情），另一个是触发器（什么时候做），要定义 JobDetail，需要先定义 Job，Job 的定义有两种方式：</p><p>第一种方式，直接定义一个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJob1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyJob1&gt;&gt;&gt;&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于这种定义方式说两点：</p><p>关于这种定义方式说两点：</p><ol><li>首先将这个 Job 注册到 Spring 容器中。</li><li>这种定义方式有一个缺陷，就是无法传参。</li></ol><p>第二种定义方式，则是继承 QuartzJobBean 并实现默认的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJob2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QuartzJobBean</span> &#123;<br>    HelloService helloService;<br>    <span class="hljs-keyword">public</span> HelloService <span class="hljs-title function_">getHelloService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> helloService;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHelloService</span><span class="hljs-params">(HelloService helloService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.helloService = helloService;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeInternal</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        helloService.sayHello();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello service &gt;&gt;&gt;&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>和第1种方式相比，这种方式支持传参，任务启动时，executeInternal 方法将会被执行。</p><p>Job 有了之后，接下来创建类，配置 JobDetail 和 Trigger 触发器，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    MethodInvokingJobDetailFactoryBean <span class="hljs-title function_">methodInvokingJobDetailFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MethodInvokingJobDetailFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInvokingJobDetailFactoryBean</span>();<br>        bean.setTargetBeanName(<span class="hljs-string">&quot;myJob1&quot;</span>);<br>        bean.setTargetMethod(<span class="hljs-string">&quot;sayHello&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    JobDetailFactoryBean <span class="hljs-title function_">jobDetailFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JobDetailFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JobDetailFactoryBean</span>();<br>        bean.setJobClass(MyJob2.class);<br>        <span class="hljs-type">JobDataMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JobDataMap</span>();<br>        map.put(<span class="hljs-string">&quot;helloService&quot;</span>, helloService());<br>        bean.setJobDataMap(map);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    SimpleTriggerFactoryBean <span class="hljs-title function_">simpleTriggerFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleTriggerFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleTriggerFactoryBean</span>();<br>        bean.setStartTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        bean.setRepeatCount(<span class="hljs-number">5</span>);<br>        bean.setJobDetail(methodInvokingJobDetailFactoryBean().getObject());<br>        bean.setRepeatInterval(<span class="hljs-number">3000</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    CronTriggerFactoryBean <span class="hljs-title function_">cronTrigger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CronTriggerFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CronTriggerFactoryBean</span>();<br>        bean.setCronExpression(<span class="hljs-string">&quot;0/10 * * * * ?&quot;</span>);<br>        bean.setJobDetail(jobDetailFactoryBean().getObject());<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    SchedulerFactoryBean <span class="hljs-title function_">schedulerFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SchedulerFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchedulerFactoryBean</span>();<br>        bean.setTriggers(cronTrigger().getObject(), simpleTriggerFactoryBean().getObject());<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    HelloService <span class="hljs-title function_">helloService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloService</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于这个配置说如下几点：</p><ol><li>JobDetail 的配置有两种方式：MethodInvokingJobDetailFactoryBean 和 JobDetailFactoryBean 。</li><li>使用 MethodInvokingJobDetailFactoryBean 可以配置目标 Bean 的名字和目标方法的名字，这种方式不支持传参。</li><li>使用 JobDetailFactoryBean 可以配置 JobDetail ，任务类继承自 QuartzJobBean ，这种方式支持传参，将参数封装在 JobDataMap 中进行传递。</li><li>Trigger 是指触发器，Quartz 中定义了多个触发器，这里向大家展示其中两种的用法，SimpleTrigger 和 CronTrigger 。</li><li>SimpleTrigger 有点类似于前面说的 @Scheduled 的基本用法。</li><li>CronTrigger 则有点类似于 @Scheduled 中 cron 表达式的用法。</li></ol><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/6-2-16532902217455.png" class title="img"><p>全部定义完成后，启动 Spring Boot 项目就可以看到定时任务的执行了。</p><h2 id="4-17-Spring-Boot-中自定义-SpringMVC-配置，到底继承谁？"><a href="#4-17-Spring-Boot-中自定义-SpringMVC-配置，到底继承谁？" class="headerlink" title="4.17 Spring Boot 中自定义 SpringMVC 配置，到底继承谁？"></a>4.17 Spring Boot 中自定义 SpringMVC 配置，到底继承谁？</h2><p>用过 Spring Boot 的小伙伴都知道，我们只需要在项目中引入 <code>spring-boot-starter-web</code> 依赖，SpringMVC 的一整套东西就会自动给我们配置好，但是，真实的项目环境比较复杂，系统自带的配置不一定满足我们的需求，往往我们还需要结合实际情况自定义配置。</p><h3 id="4-17-1-概览"><a href="#4-17-1-概览" class="headerlink" title="4.17.1 概览"></a>4.17.1 概览</h3><p>首先我们需要明确，跟自定义 SpringMVC 相关的类和注解主要有如下四个：</p><ul><li>WebMvcConfigurerAdapter</li><li>WebMvcConfigurer</li><li>WebMvcConfigurationSupport</li><li>@EnableWebMvc</li></ul><p>这四个中，除了第四个是注解，另外三个两个类一个接口，里边的方法看起来好像都类似，但是实际使用效果却大不相同</p><h3 id="4-17-2-WebMvcConfigurerAdapter"><a href="#4-17-2-WebMvcConfigurerAdapter" class="headerlink" title="4.17.2 WebMvcConfigurerAdapter"></a>4.17.2 WebMvcConfigurerAdapter</h3><p>我们先来看 WebMvcConfigurerAdapter，这个是在 Spring Boot 1.x 中我们自定义 SpringMVC 时继承的一个抽象类，这个抽象类本身是实现了 WebMvcConfigurer 接口，然后抽象类里边都是空方法，我们来看一下这个类的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">//各种 SpringMVC 配置的方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再来看看这个类的注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * An implementation of &#123;<span class="hljs-doctag">@link</span> WebMvcConfigurer&#125; with empty methods allowing</span><br><span class="hljs-comment"> * subclasses to override only the methods they&#x27;re interested in.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@deprecated</span> as of 5.0 &#123;<span class="hljs-doctag">@link</span> WebMvcConfigurer&#125; has default methods (made</span><br><span class="hljs-comment"> * possible by a Java 8 baseline) and can be implemented directly without the</span><br><span class="hljs-comment"> * need for this adapter</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>这段注释关于这个类说的很明白了。同时我们也看到，从 Spring5 开始，由于我们要使用 Java8，而 Java8 中的接口允许存在 default 方法，因此官方建议我们直接实现 WebMvcConfigurer 接口，而不是继承 WebMvcConfigurerAdapter 。</p><p><strong>也就是说，在 Spring Boot 1.x 的时代，如果我们需要自定义 SpringMVC 配置，直接继承 WebMvcConfigurerAdapter 类即可。</strong></p><h3 id="4-17-3-WebMvcConfigurer"><a href="#4-17-3-WebMvcConfigurer" class="headerlink" title="4.17.3 WebMvcConfigurer"></a>4.17.3 WebMvcConfigurer</h3><p>根据上一小节的解释，小伙伴们已经明白了，WebMvcConfigurer 是我们在 Spring Boot 2.x 中实现自定义配置的方案。</p><p>WebMvcConfigurer 是一个接口，接口中的方法和 WebMvcConfigurerAdapter 中定义的空方法其实一样，所以用法上来说，基本上没有差别，从 Spring Boot 1.x 切换到 Spring Boot 2.x ，只需要把继承类改成实现接口即可。</p><h3 id="4-17-4-WebMvcConfigurationSupport"><a href="#4-17-4-WebMvcConfigurationSupport" class="headerlink" title="4.17.4 WebMvcConfigurationSupport"></a>4.17.4 WebMvcConfigurationSupport</h3><p>前面两个都好理解，还有一个 WebMvcConfigurationSupport ，这个又是干什么用的呢？</p><p>在纯SSM配置中，放弃了Spring和SpringMVC的xml配置文件，转而用Java代替这两个xml配置，那么在这里我自定义SpringMVC配置的时候，就是通过继承WebMvcConfigurationSupport 来实现的，在 WebMvcConfigurationSupport 类中，提供了用 Java 配置 SpringMVC 所需要的所有方法。我们来看一下这个方法的摘要：</p><img src="/2022/06/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0SpringBoot%E7%9A%84web%E9%85%8D%E7%BD%AE/37-1.png" class title="img"><p>有一点眼熟，可能有小伙伴发现了，这里的方法其实和前面两个类中的方法基本是一样的。</p><p>在这里首先大家需要明确的是，WebMvcConfigurationSupport 类本身是没有问题的，我们自定义 SpringMVC 的配置是可以通过继承 WebMvcConfigurationSupport 来实现的。但是继承 WebMvcConfigurationSupport 这种操作我们一般只在 Java 配置的 SSM 项目中使用，Spring Boot 中基本上不会这么写，为什么呢？</p><p>小伙伴们知道，Spring Boot 中，SpringMVC 相关的自动化配置是在 WebMvcAutoConfiguration 配置类中实现的，那么我们来看看这个配置类的生效条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们从这个类的注解中可以看到，它的生效条件有一条，就是当不存在 WebMvcConfigurationSupport 的实例时，这个自动化配置才会生生效。因此，如果我们在 Spring Boot 中自定义 SpringMVC 配置时选择了继承 WebMvcConfigurationSupport，就会导致 Spring Boot 中 SpringMVC 的自动化配置失效。</p><p><strong>Spring Boot 给我们提供了很多自动化配置，很多时候当我们修改这些配置的时候，并不是要全盘否定 Spring Boot 提供的自动化配置，我们可能只是针对某一个配置做出修改，其他的配置还是按照 Spring Boot 默认的自动化配置来，而继承 WebMvcConfigurationSupport 来实现对 SpringMVC 的配置会导致所有的 SpringMVC 自动化配置失效，因此，一般情况下我们不选择这种方案。</strong></p><p>在 Java 搭建的 SSM 项目中(<a href="https://mp.weixin.qq.com/s/NC_0oaeBzRjCB34U_ZWxIQ">纯 Java 代码搭建 SSM 环境</a>)，因为本身就没什么自动化配置，所以我们使用了继承 WebMvcConfigurationSupport。</p><h3 id="4-17-5-EnableWebMvc"><a href="#4-17-5-EnableWebMvc" class="headerlink" title="4.17.5 @EnableWebMvc"></a>4.17.5 @EnableWebMvc</h3><p>最后还有一个 @EnableWebMvc 注解，这个注解很好理解，它的作用就是启用 WebMvcConfigurationSupport。我们来看看这个注解的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Adding this annotation to an &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@Configuration</span>&#125; class imports the Spring MVC</span><br><span class="hljs-comment"> * configuration from &#123;<span class="hljs-doctag">@link</span> WebMvcConfigurationSupport&#125;, e.g.:</span><br></code></pre></td></tr></table></figure><p>可以看到，加了这个注解，就会自动导入 WebMvcConfigurationSupport，所以在 Spring Boot 中，我们也不建议使用 @EnableWebMvc 注解，因为它一样会导致 Spring Boot 中的 SpringMVC 自动化配置失效。</p><h3 id="4-17-6-总结"><a href="#4-17-6-总结" class="headerlink" title="4.17.6 总结"></a>4.17.6 总结</h3><ol><li>Spring Boot 1.x 中，自定义 SpringMVC 配置可以通过继承 WebMvcConfigurerAdapter 来实现。</li><li>Spring Boot 2.x 中，自定义 SpringMVC 配置可以通过实现 WebMvcConfigurer 接口来完成。</li><li>如果在 Spring Boot 中使用继承 WebMvcConfigurationSupport 来实现自定义 SpringMVC 配置，或者在 Spring Boot 中使用了 @EnableWebMvc 注解，都会导致 Spring Boot 中默认的 SpringMVC 自动化配置失效。</li><li>在纯 Java 配置的 SSM 环境中，如果我们要自定义 SpringMVC 配置，有两种办法，第一种就是直接继承自 WebMvcConfigurationSupport 来完成 SpringMVC 配置，还有一种方案就是实现 WebMvcConfigurer 接口来完成自定义 SpringMVC 配置，如果使用第二种方式，则需要给 SpringMVC 的配置类上额外添加 @EnableWebMvc 注解，表示启用 WebMvcConfigurationSupport，这样配置才会生效。换句话说，在纯 Java 配置的 SSM 中，如果你需要自定义 SpringMVC 配置，你离不开 WebMvcConfigurationSupport ，所以在这种情况下建议通过继承 WebMvcConfigurationSupport 来实现自动化配置。</li></ol>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot日志框架</title>
    <link href="/2022/05/20/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/05/20/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-日志的概念"><a href="#第一章-日志的概念" class="headerlink" title="第一章 日志的概念"></a>第一章 日志的概念</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>日志文件是用于记录系统操作事件的文件集合，可以分为事件日志和消息日志。具有处理历史数据，诊断问题的追踪以及理解系统的活动等重要作用</p><p>在计算机中，日志文件是记录操作系统或其他软件运行中发生的事件或在通信软件的不同用户之间的消息的记录的文件，记录是保持日志的行为，在最简单的情况下，消息写入单个日志文件</p><h2 id="二、日志的作用"><a href="#二、日志的作用" class="headerlink" title="二、日志的作用"></a>二、日志的作用</h2><ul><li><p>测试</p><p>在java项目调试时，查看栈信息可以方便地知道当前程序的运行状态，输出的日志便于记录程序在之前的运行结果，如果大量的使用out和err，这是一种最方便有效的方法，但是不够专业</p></li><li><p>错误定位</p><p>不要以为项目能正确运行就可以高枕无忧，项目在运行一段时间之后，可能由于数据问题，网络问题，内存问题出现异常，这时日志可以帮助开发者快速定位错误位置，提出解决方案</p></li><li><p>数据分析</p><p>大数据的兴起，使得大量的日志分析，成为可能，ELK也让日志分析门槛降低了许多，日志中蕴含了大量的用户数据，包括点击行为，兴趣等，用户画像对于公司下一步的战略方向有一定的指导作用</p></li></ul><h2 id="三、接触过的日志"><a href="#三、接触过的日志" class="headerlink" title="三、接触过的日志"></a>三、接触过的日志</h2><p>最简单的日志输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(<span class="hljs-string">&#x27;xxx&#x27;</span>)<br></code></pre></td></tr></table></figure><p>以及错误日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.err.println(<span class="hljs-string">&quot;此处发生了异常&quot;</span>);<br></code></pre></td></tr></table></figure><p>此类代码在程序的执行过程中没有什么实质的作用，但是却能打印一些中间变量，辅助我们调试和错误的排查。</p><p>日志系统我们也见过：</p><p>在tomcat中</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315123657205.png" alt="image-20220315123657205"></p><p>当我们的程序无法启动或者运行过程中产生问题，会有所记录，比如我的catalina.log中查看，发现确实有错误信息，这能帮我们迅速定位：</p><p>而我们的<code>System.err</code>只能做到控制台打印日志，所以我们需要更强大日志框架来处理：</p><h2 id="四、主流日志框架"><a href="#四、主流日志框架" class="headerlink" title="四、主流日志框架"></a>四、主流日志框架</h2><ul><li>日志实现（具体干活的）：JUL（java util logging）、logback、log4j、log4j2</li><li>日志门面（指定规则的）：JCL（Jakarta Commons Logging）、slf4j（ Simple Logging Facade for Java）</li></ul><h1 id="第二章-JUL日志框架"><a href="#第二章-JUL日志框架" class="headerlink" title="第二章 JUL日志框架"></a>第二章 JUL日志框架</h1><p>JUL全称Java util Logging是java原生的日志框架，使用时不需要另外引用第三方类库，相对其他日志框 架使用方便，学习简单，能够在小型应用中灵活使用。</p><p>在JUL中有以下组件，我们先做了解，慢慢学习：</p><ul><li>Loggers：被称为记录器，应用程序通过获取Logger对象，调用其API来来发布日志信息。Logger 通常时应用程序访问日志系统的入口程序。</li><li>Appenders：也被称为Handlers，每个Logger都会关联一组Handlers，Logger会将日志交给关联 Handlers处理，由Handlers负责将日志做记录。Handlers在此是一个抽象，其具体的实现决定了 日志记录的位置可以是控制台、文件、网络上的其他日志服务或操作系统日志等。</li><li>Layouts：也被称为Formatters，它负责对日志事件中的数据进行转换和格式化。Layouts决定了 数据在一条日志记录中的最终形式。</li><li>Level：每条日志消息都有一个关联的日志级别。该级别粗略指导了日志消息的重要性和紧迫，我 可以将Level和Loggers，Appenders做关联以便于我们过滤消息。</li><li>Filters：过滤器，根据需要定制哪些信息会被记录，哪些信息会被放过。</li></ul><p><strong>总结一下就是：</strong></p><p> 用户使用Logger来进行日志记录，Logger持有若干个Handler，日志的输出操作是由Handler完成的。 在Handler在输出日志前，会经过Filter的过滤，判断哪些日志级别过滤放行哪些拦截，Handler会将日志内容输出到指定位置（日志文件、控制台等）。Handler在输出日志时会使用Layout，将输出内容进行排版。</p><h2 id="一、入门案例"><a href="#一、入门案例" class="headerlink" title="一、入门案例"></a>一、入门案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 logger 对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;myLog&quot;</span>);<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJUL</span><span class="hljs-params">()</span>&#123;<br>    LOGGER.severe(<span class="hljs-string">&quot;十分严重的日志&quot;</span>);<br>    LOGGER.warning(<span class="hljs-string">&quot;警告&quot;</span>);<br>    LOGGER.info(<span class="hljs-string">&quot;信息&quot;</span>);<br>    LOGGER.fine(<span class="hljs-string">&quot;fine&quot;</span>);<br>    LOGGER.finer(<span class="hljs-string">&quot;finer&quot;</span>);<br>    LOGGER.finest(<span class="hljs-string">&quot;finest&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315142048210.png" alt="image-20220315142048210"></p><h2 id="二、日志的级别"><a href="#二、日志的级别" class="headerlink" title="二、日志的级别"></a>二、日志的级别</h2><p> jul中定义的日志级别，从上述例子中我们也看到使用info和warning打印出的日志有不同的前缀，通过给日志设置不同的级别可以清晰的从日志中区分出哪些是基本信息，哪些是调试信息，哪些是严重的异常。</p><p>（1）java.util.logging.Level中定义了日志的级别：</p><ol><li>SEVERE（最高值）</li><li>WARNING</li><li>INFO （默认级别）</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST（最低值）</li></ol><p>再例如：我们查看tomcat的日志，能明显的看到不同级别的日志，其实tomcat默认使用的就是JUL：</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315142211926.png" alt="image-20220315142211926"></p><p>还有两个特殊的级别：</p><ul><li>OFF，可用来关闭日志记录。</li><li>ALL，启用所有消息的日志记录。</li></ul><p>虽然我们测试了7个日志级别，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogger</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(LoggerTest.class.getName());<br>    logger.severe(<span class="hljs-string">&quot;severe&quot;</span>);<br>    logger.warning(<span class="hljs-string">&quot;warning&quot;</span>);<br>    logger.info(<span class="hljs-string">&quot;info&quot;</span>);<br>    logger.config(<span class="hljs-string">&quot;config&quot;</span>);<br>    logger.fine(<span class="hljs-string">&quot;fine&quot;</span>);<br>    logger.finer(<span class="hljs-string">&quot;finer&quot;</span>);<br>    logger.finest(<span class="hljs-string">&quot;finest&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现能够打印的只有三行，这是为什么呢？</p><p>我们找一下这个文件，下图是jdk11的日志配置文件：</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315142333792.png" alt="image-20220315142333792"></p><p>或者在jdk1.8中：</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315142408197.png" alt="image-20220315142408197"></p><p>就可以看到系统默认在控制台打印的日志级别了，系统配置我们暂且不动，一会我们独立创建配置文件完成修改。</p><p>但是我们可以简单的看看这个日志配置了哪些内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">.level</span>= <span class="hljs-string">INFO</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">############################################################</span><br><span class="hljs-comment"># Handler specific properties.</span><br><span class="hljs-comment"># Describes specific configuration info for Handlers.</span><br><span class="hljs-comment">############################################################</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># default file output is in user&#x27;s home directory.</span><br><span class="hljs-attr">java.util.logging.FileHandler.pattern</span> = <span class="hljs-string">%h/java%u.log</span><br><span class="hljs-attr">java.util.logging.FileHandler.limit</span> = <span class="hljs-string">50000</span><br><span class="hljs-attr">java.util.logging.FileHandler.count</span> = <span class="hljs-string">1</span><br><span class="hljs-comment"># Default number of locks FileHandler can obtain synchronously.</span><br><span class="hljs-comment"># This specifies maximum number of attempts to obtain lock file by FileHandler</span><br><span class="hljs-comment"># implemented by incrementing the unique field %u as per FileHandler API documentation.</span><br><span class="hljs-attr">java.util.logging.FileHandler.maxLocks</span> = <span class="hljs-string">100</span><br><span class="hljs-attr">java.util.logging.FileHandler.formatter</span> = <span class="hljs-string">java.util.logging.XMLFormatter</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Limit the message that are printed on the console to INFO and above.</span><br><span class="hljs-attr">java.util.logging.ConsoleHandler.level</span> = <span class="hljs-string">INFO</span><br><span class="hljs-attr">java.util.logging.ConsoleHandler.formatter</span> = <span class="hljs-string">java.util.logging.SimpleFormatter</span><br></code></pre></td></tr></table></figure><p>在日志中我们发现了，貌似可以给这个日志对象添加各种handler就是处理器，比如ConsoleHandler专门处理控制台日志，FileHandler貌似可以处理文件，同时我们确实发现了他有这么一个方法：</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315143019303.png" alt="image-20220315143019303"></p><h2 id="三、日志配置"><a href="#三、日志配置" class="headerlink" title="三、日志配置"></a>三、日志配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogConfig</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1.创建日志记录器对象</span><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;com.ydlclass.log.JULTest&quot;</span>);<br>    <br>    <span class="hljs-comment">// 一、自定义日志级别</span><br>    <span class="hljs-comment">// a.关闭系统默认配置</span><br>    logger.setUseParentHandlers(<span class="hljs-literal">false</span>);<br>    <br>    <span class="hljs-comment">// b.创建handler对象</span><br>    <span class="hljs-type">ConsoleHandler</span> <span class="hljs-variable">consoleHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleHandler</span>();<br>    <br>    <span class="hljs-comment">// c.创建formatter对象</span><br>    <span class="hljs-type">SimpleFormatter</span> <span class="hljs-variable">simpleFormatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFormatter</span>();<br>    <br>    <span class="hljs-comment">// d.进行关联</span><br>    consoleHandler.setFormatter(simpleFormatter);<br>    logger.addHandler(consoleHandler);<br>    <br>    <span class="hljs-comment">// e.设置日志级别</span><br>    logger.setLevel(Level.ALL);<br>    consoleHandler.setLevel(Level.ALL);<br>    <br>    <span class="hljs-comment">// 二、输出到日志文件</span><br>    <span class="hljs-type">FileHandler</span> <span class="hljs-variable">fileHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>(<span class="hljs-string">&quot;d:/logs/jul.log&quot;</span>);<br>    fileHandler.setFormatter(simpleFormatter);<br>    logger.addHandler(fileHandler);<br>    <br>    <span class="hljs-comment">// 2.日志记录输出</span><br>    logger.severe(<span class="hljs-string">&quot;severe&quot;</span>);<br>    logger.warning(<span class="hljs-string">&quot;warning&quot;</span>);<br>    logger.info(<span class="hljs-string">&quot;info&quot;</span>);<br>    logger.config(<span class="hljs-string">&quot;config&quot;</span>);<br>    logger.fine(<span class="hljs-string">&quot;fine&quot;</span>);<br>    logger.finer(<span class="hljs-string">&quot;finer&quot;</span>);<br>    logger.finest(<span class="hljs-string">&quot;finest&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再次查看结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">01</span> 上午 com.ydlclass.entity.LoggerTest testConfig<br>严重: severe<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">01</span> 上午 com.ydlclass.entity.LoggerTest testConfig<br>警告: warning<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">01</span> 上午 com.ydlclass.entity.LoggerTest testConfig<br>信息: info<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">01</span> 上午 com.ydlclass.entity.LoggerTest testConfig<br>配置: config<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">01</span> 上午 com.ydlclass.entity.LoggerTest testConfig<br>详细: fine<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">01</span> 上午 com.ydlclass.entity.LoggerTest testConfig<br>较详细: finer<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">01</span> 上午 com.ydlclass.entity.LoggerTest testConfig<br>非常详细: finest<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="四、-Logger之间的父子关系"><a href="#四、-Logger之间的父子关系" class="headerlink" title="四、 Logger之间的父子关系"></a>四、 Logger之间的父子关系</h2><p> JUL中Logger之间存在父子关系，这种父子关系通过树状结构存储，JUL在初始化时会创建一个顶层 RootLogger作为所有Logger父Logger，存储上作为树状结构的根节点。并父子关系通过名称来关联。默认子Logger会继承父Logger的属性。</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315144221904.png" alt="image-20220315144221904"></p><p>所有的logger实例都是由LoggerManager统一管理，不妨我们点进getLogger方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger <span class="hljs-title function_">demandLogger</span><span class="hljs-params">(String name, String resourceBundleName, Class&lt;?&gt; caller)</span> &#123;<br>    <span class="hljs-type">LogManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> LogManager.getLogManager();<br>    <span class="hljs-keyword">if</span> (!SystemLoggerHelper.disableCallerCheck) &#123;<br>        <span class="hljs-keyword">if</span> (isSystem(caller.getModule())) &#123;<br>            <span class="hljs-keyword">return</span> manager.demandSystemLogger(name, resourceBundleName, caller);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> manager.demandLogger(name, resourceBundleName, caller);<br>    <span class="hljs-comment">// ends up calling new Logger(name, resourceBundleName, caller)</span><br>    <span class="hljs-comment">// iff the logger doesn&#x27;t exist already</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到LogManager是单例的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LogManager <span class="hljs-title function_">getLogManager</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (manager != <span class="hljs-literal">null</span>) &#123;<br>        manager.ensureLogManagerInitialized();<br>    &#125;<br>    <span class="hljs-keyword">return</span> manager;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogParent</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger1</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;com.ydlclass.service&quot;</span>);<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger2</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;com.ydlclass&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;logger1 = &quot;</span> + logger1);<br>    System.out.println(<span class="hljs-string">&quot;logger1.getParent() = &quot;</span> + logger1.getParent());<br>    System.out.println(<span class="hljs-string">&quot;logger2 = &quot;</span> + logger2);<br>    System.out.println(<span class="hljs-string">&quot;logger2.getParent() = &quot;</span> + logger2.getParent());<br>    System.out.println(logger1.getParent() == logger2);<br>&#125;<br><br>结果：<br>logger1 = java.util.logging.Logger@2b4bac49<br>logger1.getParent() = java.util.logging.Logger<span class="hljs-meta">@fd07cbb</span><br>logger2 = java.util.logging.Logger<span class="hljs-meta">@fd07cbb</span><br>logger2.getParent() = java.util.logging.LogManager$RootLogger@3571b748<br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogParent</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger1</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;com.ydlclass.service&quot;</span>);<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger2</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-string">&quot;com.ydlclass&quot;</span>);<br>    <span class="hljs-comment">// 一、对logger2进行独立的配置</span><br>    <span class="hljs-comment">// 1.关闭系统默认配置</span><br>    logger2.setUseParentHandlers(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 2.创建handler对象</span><br>    <span class="hljs-type">ConsoleHandler</span> <span class="hljs-variable">consoleHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleHandler</span>();<br>    <span class="hljs-comment">// 3.创建formatter对象</span><br>    <span class="hljs-type">SimpleFormatter</span> <span class="hljs-variable">simpleFormatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFormatter</span>();<br>    <span class="hljs-comment">// 4.进行关联</span><br>    consoleHandler.setFormatter(simpleFormatter);<br>    logger2.addHandler(consoleHandler);<br>    <span class="hljs-comment">// 5.设置日志级别</span><br>    logger2.setLevel(Level.ALL);<br>    consoleHandler.setLevel(Level.ALL);<br>    <span class="hljs-comment">// 测试logger1是否被logger2影响</span><br>    logger1.severe(<span class="hljs-string">&quot;severe&quot;</span>);<br>    logger1.warning(<span class="hljs-string">&quot;warning&quot;</span>);<br>    logger1.info(<span class="hljs-string">&quot;info&quot;</span>);<br>    logger1.config(<span class="hljs-string">&quot;config&quot;</span>);<br>    logger1.fine(<span class="hljs-string">&quot;fine&quot;</span>);<br>    logger1.finer(<span class="hljs-string">&quot;finer&quot;</span>);<br>    logger1.finest(<span class="hljs-string">&quot;finest&quot;</span>);<br>&#125;<br>    <br>    <br> <span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">15</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>严重: severe<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">15</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>警告: warning<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">15</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>信息: info<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">15</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>配置: config<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">15</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>详细: fine<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">15</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>较详细: finer<br><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">45</span>:<span class="hljs-number">15</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>非常详细: finest<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="五、日志格式化"><a href="#五、日志格式化" class="headerlink" title="五、日志格式化"></a>五、日志格式化</h2><p>我们可以独立的实现日志格式化的Formatter，而不使用SimpleFormatter，我们可以做如下处理，最后返回的结果我们可以随意拼写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Formatter</span> <span class="hljs-variable">myFormatter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Formatter</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(LogRecord record)</span> &#123;<br>        <span class="hljs-keyword">return</span> record.getLoggerName()+<span class="hljs-string">&quot;.&quot;</span> +record.getSourceMethodName() + <span class="hljs-string">&quot; &quot;</span> + LocalDateTime.ofInstant(record.getInstant(), ZoneId.systemDefault())+<span class="hljs-string">&quot;\r\n&quot;</span><br>            +record.getLevel()+<span class="hljs-string">&quot;: &quot;</span> +record.getMessage() + <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>结果为：</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315145229684.png" alt="image-20220315145229684"></p><p>当然我们参考一下SimpleFormatter的该方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// format string for printing the log record</span><br><span class="hljs-keyword">static</span> String <span class="hljs-title function_">getLoggingProperty</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> LogManager.getLogManager().getProperty(name);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span><br>    SurrogateLogger.getSimpleFormat(SimpleFormatter::getLoggingProperty);<br><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zdt</span> <span class="hljs-operator">=</span> ZonedDateTime.ofInstant(<br>    record.getInstant(), ZoneId.systemDefault());<br><span class="hljs-keyword">return</span> String.format(format,<br>                     zdt,<br>                     source,<br>                     record.getLoggerName(),<br>                     record.getLevel().getLocalizedLevelName(),<br>                     message,<br>                     throwable);<br></code></pre></td></tr></table></figure><p>这个写法貌似比我们的写法高级一点，所以我们必须好好学一下String的format方法了。</p><h3 id="1、String的format方法"><a href="#1、String的format方法" class="headerlink" title="1、String的format方法"></a>1、String的format方法</h3><p>String类的format()方法用于创建格式化的字符串以及连接多个字符串对象。</p><p>format()方法有两种重载形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(String format, Object... args)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Formatter</span>().format(format, args).toString();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(Locale l, String format, Object... args)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Formatter</span>(l).format(format, args).toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个方法中我们可以定义字符串模板，然后使用类似填空的方式将模板格式化成我们想要的结果字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">java</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;hello %s&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br></code></pre></td></tr></table></figure><p>得到的结果就是hello world，我们可以把第一个参数当做模板， %s当做填空题，后边的可变参数当做答案</p><h3 id="2、常用的转换符"><a href="#2、常用的转换符" class="headerlink" title="2、常用的转换符"></a>2、常用的转换符</h3><p>当然不同数据类型需要不同转换符完成字符串的转换，以下是不同类型的转化符列表：</p><table><thead><tr><th align="left">转换符</th><th align="left">详细说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><strong>%s</strong></td><td align="left"><strong>字符串类型</strong></td><td align="left"><strong>“喜欢请收藏”</strong></td></tr><tr><td align="left">%c</td><td align="left">字符类型</td><td align="left">‘m’</td></tr><tr><td align="left">%b</td><td align="left">布尔类型</td><td align="left">true</td></tr><tr><td align="left"><strong>%d</strong></td><td align="left"><strong>整数类型（十进制）</strong></td><td align="left"><strong>88</strong></td></tr><tr><td align="left">%x</td><td align="left">整数类型（十六进制）</td><td align="left">FF</td></tr><tr><td align="left">%o</td><td align="left">整数类型（八进制）</td><td align="left">77</td></tr><tr><td align="left"><strong>%f</strong></td><td align="left"><strong>浮点类型</strong></td><td align="left"><strong>8.888</strong></td></tr><tr><td align="left">%a</td><td align="left">十六进制浮点类型</td><td align="left">FF.35AE</td></tr><tr><td align="left">%e</td><td align="left">指数类型</td><td align="left">9.38e+5</td></tr><tr><td align="left"><strong>%n</strong></td><td align="left">换行符</td><td align="left"></td></tr><tr><td align="left">%tx</td><td align="left">日期与时间类型（x代表不同的日期与时间转换符)</td><td align="left">后边详细说</td></tr></tbody></table><p>小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;过年了，%s今年%d岁了，今天收了%f元的压岁钱!&quot;</span>,<br>                <span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">88.88</span>);<br><br>结果：<br>    过年了，小明今年<span class="hljs-number">5</span>岁了，今天收了<span class="hljs-number">88.880000</span>元的压岁钱!<br></code></pre></td></tr></table></figure><h3 id="3、特殊符号"><a href="#3、特殊符号" class="headerlink" title="3、特殊符号"></a>3、特殊符号</h3><p>接下来我们看几个特殊字符的常用搭配，可以实现一些高级功能：</p><table><thead><tr><th align="left">标志</th><th align="left">说明</th><th align="left">示例</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">为正数或者负数添加符号，因为一般整数不会主动加符号</td><td align="left">(“%+d”,15)</td><td align="left">+15</td></tr><tr><td align="left">0</td><td align="left">数字前面补0，用于对齐</td><td align="left">(“%04d”, 99)</td><td align="left">0099</td></tr><tr><td align="left">空格</td><td align="left">在整数之前添加指定数量的空格</td><td align="left">(“%4d”, 99)</td><td align="left">99</td></tr><tr><td align="left">,</td><td align="left">以“,”对数字分组(常用显示金额)</td><td align="left">(“%,f”, 9999.99)</td><td align="left">9,999.990000</td></tr><tr><td align="left">(</td><td align="left">使用括号包含负数</td><td align="left">(“%(f”, -99.99)</td><td align="left">(99.990000)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;过年了，%s今年%03d岁了，今天收了%,f元的压岁钱!&quot;</span>,<br>                <span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8888.88</span>);<br>                结果<br>        过年了，小明今年<span class="hljs-number">005</span>岁了，今天收了<span class="hljs-number">8</span>,<span class="hljs-number">888.880000</span>元的压岁钱!        <br></code></pre></td></tr></table></figure><p>默认情况下，我们的可变参数是安装顺序依次替换，但是我想重复利用可变参数那该怎么处理呢？</p><p>我们可以采用 在转换符中加<code>数字$</code>完成匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;%1$s %1$s %1$s&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br></code></pre></td></tr></table></figure><p>其中1$就代表第一个参数，那么2$就代表第二个参数了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">小明 小明 小明<br></code></pre></td></tr></table></figure><h3 id="4、日期处理"><a href="#4、日期处理" class="headerlink" title="4、日期处理"></a>4、日期处理</h3><p>第一个例子中有说到 %tx x代表日期转换符 我也顺便列举下日期转换符</p><table><thead><tr><th align="left">标志</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">c</td><td align="left">包括全部日期和时间信息</td><td align="left">周四 10月 21 14:52:10 GMT+08:00 2021</td></tr><tr><td align="left">F</td><td align="left">“年-月-日”格式</td><td align="left">2021-10-21</td></tr><tr><td align="left">D</td><td align="left">“月&#x2F;日&#x2F;年”格式</td><td align="left">10&#x2F;21&#x2F;21</td></tr><tr><td align="left">r</td><td align="left">“HH:MM:SS PM”格式（12时制）</td><td align="left">02:53:20 下午</td></tr><tr><td align="left">T</td><td align="left">“HH:MM:SS”格式（24时制）</td><td align="left">14:53:39</td></tr><tr><td align="left">R</td><td align="left">“HH:MM”格式（24时制）</td><td align="left">14:53</td></tr><tr><td align="left">b</td><td align="left">月份本地化</td><td align="left">10月</td></tr><tr><td align="left">y</td><td align="left">两位的年</td><td align="left">21</td></tr><tr><td align="left">Y</td><td align="left">四位的年</td><td align="left">2021</td></tr><tr><td align="left">m</td><td align="left">月</td><td align="left">10</td></tr><tr><td align="left">d</td><td align="left">日</td><td align="left">21</td></tr><tr><td align="left">H</td><td align="left">24小时制的时</td><td align="left">14</td></tr><tr><td align="left">l</td><td align="left">12小时制的时</td><td align="left">2</td></tr><tr><td align="left">M</td><td align="left">分</td><td align="left">57</td></tr><tr><td align="left">S</td><td align="left">秒</td><td align="left">46</td></tr><tr><td align="left">s</td><td align="left">秒为单位的时间戳</td><td align="left">1634799527</td></tr><tr><td align="left">p</td><td align="left">上午还是下午</td><td align="left">下午</td></tr></tbody></table><p>我们可以使用以下三个类去进行格式化，其中可能存在不支持的情况，比如LocalDateTime不支持c：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.printf(<span class="hljs-string">&quot;%tc&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>System.out.printf(<span class="hljs-string">&quot;%tc&quot;</span>,ZonedDateTime.now());<br>System.out.printf(<span class="hljs-string">&quot;%tF&quot;</span>,LocalDateTime.now());<br></code></pre></td></tr></table></figure><p>此时我们使用debug查看，默认情况下的fomat，我们不妨来读一读：</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220315150455275.png" alt="image-20220315150455275"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">10</span>月 <span class="hljs-number">21</span>, <span class="hljs-number">2021</span> <span class="hljs-number">2</span>:<span class="hljs-number">23</span>:<span class="hljs-number">42</span> 下午 com.ydlclass.entity.LoggerTest testLogParent<br>警告: warning<br></code></pre></td></tr></table></figure><h2 id="六、配置文件"><a href="#六、配置文件" class="headerlink" title="六、配置文件"></a>六、配置文件</h2><p>我们不妨看看一个文件处理器的源码是怎么读配置项的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">()</span> &#123;<br>    <br>        <span class="hljs-type">LogManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> LogManager.getLogManager();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cname</span> <span class="hljs-operator">=</span> getClass().getName();<br><br>        pattern = manager.getStringProperty(cname + <span class="hljs-string">&quot;.pattern&quot;</span>, <span class="hljs-string">&quot;%h/java%u.log&quot;</span>);<br>        limit = manager.getLongProperty(cname + <span class="hljs-string">&quot;.limit&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (limit &lt; <span class="hljs-number">0</span>) &#123;<br>            limit = <span class="hljs-number">0</span>;<br>        &#125;<br>        count = manager.getIntProperty(cname + <span class="hljs-string">&quot;.count&quot;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>) &#123;<br>            count = <span class="hljs-number">1</span>;<br>        &#125;<br>        append = manager.getBooleanProperty(cname + <span class="hljs-string">&quot;.append&quot;</span>, <span class="hljs-literal">false</span>);<br>        setLevel(manager.getLevelProperty(cname + <span class="hljs-string">&quot;.level&quot;</span>, Level.ALL));<br>        setFilter(manager.getFilterProperty(cname + <span class="hljs-string">&quot;.filter&quot;</span>, <span class="hljs-literal">null</span>));<br>        setFormatter(manager.getFormatterProperty(cname + <span class="hljs-string">&quot;.formatter&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLFormatter</span>()));<br>        <span class="hljs-comment">// Initialize maxLocks from the logging.properties file.</span><br>        <span class="hljs-comment">// If invalid/no property is provided 100 will be used as a default value.</span><br>        maxLocks = manager.getIntProperty(cname + <span class="hljs-string">&quot;.maxLocks&quot;</span>, MAX_LOCKS);<br>        <span class="hljs-keyword">if</span>(maxLocks &lt;= <span class="hljs-number">0</span>) &#123;<br>            maxLocks = MAX_LOCKS;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            setEncoding(manager.getStringProperty(cname +<span class="hljs-string">&quot;.encoding&quot;</span>, <span class="hljs-literal">null</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                setEncoding(<span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception ex2) &#123;<br>                <span class="hljs-comment">// doing a setEncoding with null should always work.</span><br>                <span class="hljs-comment">// assert false;</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以从以下源码中看到配置项:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StreamHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> MeteredStream meter;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> append;<br>    <span class="hljs-comment">// 限制文件大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> limit;       <span class="hljs-comment">// zero =&gt; no limit.</span><br>    <span class="hljs-comment">// 控制日志文件的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-comment">// 日志文件的格式化方式</span><br>    <span class="hljs-keyword">private</span> String pattern;<br>    <span class="hljs-keyword">private</span> String lockFileName;<br>    <span class="hljs-keyword">private</span> FileChannel lockFileChannel;<br>    <span class="hljs-keyword">private</span> File files[];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_LOCKS</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">// 可以理解为同时可以有多少个线程打开文件，源码中有介绍</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxLocks</span> <span class="hljs-operator">=</span> MAX_LOCKS;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; locks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们已经知道系统默认的配置文件的位置，那我们能不能自定义呢？当然可以了，我们从jdk中赋值一个配置文件过来：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">.level</span>= <span class="hljs-string">INFO</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># default file output is in user&#x27;s home directory.</span><br><span class="hljs-attr">java.util.logging.FileHandler.pattern</span> = <span class="hljs-string">%h/java%u.log</span><br><span class="hljs-attr">java.util.logging.FileHandler.limit</span> = <span class="hljs-string">50000</span><br><span class="hljs-attr">java.util.logging.FileHandler.count</span> = <span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Default number of locks FileHandler can obtain synchronously.</span><br><span class="hljs-comment"># This specifies maximum number of attempts to obtain lock file by FileHandler</span><br><span class="hljs-comment"># implemented by incrementing the unique field %u as per FileHandler API documentation.</span><br><span class="hljs-attr">java.util.logging.FileHandler.maxLocks</span> = <span class="hljs-string">100</span><br><span class="hljs-attr">java.util.logging.FileHandler.formatter</span> = <span class="hljs-string">java.util.logging.XMLFormatter</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Limit the message that are printed on the console to INFO and above.</span><br><span class="hljs-attr">java.util.logging.ConsoleHandler.level</span> = <span class="hljs-string">INFO</span><br><span class="hljs-attr">java.util.logging.ConsoleHandler.formatter</span> = <span class="hljs-string">java.util.logging.SimpleFormatter</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n</span><br></code></pre></td></tr></table></figure><p>读取自己的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReadConfigurationFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">LogManager</span> <span class="hljs-variable">logManager</span> <span class="hljs-operator">=</span> LogManager.getLogManager();<br>    logManager.readConfiguration(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="hljs-string">&quot;log.properties&quot;</span>));<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(<span class="hljs-built_in">this</span>.getClass().getName());<br>    logger.fine(<span class="hljs-string">&quot;fine&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第三章-LOG4J-日志框架"><a href="#第三章-LOG4J-日志框架" class="headerlink" title="第三章 LOG4J 日志框架"></a>第三章 LOG4J 日志框架</h1><p>Log4j是Apache下的一款开源的日志框架。 官方网站： <a href="http://logging.apache.org/log4j/1.2/%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E6%AC%BE%E6%AF%94%E8%BE%83%E8%80%81%E7%9A%84%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%EF%BC%8C%E7%9B%AE%E5%89%8D%E6%96%B0%E7%9A%84log4j2%E5%81%9A%E4%BA%86%E5%BE%88%E5%A4%A7%E7%9A%84%E6%94%B9%E5%8A%A8%EF%BC%8C%E4%BB%BB%E7%84%B6%E6%9C%89%E4%B8%80%E4%BA%9B%E9%A1%B9%E7%9B%AE%E5%9C%A8%E4%BD%BF%E7%94%A8log4j%E3%80%82">http://logging.apache.org/log4j/1.2/，这是一款比较老的日志框架，目前新的log4j2做了很大的改动，任然有一些项目在使用log4j。</a></p><h2 id="一、入门案例-1"><a href="#一、入门案例-1" class="headerlink" title="一、入门案例"></a>一、入门案例</h2><ol><li><p>建立maven工程</p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogger</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(Log4jTest.class);<br>    <span class="hljs-comment">// 日志记录输出</span><br>    logger.info(<span class="hljs-string">&quot;hello log4j&quot;</span>);<br>    <span class="hljs-comment">// 日志级别</span><br>    logger.fatal(<span class="hljs-string">&quot;fatal&quot;</span>); <span class="hljs-comment">// 严重错误，一般会造成系统崩溃和终止运行</span><br>    logger.error(<span class="hljs-string">&quot;error&quot;</span>); <span class="hljs-comment">// 错误信息，但不会影响系统运行</span><br>    logger.warn(<span class="hljs-string">&quot;warn&quot;</span>); <span class="hljs-comment">// 警告信息，可能会发生问题</span><br>    logger.info(<span class="hljs-string">&quot;info&quot;</span>); <span class="hljs-comment">// 程序运行信息，数据库的连接、网络、IO操作等</span><br>    logger.debug(<span class="hljs-string">&quot;debug&quot;</span>); <span class="hljs-comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span><br>    logger.trace(<span class="hljs-string">&quot;trace&quot;</span>); <span class="hljs-comment">// 追踪信息，记录程序的所有流程信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发现会有一些警告，JUL可以直接在控制台输出是因为他有默认的配置文件，而这个独立的第三方的日志框架却没有配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cobol">log4j:WARN No appenders could be found for logger (com.ydlclass.entity.Log4jTest).<br>log4j:WARN Please initialize the log4j system properly.<br>log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.<br></code></pre></td></tr></table></figure><p>我们在执行代码之前，加上以下代码，他会初始化一个默认配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BasicConfigurator.configure();<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cobol">0 [main] INFO com.ydlclass.entity.Log4jTest  - hello log4j<br>1 [main] FATAL com.ydlclass.entity.Log4jTest  - fatal<br>1 [main] ERROR com.ydlclass.entity.Log4jTest  - error<br>1 [main] WARN com.ydlclass.entity.Log4jTest  - warn<br>1 [main] INFO com.ydlclass.entity.Log4jTest  - info<br>1 [main] DEBUG com.ydlclass.entity.Log4jTest  - debug<br></code></pre></td></tr></table></figure><p>log4j定义了以下的日志的级别，和JUL的略有不同：</p><ol><li>fatal 指出每个严重的错误事件将会导致应用程序的退出。</li><li>error 指出虽然发生错误事件，但仍然不影响系统的继续运行。</li><li>warn 表明会出现潜在的错误情形。</li><li>info 一般和在粗粒度级别上，强调应用程序的运行全程。</li><li>debug 一般用于细粒度级别上，对调试应用程序非常有帮助。</li><li>trace 是程序追踪，可以用于输出程序运行中的变量，显示执行的流程。</li></ol><p>和JUL一样：还有两个特殊的级别：OFF，可用来关闭日志记录。 ALL，启用所有消息的日志记录。</p><p>一般情况下，我们只使用4个级别，优先级从高到低为 ERROR &gt; WARN &gt; INFO &gt; DEBUG</p></li></ol><h2 id="二、组件讲解"><a href="#二、组件讲解" class="headerlink" title="二、组件讲解"></a>二、组件讲解</h2><p> Log4J 主要由 Loggers (日志记录器)、Appenders（输出端）和 Layout（日志格式化器）组成。其中 Loggers 控制日志的输出级别与日志是否输出；Appenders 指定日志的输出方式（输出到控制台、文件 等）；Layout 控制日志信息的输出格式。</p><h4 id="1、Loggers"><a href="#1、Loggers" class="headerlink" title="1、Loggers"></a>1、Loggers</h4><p>日志记录器：负责收集处理日志记录，实例的命名就是类“XX”的full quailied name（类的全限定名）， Logger的名字大小写敏感，其命名有继承机制：例如：name为com.ydlclass.service的logger会继承 name为com.ydlclass的logger，和JUL一致。</p><p>Log4J中有一个特殊的logger叫做“root”，他是所有logger的根，也就意味着其他所有的logger都会直接 或者间接地继承自root。root logger可以用Logger.getRootLogger()方法获取。 JUL是不是也有一个名为<code>.</code>的根。</p><h4 id="2、Appenders"><a href="#2、Appenders" class="headerlink" title="2、Appenders"></a>2、Appenders</h4><p>Appender和JUL的Handler很像，用来指定日志输出到哪个地方，可以同时指定日志的输出目的地。Log4j 常用的输出目的地 有以下几种：</p><table><thead><tr><th>输出端类型</th><th>作用</th></tr></thead><tbody><tr><td>ConsoleAppender</td><td>将日志输出到控制台</td></tr><tr><td>FileAppender</td><td>将日志输出到文件中</td></tr><tr><td>DailyRollingFileAppender</td><td>将日志输出到一个日志文件，并且每天输出到一个新的文件</td></tr><tr><td>RollingFileAppender</td><td>将日志信息输出到一个日志文件，并且指定文件的尺寸，当文件大 小达到指定尺寸时，会自动把文件改名，同时产生一个新的文件</td></tr><tr><td>JDBCAppender</td><td>把日志信息保存到数据库中</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 配置一个控制台输出源</span><br><span class="hljs-type">ConsoleAppender</span> <span class="hljs-variable">consoleAppender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleAppender</span>();<br>consoleAppender.setName(<span class="hljs-string">&quot;ydl&quot;</span>);<br>consoleAppender.setWriter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(System.out));<br>logger.addAppender(consoleAppender);<br></code></pre></td></tr></table></figure><h4 id="3、Layouts"><a href="#3、Layouts" class="headerlink" title="3、Layouts"></a>3、Layouts</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Layout</span> <span class="hljs-variable">layout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Layout</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(LoggingEvent loggingEvent)</span> &#123;<br>        <span class="hljs-keyword">return</span> loggingEvent.getLoggerName() + <span class="hljs-string">&quot; &quot;</span><br>            +loggingEvent.getMessage() + <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">ignoresThrowable</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">activateOptions</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>有一些默认的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Layout</span> <span class="hljs-variable">layout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleLayout</span>();<br></code></pre></td></tr></table></figure><p>他的实现太简单了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(LoggingEvent event)</span> &#123;<br>    sbuf.setLength(<span class="hljs-number">0</span>);<br>    sbuf.append(event.getLevel().toString());<br>    sbuf.append(<span class="hljs-string">&quot; - &quot;</span>);<br>    sbuf.append(event.getRenderedMessage());<br>    sbuf.append(LINE_SEP);<br>    <span class="hljs-keyword">return</span> sbuf.toString();<br>  &#125;<br></code></pre></td></tr></table></figure><p>还有一个比较常用的Layout，就是PatternLayout这个实现类，能够根据特定的占位符进行转化，和JUL很像，但是又不一样，我们庖丁解牛研究一番，首先看他的构造器，构造器中如果传入一个pattern字符串，他会根据这个pattern创建一个链表，这个链表具体干什么咱们慢慢往后看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">PatternLayout</span><span class="hljs-params">(String pattern)</span> &#123;<br>    <span class="hljs-built_in">this</span>.pattern = pattern;<br>    head = createPatternParser((pattern == <span class="hljs-literal">null</span>) ? DEFAULT_CONVERSION_PATTERN :<br>                               pattern).parse();<br>&#125;<br></code></pre></td></tr></table></figure><p>将步骤拆解开来看，首先创建了一个解析器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> PatternParser <span class="hljs-title function_">createPatternParser</span><span class="hljs-params">(String pattern)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternParser</span>(pattern);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看parse方法，这个方法比较复杂我们简化来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> PatternConverter <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> c;<br>    i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; patternLength) &#123;<br>        ...此次省略了很多代码，但是可以从这个核心看出来<br>        c = pattern.charAt(i++);<br>        finalizeConverter(c);<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>而finalizeConverter做的工作大家就能看的很清楚了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalizeConverter</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>    <span class="hljs-type">PatternConverter</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">switch</span>(c) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryPatternConverter</span>(formattingInfo,<br>extractPrecisionOption());<br>      <span class="hljs-comment">//LogLog.debug(&quot;CATEGORY converter.&quot;);</span><br>      <span class="hljs-comment">//formattingInfo.dump();</span><br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//处理类名的转化器</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNamePatternConverter</span>(formattingInfo,<br> extractPrecisionOption());<br>      <span class="hljs-comment">//LogLog.debug(&quot;CLASS_NAME converter.&quot;);</span><br>      <span class="hljs-comment">//formattingInfo.dump();</span><br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>     <span class="hljs-comment">//处理时间的转化器</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>      <span class="hljs-type">String</span> <span class="hljs-variable">dateFormatStr</span> <span class="hljs-operator">=</span> AbsoluteTimeDateFormat.ISO8601_DATE_FORMAT;<br>      DateFormat df;<br>... <br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatePatternConverter</span>(formattingInfo, df);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//输出日志时间发生的位置，包括类名、线程、及在代码中的行数</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;F&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocationPatternConverter</span>(formattingInfo,<br>FILE_LOCATION_CONVERTER);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;l&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocationPatternConverter</span>(formattingInfo,<br>FULL_LOCATION_CONVERTER);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocationPatternConverter</span>(formattingInfo,<br>LINE_LOCATION_CONVERTER);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;m&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicPatternConverter</span>(formattingInfo, MESSAGE_CONVERTER);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocationPatternConverter</span>(formattingInfo,<br>METHOD_LOCATION_CONVERTER);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;p&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicPatternConverter</span>(formattingInfo, LEVEL_CONVERTER);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicPatternConverter</span>(formattingInfo,<br> RELATIVE_TIME_CONVERTER);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicPatternConverter</span>(formattingInfo, THREAD_CONVERTER);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicPatternConverter</span>(formattingInfo, NDC_CONVERTER);<br>      <span class="hljs-comment">//LogLog.debug(&quot;NDC converter.&quot;);</span><br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>:<br>      <span class="hljs-type">String</span> <span class="hljs-variable">xOpt</span> <span class="hljs-operator">=</span> extractOption();<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MDCPatternConverter</span>(formattingInfo, xOpt);<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      LogLog.error(<span class="hljs-string">&quot;Unexpected char [&quot;</span> +c+<span class="hljs-string">&quot;] at position &quot;</span>+i<br>   +<span class="hljs-string">&quot; in conversion patterrn.&quot;</span>);<br>      pc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LiteralPatternConverter</span>(currentLiteral.toString());<br>      currentLiteral.setLength(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    addConverter(pc);<br>  &#125;<br></code></pre></td></tr></table></figure><p>下边就是一个典型的链表结构的构建了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addConverter</span><span class="hljs-params">(PatternConverter pc)</span> &#123;<br>    currentLiteral.setLength(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// Add the pattern converter to the list.</span><br>    addToList(pc);<br>    <span class="hljs-comment">// Next pattern is assumed to be a literal.</span><br>    state = LITERAL_STATE;<br>    <span class="hljs-comment">// Reset formatting info</span><br>    formattingInfo.reset();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">addToList</span><span class="hljs-params">(PatternConverter pc)</span> &#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) &#123;<br>        head = tail = pc;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        tail.next = pc;<br>        tail = pc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建完转化器链表之后，就是循环这个链表，一次处理对应的占位符了，他的核心的格式化的方法也是format方法，在format方法中是通过一个转化器链来完成转化的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(LoggingEvent event)</span> &#123;<br>    <span class="hljs-comment">// 在format方法中是通过一个转化器链来完成转化的</span><br>    <span class="hljs-type">PatternConverter</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> head;<br><br>    <span class="hljs-keyword">while</span>(c != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 这一句是核心，第一个参数是一个StringBuilder，第二个参数LoggingEvent</span><br>      c.format(sbuf, event);<br>      c = c.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sbuf.toString();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是通过一个pattern字符串，这个字符串可能张这个样子（%-d{yyyy-MM-dd HH:mm:ss} [%t:%r] -[%p] %m%n），使用createPatternParser().parse()方法构建一个处理器的链表，这个每个处理器处理一个占位符比如（%d）。</p><p>进入c.format()方法，我们会进入一个抽象类PatternConverter中的format方法，里边的核心就是如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">format</span><span class="hljs-params">(StringBuffer sbuf, LoggingEvent e)</span> &#123;<br>    <span class="hljs-comment">// 核心就是这一句</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> convert(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>log4j 其实采用类似 C 语言的 printf 函数的打印格式格式化日志信息，源码已经看过了，具体的占位符及其含义如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">%m 输出代码中指定的日志信息<br>%p 输出日志级别，及 DEBUG、INFO 等<br>%n 换行符（Windows平台的换行符为 &quot;\n&quot;，Unix 平台为 &quot;\n&quot;）<br>%r 输出自应用启动到输出该 log 信息耗费的毫秒数<br>%c 输出打印语句所属的类的全名<br>%t 输出产生该日志的线程全名<br>%d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d&#123;yyyy年MM月dd日HH:mm:ss&#125;<br>%l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)<br>%F 输出日志消息产生时所在的文件名称<br>%L 输出代码中的行号<br>%% 输出一个 &quot;%&quot; 字符<br>* 可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：<br>%5c 输出category名称，最小宽度是5，category&lt;5，默认的情况下右对齐<br>%-5c 输出category名称，最小宽度是5，category&lt;5，&quot;-&quot;号指定左对齐,会有空格<br>%.5c 输出category名称，最大宽度是5，category&gt;5，就会将左边多出的字符截掉，&lt;5不会有空格<br>%20.30c category名称&lt;20补空格，并且右对齐，&gt;30字符，就从左边交远销出的字符截掉<br></code></pre></td></tr></table></figure><p>举一个例子：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] -[%p] %m%n<br>打印：日期 [线程:毫秒数] - [日志级别] - 日志信息 换行<br></code></pre></td></tr></table></figure><p>尝试写一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLog</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 获取一个logger</span><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(TestLog4j.class);<br>    <span class="hljs-comment">// 创建一个layout</span><br>    <span class="hljs-type">Layout</span> <span class="hljs-variable">layout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternLayout</span>(<span class="hljs-string">&quot;%-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] -[%p] %m%n&quot;</span>);<br>    <span class="hljs-comment">// 创建一个输出源</span><br>    <span class="hljs-type">ConsoleAppender</span> <span class="hljs-variable">appender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleAppender</span>();<br>    appender.setLayout(layout);<br>    appender.setWriter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(System.out));<br>    logger.addAppender(appender);<br>    logger.warn(<span class="hljs-string">&quot;warning&quot;</span>);<br>&#125;<br><br>结果：<br><span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">31</span>:<span class="hljs-number">05</span> [main:<span class="hljs-number">0</span>] -[WARN] warning<br></code></pre></td></tr></table></figure><p>配置一个jdbcAppender</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JDBCAppender</span> <span class="hljs-variable">jdbcAppender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDBCAppender</span>();<br>jdbcAppender.setDriver(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>jdbcAppender.setURL(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ydlclass?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>);<br>jdbcAppender.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>jdbcAppender.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>jdbcAppender.setSql(<span class="hljs-string">&quot;INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values(&#x27;ydlclass&#x27;,&#x27;%d&#123;yyyy-MM-ddHH:mm:ss&#125;&#x27;,&#x27;%p&#x27;,&#x27;%c&#x27;,&#x27;%F&#x27;,&#x27;%t&#x27;,&#x27;%L&#x27;,&#x27;%l&#x27;,&#x27;%m&#x27;)&quot;</span>);<br>        <br></code></pre></td></tr></table></figure><p>数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `log` (<br>    `log_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `project_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;目项名&#x27;</span>,<br>    `create_date` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    `level` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;优先级&#x27;</span>,<br>    `category` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;所在类的全名&#x27;</span>,<br>    `file_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;输出日志消息产生时所在的文件名称 &#x27;</span>,<br>    `thread_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;日志事件的线程名&#x27;</span>,<br>    `line` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;号行&#x27;</span>,<br>    `all_category` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;日志事件的发生位置&#x27;</span>,<br>    `message` <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;输出代码中指定的消息&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`log_id`)<br>);<br></code></pre></td></tr></table></figure><p>依赖</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;8.0.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><p>log4j不仅仅可以在控制台，文件文件中输出日志，甚至可以在数据库中，我们先使用配置的方式完成日志的输入：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#指定日志的输出级别与输出端</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">INFO,Console,ydl</span><br><span class="hljs-comment"># 控制台输出配置</span><br><span class="hljs-attr">log4j.appender.Console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.Console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.Console.layout.ConversionPattern</span>=<span class="hljs-string">%d [%t] %-5p [%c] - %m%n</span><br><span class="hljs-comment"># 文件输出配置</span><br><span class="hljs-attr">log4j.appender.ydl</span> = <span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><br><span class="hljs-comment">#指定日志的输出路径</span><br><span class="hljs-attr">log4j.appender.ydl.File</span> = <span class="hljs-string">D:/logs/ydl.log</span><br><span class="hljs-attr">log4j.appender.ydl.Append</span> = <span class="hljs-string">true</span><br><span class="hljs-comment">#使用自定义日志格式化器</span><br><span class="hljs-attr">log4j.appender.ydl.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-comment">#指定日志的输出格式</span><br><span class="hljs-attr">log4j.appender.ydl.layout.ConversionPattern</span> = <span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] -[%p] %m%n</span><br><span class="hljs-comment">#指定日志的文件编码</span><br><span class="hljs-attr">log4j.appender.ydl.encoding</span>=<span class="hljs-string">UTF-8</span><br></code></pre></td></tr></table></figure><p>有了这个配置文件我们些代码就简单了一些：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConfig</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 获取一个logger</span><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(TestLog4j.class);<br>    logger.warn(<span class="hljs-string">&quot;warning&quot;</span>);<br>&#125;<br><br>结果：<br>    <span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">37</span>:<span class="hljs-number">06</span>,<span class="hljs-number">705</span> [main] WARN  [com.ydlclass.TestLog4j] - warning<br></code></pre></td></tr></table></figure><p>当然日志配置文件是什么时候读取的呢？每一个logger都是LogManager创建的，而LogManager有一个静态代码块帮助我们解析配置文件，细节就不需要了解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogManager</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@deprecated</span> This variable is for internal use only. It will</span><br><span class="hljs-comment">   * become package protected in future versions.</span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_CONFIGURATION_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;log4j.properties&quot;</span>;<br>  <br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_XML_CONFIGURATION_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;log4j.xml&quot;</span>;  <br>   <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@deprecated</span> This variable is for internal use only. It will</span><br><span class="hljs-comment">   * become private in future versions.</span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> String DEFAULT_CONFIGURATION_KEY=<span class="hljs-string">&quot;log4j.configuration&quot;</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@deprecated</span> This variable is for internal use only. It will</span><br><span class="hljs-comment">   * become private in future versions.</span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> String CONFIGURATOR_CLASS_KEY=<span class="hljs-string">&quot;log4j.configuratorClass&quot;</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@deprecated</span> This variable is for internal use only. It will</span><br><span class="hljs-comment">  * become private in future versions.</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_INIT_OVERRIDE_KEY</span> <span class="hljs-operator">=</span> <br>                                                 <span class="hljs-string">&quot;log4j.defaultInitOverride&quot;</span>;<br><br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">guard</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> RepositorySelector repositorySelector;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>      <span class="hljs-comment">// By default we use a DefaultRepositorySelector which always returns &#x27;h&#x27;.</span><br>      <span class="hljs-type">Hierarchy</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hierarchy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RootLogger</span>((Level) Level.DEBUG));<br>      repositorySelector = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRepositorySelector</span>(h);<br><br>      <span class="hljs-comment">/** Search for the properties file log4j.properties in the CLASSPATH.  */</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">override</span> <span class="hljs-operator">=</span>OptionConverter.getSystemProperty(DEFAULT_INIT_OVERRIDE_KEY,<br>                                                         <span class="hljs-literal">null</span>);<br><br>      <span class="hljs-comment">// if there is no default init override, then get the resource</span><br>      <span class="hljs-comment">// specified by the user or the default config file.</span><br>      <span class="hljs-keyword">if</span>(override == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(override)) &#123;<br><br>          <span class="hljs-type">String</span> <span class="hljs-variable">configurationOptionStr</span> <span class="hljs-operator">=</span> OptionConverter.getSystemProperty(<br>              DEFAULT_CONFIGURATION_KEY, <br>              <span class="hljs-literal">null</span>);<br><br>          <span class="hljs-type">String</span> <span class="hljs-variable">configuratorClassName</span> <span class="hljs-operator">=</span> OptionConverter.getSystemProperty(<br>              CONFIGURATOR_CLASS_KEY, <br>              <span class="hljs-literal">null</span>);<br><br>          <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>          <span class="hljs-comment">// if the user has not specified the log4j.configuration</span><br>          <span class="hljs-comment">// property, we search first for the file &quot;log4j.xml&quot; and then</span><br>          <span class="hljs-comment">// &quot;log4j.properties&quot;</span><br>          <span class="hljs-keyword">if</span>(configurationOptionStr == <span class="hljs-literal">null</span>) &#123;<br>              url = Loader.getResource(DEFAULT_XML_CONFIGURATION_FILE);<br>              <span class="hljs-keyword">if</span>(url == <span class="hljs-literal">null</span>) &#123;<br>                  url = Loader.getResource(DEFAULT_CONFIGURATION_FILE);<br>              &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">try</span> &#123;<br>                  url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(configurationOptionStr);<br>              &#125; <span class="hljs-keyword">catch</span> (MalformedURLException ex) &#123;<br>                  <span class="hljs-comment">// so, resource is not a URL:</span><br>                  <span class="hljs-comment">// attempt to get the resource from the class path</span><br>                  url = Loader.getResource(configurationOptionStr); <br>              &#125;<br>          &#125;<br><br>          <span class="hljs-comment">// If we have a non-null url, then delegate the rest of the</span><br>          <span class="hljs-comment">// configuration to the OptionConverter.selectAndConfigure</span><br>          <span class="hljs-comment">// method.</span><br>          <span class="hljs-keyword">if</span>(url != <span class="hljs-literal">null</span>) &#123;<br>              LogLog.debug(<span class="hljs-string">&quot;Using URL [&quot;</span>+url+<span class="hljs-string">&quot;] for automatic log4j configuration.&quot;</span>);<br>              <span class="hljs-keyword">try</span> &#123;<br>                  OptionConverter.selectAndConfigure(url, configuratorClassName,<br>                                                     LogManager.getLoggerRepository());<br>              &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError e) &#123;<br>                  LogLog.warn(<span class="hljs-string">&quot;Error during default initialization&quot;</span>, e);<br>              &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              LogLog.debug(<span class="hljs-string">&quot;Could not find resource: [&quot;</span>+configurationOptionStr+<span class="hljs-string">&quot;].&quot;</span>);<br>          &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          LogLog.debug(<span class="hljs-string">&quot;Default initialization of overridden by &quot;</span> + <br>                       DEFAULT_INIT_OVERRIDE_KEY + <span class="hljs-string">&quot;property.&quot;</span>); <br>      &#125;  <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>还有更有意思的，我们可以直接添加一个数据源，讲日志输出到数据库中，就是一个和数据库链接的输出源而已：</p><p>加入一个数据库的日志输出源：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#mysql</span><br><span class="hljs-attr">log4j.appender.logDB</span>=<span class="hljs-string">org.apache.log4j.jdbc.JDBCAppender</span><br><span class="hljs-attr">log4j.appender.logDB.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.logDB.Driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">log4j.appender.logDB.URL</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm</span><br><span class="hljs-attr">log4j.appender.logDB.User</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">log4j.appender.logDB.Password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">log4j.appender.logDB.Sql</span>=<span class="hljs-string">INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values(&#x27;ydlclass&#x27;,&#x27;%d&#123;yyyy-MM-ddHH:mm:ss&#125;&#x27;,&#x27;%p&#x27;,&#x27;%c&#x27;,&#x27;%F&#x27;,&#x27;%t&#x27;,&#x27;%L&#x27;,&#x27;%l&#x27;,&#x27;%m&#x27;)</span><br></code></pre></td></tr></table></figure><p>需要</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `log` (<br>    `log_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    `project_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;目项名&#x27;</span>,<br>    `create_date` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    `level` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;优先级&#x27;</span>,<br>    `category` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;所在类的全名&#x27;</span>,<br>    `file_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;输出日志消息产生时所在的文件名称 &#x27;</span>,<br>    `thread_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;日志事件的线程名&#x27;</span>,<br>    `line` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;号行&#x27;</span>,<br>    `all_category` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;日志事件的发生位置&#x27;</span>,<br>    `message` <span class="hljs-type">varchar</span>(<span class="hljs-number">4000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;输出代码中指定的消息&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`log_id`)<br>);<br></code></pre></td></tr></table></figure><p>pom中添加驱动：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次执行：</p><p>发现除了控制台，文件，数据库中也有了日志了：</p><h2 id="四、自定义Logger"><a href="#四、自定义Logger" class="headerlink" title="四、自定义Logger"></a>四、自定义Logger</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># RootLogger配置</span><br><span class="hljs-attr">log4j.rootLogger</span> = <span class="hljs-string">trace,console</span><br><span class="hljs-comment"># 自定义Logger</span><br><span class="hljs-attr">log4j.logger.com.ydlclass</span>= <span class="hljs-string">WARN,logDB</span><br><span class="hljs-attr">log4j.logger.org.apache</span> = <span class="hljs-string">error</span><br></code></pre></td></tr></table></figure><p>由此我们发现，我们可以很灵活的自定义，组装不同logger的实现，接下来我们写代码测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDefineLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger1</span> <span class="hljs-operator">=</span> Logger.getLogger(Log4jTest.class);<br>    logger1.fatal(<span class="hljs-string">&quot;fatal&quot;</span>); <span class="hljs-comment">// 严重错误，一般会造成系统崩溃和终止运行</span><br>    logger1.error(<span class="hljs-string">&quot;error&quot;</span>); <span class="hljs-comment">// 错误信息，但不会影响系统运行</span><br>    logger1.warn(<span class="hljs-string">&quot;warn&quot;</span>); <span class="hljs-comment">// 警告信息，可能会发生问题</span><br>    logger1.info(<span class="hljs-string">&quot;info&quot;</span>); <span class="hljs-comment">// 程序运行信息，数据库的连接、网络、IO操作等</span><br>    logger1.debug(<span class="hljs-string">&quot;debug&quot;</span>); <span class="hljs-comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span><br>    logger1.trace(<span class="hljs-string">&quot;trace&quot;</span>); <span class="hljs-comment">// 追踪信息，记录程序的所有流程信息</span><br>    <span class="hljs-comment">// 自定义 org.apache</span><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger2</span> <span class="hljs-operator">=</span> Logger.getLogger(Logger.class);<br>    logger2.fatal(<span class="hljs-string">&quot;fatal logger2&quot;</span>); <span class="hljs-comment">// 严重错误，一般会造成系统崩溃和终止运行</span><br>    logger2.error(<span class="hljs-string">&quot;error logger2&quot;</span>); <span class="hljs-comment">// 错误信息，但不会影响系统运行</span><br>    logger2.warn(<span class="hljs-string">&quot;warn logger2&quot;</span>); <span class="hljs-comment">// 警告信息，可能会发生问题</span><br>    logger2.info(<span class="hljs-string">&quot;info logger2&quot;</span>); <span class="hljs-comment">// 程序运行信息，数据库的连接、网络、IO操作等</span><br>    logger2.debug(<span class="hljs-string">&quot;debug logger2&quot;</span>); <span class="hljs-comment">// 调试信息，一般在开发阶段使用，记录程序的变量、参数等</span><br>    logger2.trace(<span class="hljs-string">&quot;trace logger2&quot;</span>); <span class="hljs-comment">// 追踪信息，记录程序的所有流程信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现logger1的日志级别成了warn，并且在数据库中有了日志，logger2级别成了error，他们其实都继承了根logger的一些属性。</p><h1 id="第四章-日志门面"><a href="#第四章-日志门面" class="headerlink" title="第四章 日志门面"></a>第四章 日志门面</h1><p> 当我们的系统变的复杂的之后，难免会集成其他的系统，不同的系统之间可能会使用不同的日志系统。那么在一个系统中，我们的日志框架可能会出现多个，会出现混乱，而且随着时间的发展，可能会出现新的效率更高的日志系统，如果我们想切换代价会非常的大。如果我们的日志系统能和jdbc一样，有一套自己的规范，其他实现均按照规范去实现，就能很灵活的使用日志框架了。</p><p> 日志门面就是为了解决这个问题而出现的一种技术，日志门面是规范，其他的实现按照规范实现各自的日志框架即可，我们程序员基于日志门面编程即可。举个例子：日志门面就好比菜单，日志实现就好比厨师，我们去餐馆吃饭按照菜单点菜即可，厨师是谁其实不重要，但是有一个符合我口味的厨师当然会更好。</p><p>常见的日志门面： JCL、slf4j</p><p>常见的日志实现： JUL、log4j、logback、log4j2</p><p>日志框架出现的历史顺序：</p><p>log4j –&gt;JUL–&gt;JCL–&gt; slf4j –&gt; logback –&gt; log4j2</p><h2 id="一、SLF4J日志门面"><a href="#一、SLF4J日志门面" class="headerlink" title="一、SLF4J日志门面"></a>一、SLF4J日志门面</h2><p> 简单日志门面(Simple Logging Facade For Java) SLF4J主要是为了给Java日志访问提供一套标准、规范的API框架，其主要意义在于提供接口，具体的实现可以交由其他日志框架，例如log4j和logback等。 当然slf4j自己也提供了功能较为简单的实现，但是一般很少用到。对于一般的Java项目而言，日志框架 会选择slf4j-api作为门面，配上具体的实现框架（log4j、logback等），中间使用桥接器完成桥接。官方网站： <a href="https://www.slf4j.org/">https://www.slf4j.org/</a></p><p>SLF4J是目前市面上最流行的日志门面。现在的项目中，基本上都是使用SLF4J作为我们的日志系统。</p><p>SLF4J日志门面主要提供两大功能：</p><ol><li>日志框架的绑定</li><li>日志框架的桥接</li></ol><h3 id="1、阿里日志规约"><a href="#1、阿里日志规约" class="headerlink" title="1、阿里日志规约"></a>1、阿里日志规约</h3><ol><li>应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架SLF4J中的API。使用门面模式的日志框架，有利于维护和各个类的日志处理方法统一。</li><li>日志文件推荐至少保存15天，因为有些异常具备以“周”为频次发生的特点。</li><li>应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。logType为日志类型，推荐分类有stats&#x2F;monitor&#x2F;visit 等；</li><li>logName为日志描述。这种命名的好处：通过文件名就可以知道日志文件属于哪个应用，哪种类型，有什么目的，这也有利于归类查找。</li><li>对trace&#x2F;debug&#x2F;info级别的日志输出，必须使用条件输出形式或者占位符的方式。</li><li>避免重复打印日志，否则会浪费磁盘空间。务必在日志配置文件中设置additivity&#x3D;false。</li><li>异常信息应该包括两类：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字向上抛出。</li><li>谨慎地记录日志。生产环境禁止输出debug日志；有选择地输出info日志；如果使用warn记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免吧服务器磁盘撑爆，并及时删除这些观察日志。</li><li>可以使用warn日志级别记录用户输入参数错误的情况，避免当用户投诉时无所适从</li></ol><h3 id="2、SLF4J实战"><a href="#2、SLF4J实战" class="headerlink" title="2、SLF4J实战"></a>2、SLF4J实战</h3><p>（1）添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--slf4j core 使用slf4j必須添加--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--slf4j 自带的简单日志实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSlf4j</span> &#123;<br><br>    <span class="hljs-comment">// 声明日志对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span><br>            LoggerFactory.getLogger(TestSlf4j.class);<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSlfSimple</span><span class="hljs-params">()</span>  &#123;<br>        <span class="hljs-comment">//打印日志信息</span><br>        LOGGER.error(<span class="hljs-string">&quot;error&quot;</span>);<br>        LOGGER.warn(<span class="hljs-string">&quot;warn&quot;</span>);<br>        LOGGER.info(<span class="hljs-string">&quot;info&quot;</span>);<br>        LOGGER.debug(<span class="hljs-string">&quot;debug&quot;</span>);<br>        LOGGER.trace(<span class="hljs-string">&quot;trace&quot;</span>);<br>        <span class="hljs-comment">// 使用占位符输出日志信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lucy&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br>        LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;今年&#123;&#125;岁了！&quot;</span>, name, age);<br>        <span class="hljs-comment">// 将系统异常信息写入日志</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// e.printStackTrace();</span><br>            LOGGER.info(<span class="hljs-string">&quot;出现异常：&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、绑定其他日志的实现（Binding）"><a href="#3、绑定其他日志的实现（Binding）" class="headerlink" title="3、绑定其他日志的实现（Binding）"></a>3、绑定其他日志的实现（Binding）</h3><p>如前所述，SLF4J支持各种日志框架。SLF4J发行版附带了几个称为“SLF4J绑定”的jar文件，每个绑定对应一个受支持的框架。</p><p><strong>使用slf4j的日志绑定流程:</strong></p><ol><li><p>添加slf4j-api的依赖</p></li><li><p>使用slf4j的API在项目中进行统一的日志记录</p></li><li><p>绑定具体的日志实现框架</p><p>a. 绑定已经实现了slf4j的日志框架,直接添加对应依赖</p><p>b. 绑定没有实现slf4j的日志框架,先添加日志的适配器,再添加实现类的依赖</p></li><li><p>slf4j有且仅有一个日志实现框架的绑定（如果出现多个默认使用第一个依赖日志实现）</p></li></ol><p><strong>绑定jul的实现</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-jdk14<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>绑定log4j的实现</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--slf4j core 使用slf4j必須添加--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- log4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要切换日志框架，只需替换类路径上的slf4j绑定。例如，要从java.util.logging切换到log4j，只需将 slf4j-jdk14-1.7.27.jar替换为slf4j-log4j12-1.7.27.jar即可。</p><p> SLF4J不依赖于任何特殊的类装载。实际上，每个SLF4J绑定在编译时都是硬连线的， 以使用一个且只有 一个特定的日志记录框架。例如，slf4j-log4j12-1.7.27.jar绑定在编译时绑定以使用log4j</p><h3 id="4、桥接旧的日志框架（Bridging）"><a href="#4、桥接旧的日志框架（Bridging）" class="headerlink" title="4、桥接旧的日志框架（Bridging）"></a>4、桥接旧的日志框架（Bridging）</h3><p>通常，您依赖的某些组件依赖于SLF4J以外的日志记录API。您也可以假设这些组件在不久的将来不会切换到SLF4J。为了解决这种情况，SLF4J附带了几个桥接模块，这些模块将对log4j，JCL和 java.util.logging API的调用重定向，就好像它们是对SLF4J API一样。</p><p> 就是你还用log4j的api写代码，但是具体的实现给你抽离了，我们依赖了一个中间层，这个层其实是用旧的api操作slf4j，而不是操作具体的实现。</p><p>桥接解决的是项目中日志的遗留问题，当系统中存在之前的日志API，可以通过桥接转换到slf4j的实现</p><ol><li>先去除之前老的日志框架的依赖，必须去掉。</li><li>添加SLF4J提供的桥接组件，这个组件就是模仿之前老的日志写了一套相同的api，只不过这个api是在调用slf4j的api。</li><li>为项目添加SLF4J的具体实现。</li></ol><p>迁移的方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 桥接的组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SLF4J提供的桥接器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- jul --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jul-to-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--jcl --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意问题：</p><ol><li>jcl-over-slf4j.jar和 slf4j-jcl.jar不能同时部署。前一个jar文件将导致JCL将日志系统的选择委托给 SLF4J，后一个jar文件将导致SLF4J将日志系统的选择委托给JCL，从而导致无限循环。</li><li>log4j-over-slf4j.jar和slf4j-log4j12.jar不能同时出现</li><li>jul-to-slf4j.jar和slf4j-jdk14.jar不能同时出现</li><li>所有的桥接都只对Logger日志记录器对象有效，如果程序中调用了内部的配置类或者是 Appender,Filter等对象，将无法产生效果。</li></ol><h3 id="5、SLF4J原理解析"><a href="#5、SLF4J原理解析" class="headerlink" title="5、SLF4J原理解析"></a>5、SLF4J原理解析</h3><ol><li>SLF4J通过LoggerFactory加载日志具体的实现对象。</li><li>LoggerFactory在初始化的过程中，会通过performInitialization()方法绑定具体的日志实现。</li><li>在绑定具体实现的时候，通过类加载器，加载org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class</li><li>所以，只要是一个日志实现框架，在org.slf4j.impl包中提供一个自己的StaticLoggerBinder类，在其中提供具体日志实现的LoggerFactory就可以被SLF4J所加载</li></ol><p>在slf4j中创建logger的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Logger <span class="hljs-title function_">getLogger</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">ILoggerFactory</span> <span class="hljs-variable">iLoggerFactory</span> <span class="hljs-operator">=</span> getILoggerFactory();<br>    <span class="hljs-keyword">return</span> iLoggerFactory.getLogger(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>继续进入查看，核心就是performInitialization();：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ILoggerFactory <span class="hljs-title function_">getILoggerFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;<br>        <span class="hljs-keyword">synchronized</span> (LoggerFactory.class) &#123;<br>            <span class="hljs-keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;<br>                INITIALIZATION_STATE = ONGOING_INITIALIZATION;<br>                performInitialization();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续进入查看，核心就是bind()，这个方法应该就能绑定日志实现了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performInitialization</span><span class="hljs-params">()</span> &#123;<br>        bind();<br>        <span class="hljs-keyword">if</span> (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) &#123;<br>            versionSanityCheck();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来到这里，看看绑定的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ...<br>            <span class="hljs-comment">// 以下内容就绑定成功了</span><br>            StaticLoggerBinder.getSingleton();<br>            INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;<br>            reportActualBinding(staticLoggerBinderPathSet);<br>            fixSubstituteLoggers();<br>            replayEvents();<br>            <span class="hljs-comment">// release all resources in SUBST_FACTORY</span><br>            SUBST_FACTORY.clear();<br>        &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError ncde) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> ncde.getMessage();<br>            <span class="hljs-keyword">if</span> (messageContainsOrgSlf4jImplStaticLoggerBinder(msg)) &#123;<br>                INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION;<br>                Util.report(<span class="hljs-string">&quot;Failed to load class \&quot;org.slf4j.impl.StaticLoggerBinder\&quot;.&quot;</span>);<br>                Util.report(<span class="hljs-string">&quot;Defaulting to no-operation (NOP) logger implementation&quot;</span>);<br>                Util.report(<span class="hljs-string">&quot;See &quot;</span> + NO_STATICLOGGERBINDER_URL + <span class="hljs-string">&quot; for further details.&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                failedBinding(ncde);<br>                <span class="hljs-keyword">throw</span> ncde;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (java.lang.NoSuchMethodError nsme) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> nsme.getMessage();<br>            <span class="hljs-keyword">if</span> (msg != <span class="hljs-literal">null</span> &amp;&amp; msg.contains(<span class="hljs-string">&quot;org.slf4j.impl.StaticLoggerBinder.getSingleton()&quot;</span>)) &#123;<br>                INITIALIZATION_STATE = FAILED_INITIALIZATION;<br>                Util.report(<span class="hljs-string">&quot;slf4j-api 1.6.x (or later) is incompatible with this binding.&quot;</span>);<br>                Util.report(<span class="hljs-string">&quot;Your binding is version 1.5.5 or earlier.&quot;</span>);<br>                Util.report(<span class="hljs-string">&quot;Upgrade your binding to version 1.6.x.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> nsme;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            failedBinding(e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Unexpected initialization failure&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>每一个日志实现的中间包都有一个StaticLoggerBinder：</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220316112850137.png" alt="image-20220316112850137"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticLoggerBinder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LoggerFactoryBinder</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The unique instance of this class.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StaticLoggerBinder</span> <span class="hljs-variable">SINGLETON</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticLoggerBinder</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the singleton of this class.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the StaticLoggerBinder singleton</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> StaticLoggerBinder <span class="hljs-title function_">getSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SINGLETON;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Declare the version of the SLF4J API this implementation is compiled against. </span><br><span class="hljs-comment">     * The value of this field is modified with each major release. </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// to avoid constant folding by the compiler, this field must *not* be final</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">REQUESTED_API_VERSION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1.6.99&quot;</span>; <span class="hljs-comment">// !final</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">loggerFactoryClassStr</span> <span class="hljs-operator">=</span> Log4jLoggerFactory.class.getName();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The ILoggerFactory instance returned by the &#123;<span class="hljs-doctag">@link</span> #getLoggerFactory&#125;</span><br><span class="hljs-comment">     * method should always be the same object</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ILoggerFactory loggerFactory;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">StaticLoggerBinder</span><span class="hljs-params">()</span> &#123;<br>        loggerFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4jLoggerFactory</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><br>            <span class="hljs-type">Level</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> Level.TRACE<br>            Util.report(<span class="hljs-string">&quot;This version of SLF4J requires log4j version 1.2.12 or later. See also http://www.slf4j.org/codes.html#log4j_version&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ILoggerFactory <span class="hljs-title function_">getLoggerFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> loggerFactory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLoggerFactoryClassStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> loggerFactoryClassStr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、JCL-日志门面"><a href="#二、JCL-日志门面" class="headerlink" title="二、JCL 日志门面"></a>二、JCL 日志门面</h2><p> 全称为Jakarta Commons Logging，是Apache提供的一个通用日志API。 改日志门面的使用并不是很广泛。</p><p> 它是为 “所有的Java日志实现”提供一个统一的接口，它自身也提供一个日志的实现，但是功能非常常弱 （SimpleLog）。所以一般不会单独使用它。他允许开发人员使用不同的具体日志实现工具: Log4j, Jdk 自带的日志（JUL)</p><p>JCL 有两个基本的抽象类：Log(基本记录器)和LogFactory(负责创建Log实例)</p><h3 id="1、JCL入门"><a href="#1、JCL入门" class="headerlink" title="1、JCL入门"></a>1、JCL入门</h3><ol><li><p>建立maven工程</p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>入门代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JULTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuick</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建日志对象</span><br>        <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(JULTest.class);<br>        <span class="hljs-comment">// 日志记录输出</span><br>        log.fatal(<span class="hljs-string">&quot;fatal&quot;</span>);<br>        log.error(<span class="hljs-string">&quot;error&quot;</span>);<br>        log.warn(<span class="hljs-string">&quot;warn&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;info&quot;</span>);<br>        log.debug(<span class="hljs-string">&quot;debug&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>我们为什么要使用日志门面：</strong></p><ol><li>面向接口开发，不再依赖具体的实现类。减少代码的耦合</li><li>项目通过导入不同的日志实现类，可以灵活的切换日志框架</li><li>统一API，方便开发者学习和使用</li><li>统一配置便于项目日志的管理</li></ol><h3 id="2、JCL原理"><a href="#2、JCL原理" class="headerlink" title="2、JCL原理"></a>2、JCL原理</h3><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220316142932951.png" alt="image-20220316142932951"></p><ol><li><p>通过LogFactory动态加载Log实现类</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220316143016163.png" alt="image-20220316143016163"></p></li><li><p>日志门面支持的日志实现数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] classesToDiscover =<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;org.apache.commons.logging.impl.Log4JLogger&quot;</span>,<br>                 <span class="hljs-string">&quot;org.apache.commons.logging.impl.Jdk14Logger&quot;</span>,<br>                 <span class="hljs-string">&quot;org.apache.commons.logging.impl.Jdk13LumberjackLogger&quot;</span>,<br>                 <span class="hljs-string">&quot;org.apache.commons.logging.impl.SimpleLog&quot;</span>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>获取具体的日志实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classesToDiscover.length &amp;&amp; result == <span class="hljs-literal">null</span>; ++i) &#123;<br>    result = <span class="hljs-built_in">this</span>.createLogFromClass(classesToDiscover[i], logCategory,<br>                                     <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3、日志生态图："><a href="#3、日志生态图：" class="headerlink" title="3、日志生态图："></a>3、日志生态图：</h3><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220316143429825-16474124707221.png" alt="image-20220316143429825"></p><p>历史插曲：现在聊聊历史：<a href="https://segmentfault.com/a/1190000021121882?utm_source=tag-newest">https://segmentfault.com/a/1190000021121882?utm_source=tag-newest</a></p><h1 id="第五章-Logback的使用"><a href="#第五章-Logback的使用" class="headerlink" title="第五章 Logback的使用"></a>第五章 Logback的使用</h1><p>Logback是由log4j创始人设计的另一个开源日志组件，性能比log4j要好。</p><p>官方网站：<a href="https://logback.qos.ch/index.html">https://logback.qos.ch/index.html</a></p><p>Logback主要分为三个模块：</p><ul><li>logback-core：其它两个模块的基础模块</li><li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API</li><li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能 后续的日志代码都是通过SLF4J日志门面搭建日志系统，所以在代码是没有区别，主要是通过修改配置文件和pom.xml依赖</li></ul><h2 id="一、Logback-入门"><a href="#一、Logback-入门" class="headerlink" title="一、Logback 入门"></a>一、Logback 入门</h2><ol><li><p>添加依赖(它是log4j的一个改良版本，同时它完整实现了slf4j API)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><span class="hljs-keyword">import</span> ch.qos.logback.classic.Logger;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ws</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2022/3/16</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> (Logger) LoggerFactory.getLogger(LogTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogBack</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//打印日志信息</span><br>        LOGGER.error(<span class="hljs-string">&quot;error&quot;</span>);<br>        LOGGER.warn(<span class="hljs-string">&quot;warn&quot;</span>);<br>        LOGGER.info(<span class="hljs-string">&quot;info&quot;</span>);<br>        LOGGER.debug(<span class="hljs-string">&quot;debug&quot;</span>);<br>        LOGGER.trace(<span class="hljs-string">&quot;trace&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><p>其实我们发现即使项目中没有引入slf4j我们这里也是用的slf4j门面进行编程。</p><h2 id="二、源码解析"><a href="#二、源码解析" class="headerlink" title="二、源码解析"></a>二、源码解析</h2><h3 id="1、spi机制"><a href="#1、spi机制" class="headerlink" title="1、spi机制"></a>1、spi机制</h3><p>SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。他是一种服务发现机制。它通过在ClassPath路径下的META-INF&#x2F;services文件夹查找文件，自动加载文件里所定义的类。</p><p>主要是使用，java.util包下的ServiceLoader实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class="hljs-title function_">load</span><span class="hljs-params">(Class&lt;S&gt; service, ClassLoader loader)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceLoader</span>&lt;&gt;(service, loader);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、源码解析"><a href="#2、源码解析" class="headerlink" title="2、源码解析"></a>2、源码解析</h3><p>源码看一下启动过程：</p><p>1、我们从日志工厂的常见看起，这里是slf4j的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(TestLog4j.class);<br></code></pre></td></tr></table></figure><p>核心方法只有一句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Logger <span class="hljs-title function_">getLogger</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> getLogger(clazz.getName());<br>    ...中间的逻辑判断省略掉<br>    <span class="hljs-keyword">return</span> logger;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下getLogger方法，这里是先获取日志工厂，在从工厂中提取日志对象，我们不考虑日志对象，主要看看日志工厂的环境怎么初始化的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Logger <span class="hljs-title function_">getLogger</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">ILoggerFactory</span> <span class="hljs-variable">iLoggerFactory</span> <span class="hljs-operator">=</span> getILoggerFactory();<br>    <span class="hljs-keyword">return</span> iLoggerFactory.getLogger(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>日志工厂的创建方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ILoggerFactory <span class="hljs-title function_">getILoggerFactory</span><span class="hljs-params">()</span> &#123;<br>...去掉其他的代码，从这一行看。<br>    <span class="hljs-keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里就进入了，StaticLoggerBinder这个对象，这是日志实现用来和slf4j进行绑定的类，从此就进入日志实现中了。</p><p>StaticLoggerBinder.getSingleton()这里看到出来是一个单例，来到这个类当中，我们看到，直接返回了defaultLoggerContext</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">public ILoggerFactory getLoggerFactory() &#123;<br>        if (!initialized) &#123;<br>            return defaultLoggerContext;<br>        &#125;<br>... 省略其他<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p>这是个日志上下文，一定保存了我们的环境，配置内容一定在这个里边，那么哪里初始化他了呢，我们能想到的就是静态代码块了：</p><p>我们发现这个类中还真有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    SINGLETON.init();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看到init()方法中，有一个autoConfig()，感觉就像在自动配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextInitializer</span>(defaultLoggerContext).autoConfig();<br>        &#125; <span class="hljs-keyword">catch</span> (JoranException je) &#123;<br>            Util.report(<span class="hljs-string">&quot;Failed to auto configure default logger context&quot;</span>, je);<br>        &#125;<br>        ...其他省略<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认配置：ContextInitializer类是初始化的关键：</p><p>自动配置是这么玩的，先找配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoConfig</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JoranException &#123;<br>        StatusListenerConfigHelper.installIfAsked(loggerContext);<br>        <span class="hljs-comment">// 这就是去找配置文件</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> findURLOfDefaultConfigurationFile(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">if</span> (url != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 解析配置</span><br>            configureByResource(url);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 没有找到文件，就去使用spi机制找一个配置类，这个配置类是在web中用的</span><br>            <span class="hljs-type">Configurator</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> EnvUtil.loadFromServiceLoader(Configurator.class);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    c.setContext(loggerContext);<br>                    c.configure(loggerContext);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogbackException</span>(String.format(<span class="hljs-string">&quot;Failed to initialize Configurator: %s using ServiceLoader&quot;</span>, c != <span class="hljs-literal">null</span> ? c.getClass()<br>                                    .getCanonicalName() : <span class="hljs-string">&quot;null&quot;</span>), e);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果没有找到，就做基本的配置</span><br>                <span class="hljs-type">BasicConfigurator</span> <span class="hljs-variable">basicConfigurator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicConfigurator</span>();<br>                basicConfigurator.setContext(loggerContext);<br>                basicConfigurator.configure(loggerContext);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>寻找配置文件的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">GROOVY_AUTOCONFIG_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logback.groovy&quot;</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTOCONFIG_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logback.xml&quot;</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TEST_AUTOCONFIG_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logback-test.xml&quot;</span>;<br><br><span class="hljs-keyword">public</span> URL <span class="hljs-title function_">findURLOfDefaultConfigurationFile</span><span class="hljs-params">(<span class="hljs-type">boolean</span> updateStatus)</span> &#123;<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">myClassLoader</span> <span class="hljs-operator">=</span> Loader.getClassLoaderOfObject(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> findConfigFileURLFromSystemProperties(myClassLoader, updateStatus);<br>    <span class="hljs-keyword">if</span> (url != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    url = getResource(TEST_AUTOCONFIG_FILE, myClassLoader, updateStatus);<br>    <span class="hljs-keyword">if</span> (url != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    url = getResource(GROOVY_AUTOCONFIG_FILE, myClassLoader, updateStatus);<br>    <span class="hljs-keyword">if</span> (url != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> getResource(AUTOCONFIG_FILE, myClassLoader, updateStatus);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureByResource</span><span class="hljs-params">(URL url)</span> <span class="hljs-keyword">throws</span> JoranException &#123;<br>       <span class="hljs-keyword">if</span> (url == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;URL argument cannot be null&quot;</span>);<br>       &#125;<br>       <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">urlString</span> <span class="hljs-operator">=</span> url.toString();<br>       <span class="hljs-keyword">if</span> (urlString.endsWith(<span class="hljs-string">&quot;groovy&quot;</span>)) &#123;<br>           <span class="hljs-keyword">if</span> (EnvUtil.isGroovyAvailable()) &#123;<br>               <span class="hljs-comment">// avoid directly referring to GafferConfigurator so as to avoid</span><br>               <span class="hljs-comment">// loading groovy.lang.GroovyObject . See also http://jira.qos.ch/browse/LBCLASSIC-214</span><br>               GafferUtil.runGafferConfiguratorOn(loggerContext, <span class="hljs-built_in">this</span>, url);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-type">StatusManager</span> <span class="hljs-variable">sm</span> <span class="hljs-operator">=</span> loggerContext.getStatusManager();<br>               sm.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorStatus</span>(<span class="hljs-string">&quot;Groovy classes are not available on the class path. ABORTING INITIALIZATION.&quot;</span>, loggerContext));<br>           &#125;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (urlString.endsWith(<span class="hljs-string">&quot;xml&quot;</span>)) &#123;<br>           <span class="hljs-type">JoranConfigurator</span> <span class="hljs-variable">configurator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JoranConfigurator</span>();<br>           configurator.setContext(loggerContext);<br>           configurator.doConfigure(url);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogbackException</span>(<span class="hljs-string">&quot;Unexpected filename extension of file [&quot;</span> + url.toString() + <span class="hljs-string">&quot;]. Should be either .groovy or .xml&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>基础配置的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicConfigurator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContextAwareBase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Configurator</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BasicConfigurator</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(LoggerContext lc)</span> &#123;<br>        addInfo(<span class="hljs-string">&quot;Setting up default configuration.&quot;</span>);<br>        <br>        ConsoleAppender&lt;ILoggingEvent&gt; ca = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleAppender</span>&lt;ILoggingEvent&gt;();<br>        ca.setContext(lc);<br>        ca.setName(<span class="hljs-string">&quot;console&quot;</span>);<br>        LayoutWrappingEncoder&lt;ILoggingEvent&gt; encoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LayoutWrappingEncoder</span>&lt;ILoggingEvent&gt;();<br>        encoder.setContext(lc);<br>        <br> <br>        <span class="hljs-comment">// same as </span><br>        <span class="hljs-comment">// PatternLayout layout = new PatternLayout();</span><br>        <span class="hljs-comment">// layout.setPattern(&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;);</span><br>        <span class="hljs-type">TTLLLayout</span> <span class="hljs-variable">layout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TTLLLayout</span>();<br> <br>        layout.setContext(lc);<br>        layout.start();<br>        encoder.setLayout(layout);<br>        <br>        ca.setEncoder(encoder);<br>        ca.start();<br>        <br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">rootLogger</span> <span class="hljs-operator">=</span> lc.getLogger(Logger.ROOT_LOGGER_NAME);<br>        rootLogger.addAppender(ca);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先不说配置的事情，从源码中我们可以看出有几种配置，因为有了</p><p>我们先模仿BasicConfigurator写一个类，只做略微的改动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfigurator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContextAwareBase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Configurator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyConfigurator</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(LoggerContext lc)</span> &#123;<br>        addInfo(<span class="hljs-string">&quot;Setting up default configuration.&quot;</span>);<br><br>        ConsoleAppender&lt;ILoggingEvent&gt; ca = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleAppender</span>&lt;ILoggingEvent&gt;();<br>        ca.setContext(lc);<br>        ca.setName(<span class="hljs-string">&quot;console&quot;</span>);<br>        LayoutWrappingEncoder&lt;ILoggingEvent&gt; encoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LayoutWrappingEncoder</span>&lt;ILoggingEvent&gt;();<br>        encoder.setContext(lc);<br><br><br>        <span class="hljs-comment">// same as</span><br>        <span class="hljs-comment">// PatternLayout layout = new PatternLayout();</span><br>        <span class="hljs-comment">// layout.setPattern(&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;);</span><br>        <span class="hljs-type">PatternLayout</span> <span class="hljs-variable">layout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternLayout</span>();<br>        layout.setPattern(<span class="hljs-string">&quot;%d&#123;HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>);<br><br>        layout.setContext(lc);<br>        layout.start();<br>        encoder.setLayout(layout);<br><br>        ca.setEncoder(encoder);<br>        ca.start();<br><br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">rootLogger</span> <span class="hljs-operator">=</span> lc.getLogger(Logger.ROOT_LOGGER_NAME);<br>        rootLogger.addAppender(ca);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在resource中新建META-INF目录，下边在新建services文件夹，再新建一个名字我<code>ch.qos.logback.classic.spi.Configurator</code>的文件，</p><p>内容是：com.ydlclass.MyConfigurator</p><h2 id="三、三大组件"><a href="#三、三大组件" class="headerlink" title="三、三大组件"></a>三、三大组件</h2><p>1、appender，输出源，一个日志可以后好几个输出源</p><p>2、encoder，一个appender有一个encoder，负责将一个event事件转换成一组byte数组，并将转换后的字节数据输出到文件中。</p><p>Encoder负责把事件转换为字节数组，并把字节数组写到合适的输出流。因此，encoder可以控制在什么时候、把什么样的字节数组写入到其拥有者维护的输出流中。Encoder接口有两个实现类，LayoutWrappingEncoder与PatternLayoutEncoder。</p><p>注意：在logback 0.9.19 版之前没有 encoder。</p><p>在之前的版本里，多数 appender 依靠 layout 来把事件转换成字符串并用 java.io.Writer 把字符串输出。在之前的版本里，用户需要在 FileAppender里嵌入一个 PatternLayout。</p><p>3、layout，格式化数据将event事件转化为字符串，解析的过程</p><p>4、filter 过滤器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">LevelFilter levelFilter = new LevelFilter();<br>        levelFilter.setOnMatch(FilterReply.DENY);<br>        levelFilter.setLevel(Level.WARN);<br>        levelFilter.start();<br>        ca.addFilter(levelFilter);<br></code></pre></td></tr></table></figure><ol><li>%-5level</li><li>%d{yyyy-MM-dd HH:mm:ss.SSS}日期</li><li>%c类的完整名称</li><li>%M为method</li><li>%L为行号</li><li>%thread线程名称</li><li>%m或者%msg为信息</li><li>%n换行</li></ol><p>能看到logback的格式化信息</p><h2 id="四、logback配置"><a href="#四、logback配置" class="headerlink" title="四、logback配置"></a>四、logback配置</h2><p>Let us begin by discussing the initialization steps that logback follows to try to configure itself:</p><ol><li>Logback tries to find a file called <em>logback-test.xml</em> <a href="http://logback.qos.ch/faq.html#configFileLocation">in the classpathopen in new window</a>.</li><li>If no such file is found, logback tries to find a file called <em>logback.groovy</em> <a href="http://logback.qos.ch/faq.html#configFileLocation">in the classpathopen in new window</a>.</li><li>If no such file is found, it checks for the file <em>logback.xml</em> <a href="http://logback.qos.ch/faq.html#configFileLocation">in the classpathopen in new window</a>..</li><li>If no such file is found, <a href="http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html">service-provider loading facilityopen in new window</a> (introduced in JDK 1.6) is used to resolve the implementation of <a href="http://logback.qos.ch/xref/ch/qos/logback/classic/spi/Configurator.html"><code>com.qos.logback.classic.spi.Configurator</code>open in new window</a> interface by looking up the file <em>META-INF\services\ch.qos.logback.classic.spi.Configurator</em> in the class path. Its contents should specify the fully qualified class name of the desired <code>Configurator</code> implementation.</li><li>If none of the above succeeds, logback configures itself automatically using the <a href="http://logback.qos.ch/xref/ch/qos/logback/classic/BasicConfigurator.html"><code>BasicConfigurator</code>open in new window</a> which will cause logging output to be directed to the console.</li><li>基本配置信息</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度</span><br><span class="hljs-comment">    %msg：日志消息，%n是换行符--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %c [%thread]</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    %-5level %msg%n&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    Appender: 设置日志信息的去向,常用的有以下几个</span><br><span class="hljs-comment">        ch.qos.logback.core.ConsoleAppender (控制台)</span><br><span class="hljs-comment">        ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)</span><br><span class="hljs-comment">        ch.qos.logback.core.FileAppender (文件)</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>System.err<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span><br><span class="hljs-comment">                    &lt;loger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性</span><br><span class="hljs-comment">                    name:</span><br><span class="hljs-comment">        用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="hljs-comment">            level:</span><br><span class="hljs-comment">        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和</span><br><span class="hljs-comment">            OFF，</span><br><span class="hljs-comment">            如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="hljs-comment">            additivity:</span><br><span class="hljs-comment">        是否向上级loger传递打印信息。默认是true。</span><br><span class="hljs-comment">            &lt;logger&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个</span><br><span class="hljs-comment">            logger</span><br><span class="hljs-comment">            --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            也是&lt;logger&gt;元素，但是它是根logger。默认debug</span><br><span class="hljs-comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL</span><br><span class="hljs-comment">                和 OFF，</span><br><span class="hljs-comment">                &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个</span><br><span class="hljs-comment">                logger。</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;ALL&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>FileAppender配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自定义属性 可以通过$&#123;name&#125;进行引用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %c %M</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    %L [%thread] %m %n&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    日志输出格式：</span><br><span class="hljs-comment">    %d&#123;pattern&#125;日期</span><br><span class="hljs-comment">    %m或者%msg为信息</span><br><span class="hljs-comment">    %M为method</span><br><span class="hljs-comment">    %L为行号</span><br><span class="hljs-comment">    %c类的完整名称</span><br><span class="hljs-comment">    %thread线程名称</span><br><span class="hljs-comment">    %n换行</span><br><span class="hljs-comment">    %-5level</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志文件存放目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log_dir&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;d:/logs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--控制台输出appender对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>System.err<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志文件输出appender对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志输出路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log_dir&#125;/logback.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 生成html格式appender对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;htmlFile&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.html.HTMLLayout&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%level%d&#123;yyyy-MM-dd HH:mm:ss&#125;%c%M%L%thread%m<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志输出路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log_dir&#125;/logback.html<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--RootLogger对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;htmlFile&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>RollingFileAppender配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自定义属性 可以通过$&#123;name&#125;进行引用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %c %M</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    %L [%thread] %m %n&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    日志输出格式：</span><br><span class="hljs-comment">    %d&#123;pattern&#125;日期</span><br><span class="hljs-comment">    %m或者%msg为信息</span><br><span class="hljs-comment">    %M为method</span><br><span class="hljs-comment">    %L为行号</span><br><span class="hljs-comment">    %c类的完整名称</span><br><span class="hljs-comment">    %thread线程名称</span><br><span class="hljs-comment">    %n换行</span><br><span class="hljs-comment">    %-5level</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志文件存放目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log_dir&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;d:/logs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--控制台输出appender对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>System.err<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志文件拆分和归档的appender对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rollFile&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志输出路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log_dir&#125;/roll_logback.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;/rolling.%d&#123;yyyy-MMdd&#125;.log%i.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件拆分大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>1MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--RootLogger对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;rollFile&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Filter和异步日志配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自定义属性 可以通过$&#123;name&#125;进行引用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %c %M</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    %L [%thread] %m %n&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    日志输出格式：</span><br><span class="hljs-comment">    %d&#123;pattern&#125;日期</span><br><span class="hljs-comment">    %m或者%msg为信息</span><br><span class="hljs-comment">    %M为method</span><br><span class="hljs-comment">    %L为行号</span><br><span class="hljs-comment">    %c类的完整名称</span><br><span class="hljs-comment">    %thread线程名称</span><br><span class="hljs-comment">    %n换行</span><br><span class="hljs-comment">    %-5level</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志文件存放目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log_dir&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;d:/logs/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--控制台输出appender对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>System.err<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志文件拆分和归档的appender对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rollFile&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志格式配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志输出路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log_dir&#125;roll_logback.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log_dir&#125;rolling.%d&#123;yyyy-MMdd&#125;.log%i.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件拆分大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>1MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--filter配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--设置拦截日志级别--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--异步日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;async&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;rollFile&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--RootLogger对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;async&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自定义logger additivity表示是否从 rootLogger继承配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.ydlclass&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="五、logback-access的使用"><a href="#五、logback-access的使用" class="headerlink" title="五、logback-access的使用"></a>五、logback-access的使用</h2><p>在server.xml里的<code>&lt;host&gt;</code>标签下加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span>  <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;localhost_access_log.&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.txt&quot;</span>  <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;common&quot;</span> <span class="hljs-attr">resolveHosts</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>就可以了，下面咱们逐一分析各个参数。</p><table><thead><tr><th>className</th><th>想配置访问日志？这就必须得写成这样。</th></tr></thead><tbody><tr><td>directory</td><td>这个东西是日志文件放置的目录，在tomcat下面有个logs文件夹，那里面是专门放置日志文件的，当然你也可以修改，我就给改成了D:\</td></tr><tr><td>prefix</td><td>这个是日志文件的名称前缀，我的日志名称为localhost_access_log.2007-09-22.txt，前面的前缀就是这个localhost_access_log</td></tr><tr><td>suffix</td><td>这就是后缀名啦，可以改成别的</td></tr><tr><td>pattern</td><td>这个是最主要的参数了，具体的咱们下面讲，这个参数的内容比较丰富。</td></tr><tr><td>resolveHosts</td><td>如果这个值是true的话，tomcat会将这个服务器IP地址通过DNS转换为主机名，如果是false，就直接写服务器IP地址啦</td></tr></tbody></table><p>To use logback-access with Tomcat, after downloading the logback distribution, place the files <em>logback-core-1.3.0-alpha10.jar</em> and <em>logback-access-1.3.0-alpha10.jar</em> under $TOMCAT_HOME&#x2F;lib&#x2F; directory, where $TOMCAT_HOME is the folder where you have installed Tomcat.</p><p>logback-access模块与Servlet容器（如Tomcat和Jetty）集成，以提供HTTP访问日志功能。我们可以使 用logback-access模块来替换tomcat的访问日志。</p><ol><li>将logback-access.jar与logback-core.jar复制到$TOMCAT_HOME&#x2F;lib&#x2F;目录下</li><li>修改$TOMCAT_HOME&#x2F;conf&#x2F;server.xml中的Host元素中添加：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;Valve className=<span class="hljs-string">&quot;ch.qos.logback.access.tomcat.LogbackValve&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>logback默认会在$TOMCAT_HOME&#x2F;conf下查找文件 logback-access.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- always a good activate OnConsoleStatusListener --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">statusListener</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.status.OnConsoleStatusListener&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_DIR&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;catalina.base&#125;/logs&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_DIR&#125;/access.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>access.%d&#123;yyyy-MM-dd&#125;.log.zip<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 访问日志的格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>combined<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>官方配置： <a href="https://logback.qos.ch/access.html#configuration">https://logback.qos.ch/access.html#configuration</a></p></li></ol><h1 id="第六章-log4j2的使用"><a href="#第六章-log4j2的使用" class="headerlink" title="第六章 log4j2的使用"></a>第六章 log4j2的使用</h1><p>Apache Log4j2是对Log4j的升级版，参考了logback的一些优秀的设计，并且修复了一些问题，因此带来了一些重大的提升，主要有：</p><ul><li>异常处理，在logback中，Appender中的异常不会被应用感知到，但是在log4j2中，提供了一些异常处理机制。</li><li>性能提升， log4j2相较于log4j 和logback都具有很明显的性能提升，后面会有官方测试的数据。</li><li>自动重载配置，参考了logback的设计，当然会提供自动刷新参数配置，最实用的就是我们在生产 上可以动态的修改日志的级别而不需要重启应用。</li></ul><p>官网： <a href="https://logging.apache.org/log4j/2.x/">https://logging.apache.org/log4j/2.x/</a></p><h2 id="一、Log4j2入门"><a href="#一、Log4j2入门" class="headerlink" title="一、Log4j2入门"></a>一、Log4j2入门</h2><p>目前已经有三个门面了，其实不管是哪里都是江湖，都想写一个门面，一统江湖，所以log42出了提供日志实现以外，也拥有一套自己的独立的门面。</p><p> 目前市面上最主流的日志门面就是SLF4J，虽然Log4j2也是日志门面，因为它的日志实现功能非常强大，性能优越。所以大家一般还是将Log4j2看作是日志的实现，Slf4j + Log4j2应该是未来的大势所趋</p><h3 id="1、使用log4j-api做门面"><a href="#1、使用log4j-api做门面" class="headerlink" title="1、使用log4j-api做门面"></a>1、使用log4j-api做门面</h3><p>（1）添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Log4j2 门面API--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Log4j2 日志实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）JAVA代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLog4j2</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LogManager.getLogger(TestLog4j2.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLog</span><span class="hljs-params">()</span>&#123;<br>        LOGGER.fatal(<span class="hljs-string">&quot;fatal&quot;</span>);<br>        LOGGER.error(<span class="hljs-string">&quot;error&quot;</span>);<br>        LOGGER.warn(<span class="hljs-string">&quot;warn&quot;</span>);<br>        LOGGER.info(<span class="hljs-string">&quot;info&quot;</span>);<br>        LOGGER.debug(<span class="hljs-string">&quot;debug&quot;</span>);<br>        LOGGER.trace(<span class="hljs-string">&quot;trace&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、使用slf4j做门面"><a href="#2、使用slf4j做门面" class="headerlink" title="2、使用slf4j做门面"></a>2、使用slf4j做门面</h3><p>使用slf4j作为日志的门面，使用log4j2作为日志的实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Log4j2 门面API--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Log4j2 日志实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--使用slf4j作为日志的门面,使用log4j2来记录日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--为slf4j绑定日志实现 log4j2的适配器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> org.slf4j.<span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(TestLog4j2.class);<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSlf4j</span><span class="hljs-params">()</span>&#123;<br>    LOG.error(<span class="hljs-string">&quot;error&quot;</span>);<br>    LOG.warn(<span class="hljs-string">&quot;warn&quot;</span>);<br>    LOG.debug(<span class="hljs-string">&quot;debug&quot;</span>);<br>    LOG.info(<span class="hljs-string">&quot;info&quot;</span>);<br>    LOG.trace(<span class="hljs-string">&quot;trace&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、Log4j2配置"><a href="#二、Log4j2配置" class="headerlink" title="二、Log4j2配置"></a>二、Log4j2配置</h2><h3 id="1、默认配置："><a href="#1、默认配置：" class="headerlink" title="1、默认配置："></a>1、默认配置：</h3><p>DefaultConfiguration类中提供的默认配置将设置，</p><p>通过debug可以在LoggerContext类中发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConfiguration</span>();<br></code></pre></td></tr></table></figure><p>可以看到默认的root日志的layout</p><p><img src="/../../../local_blog/springboot/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/image-20220316225755166-16474426759331.png" alt="image-20220316225755166"></p><p>我们能从默认配置类中看到一些默认的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setToDefault</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// LOG4J2-1176 facilitate memory leak investigation</span><br>    setName(DefaultConfiguration.DEFAULT_NAME + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode()));<br>    <span class="hljs-keyword">final</span> Layout&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span>&gt; layout = PatternLayout.newBuilder()<br>        .withPattern(DefaultConfiguration.DEFAULT_PATTERN)<br>        .withConfiguration(<span class="hljs-built_in">this</span>)<br>        .build();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Appender</span> <span class="hljs-variable">appender</span> <span class="hljs-operator">=</span> ConsoleAppender.createDefaultAppenderForLayout(layout);<br>    appender.start();<br>    addAppender(appender);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">LoggerConfig</span> <span class="hljs-variable">rootLoggerConfig</span> <span class="hljs-operator">=</span> getRootLogger();<br>    rootLoggerConfig.addAppender(appender, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Level</span> <span class="hljs-variable">defaultLevel</span> <span class="hljs-operator">=</span> Level.ERROR;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">levelName</span> <span class="hljs-operator">=</span> PropertiesUtil.getProperties().getStringProperty(DefaultConfiguration.DEFAULT_LEVEL,<br>                                                                              defaultLevel.name());<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Level</span> <span class="hljs-variable">level</span> <span class="hljs-operator">=</span> Level.valueOf(levelName);<br>    rootLoggerConfig.setLevel(level != <span class="hljs-literal">null</span> ? level : defaultLevel);<br>&#125;<br></code></pre></td></tr></table></figure><p>5 自定义配置文件位置</p><p>log4j2默认在classpath下查找配置文件，可以修改配置文件的位置。在非web项目中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/log4j2.xml&quot;</span>);<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br><span class="hljs-keyword">final</span> <span class="hljs-type">ConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationSource</span>(in);<br>Configurator.initialize(<span class="hljs-literal">null</span>, source);<br><br><span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(<span class="hljs-string">&quot;mylog&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是web项目，在web.xml中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>log4jConfiguration<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>/WEB-INF/conf/log4j2.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.apache.logging.log4j.web.Log4jServletContextListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p>log4j2默认加载classpath下的 log4j2.xml 文件中的配置。事实上log4j2可以通过 XML、JSON、YAML 或properties格式进行配置：</p><p><a href="https://logging.apache.org/log4j/2.x/manual/configuration.html">https://logging.apache.org/log4j/2.x/manual/configuration.html</a></p><p>如果找不到配置文件，Log4j 将提供默认配置。DefaultConfiguration 类中提供的默认配置将设置：</p><ul><li>%d{HH:mm:ss.SSS} ，表示输出到毫秒的时间</li><li>%t，输出当前线程名称</li><li>%-5level，输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0</li><li>%logger，输出logger名称，因为Root Logger没有名称，所以没有输出</li><li>%msg，日志文本</li><li>%n，换行</li></ul><p>其他常用的占位符有：</p><ul><li>%F，输出所在的类文件名，如Client.java</li><li>%L，输出行号</li><li>%M，输出所在方法名</li><li>%l，输出语句所在的行数, 包括类名、方法名、文件名、行数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">monitorInterval</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span>&gt;</span>D:/logs<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] [%-5level] %c&#123;36&#125;:%L -</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    -- %m%n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/myfile.log&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    %c&#123;36&#125; - %m%n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RandomAccessFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accessFile&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/myAcclog.log&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    %c&#123;36&#125; - %m%n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RandomAccessFile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rollingFile&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/myrollog.log&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;D:/logs/$&#123;date:yyyy-MM-dd&#125;/myrollog-%d&#123;yyyyMM-dd-HH-mm&#125;-%i.log&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l</span></span><br><span class="hljs-string"><span class="hljs-tag">                                    %c&#123;36&#125; - %msg%n&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">OnStartupTriggeringPolicy</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;10 MB&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">RollingRandomAccessFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MyFile&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/$&#123;FILE_NAME&#125;.log&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/$&#123;date:yyyy-MM&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd HH-mm&#125;-%i.log&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span></span><br><span class="hljs-tag"><span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;10 MB&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RollingRandomAccessFile</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mylog&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;trace&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;MyFile&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Logger</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意根节点增加了一个monitorInterval属性，含义是每隔300秒重新读取配置文件，可以不重启应用的情况下修改配置，还是很好用的功能。</p><p>RollingRandomAccessFile的属性：</p><ul><li>fileName 指定当前日志文件的位置和文件名称</li><li>filePattern 指定当发生Rolling时，文件的转移和重命名规则</li><li>SizeBasedTriggeringPolicy 指定当文件体积大于size指定的值时，触发Rolling</li><li>DefaultRolloverStrategy 指定最多保存的文件个数</li><li>TimeBasedTriggeringPolicy 这个配置需要和filePattern结合使用，</li><li>注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟。</li><li>TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。</li></ul><h2 id="三、Log4j2异步日志"><a href="#三、Log4j2异步日志" class="headerlink" title="三、Log4j2异步日志"></a>三、Log4j2异步日志</h2><p><strong>异步日志</strong></p><p>log4j2最大的特点就是异步日志，其性能的提升主要也是从异步日志中受益，我们来看看如何使用 log4j2的异步日志。</p><p>Log4j2提供了两种实现日志的方式，一个是通过AsyncAppender，一个是通过AsyncLogger，分别对应 前面我们说的Appender组件和Logger组件。</p><p>注意：配置异步日志需要添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--异步日志依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lmax<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>disruptor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>AsyncAppender方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;warn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span>&gt;</span>D:/logs<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/myfile.log&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Async</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Async&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Async</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Async&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>AsyncLogger方式</p><p>AsyncLogger才是log4j2 的重头戏，也是官方推荐的异步方式。它可以使得调用Logger.log返回的 更快。你可以有两种选择：全局异步和混合异步。</p></li></ol><ul><li><p><strong>全局异步</strong>就是，所有的日志都异步的记录，在配置文件上不用做任何改动，只需要添加一个 log4j2.component.properties 配置；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Log4jContextSelector</span>=<span class="hljs-string">org.apache.logging.log4j.core.async.AsyncLoggerContextSelector</span><br></code></pre></td></tr></table></figure></li><li><p><strong>混合异步</strong>就是，你可以在应用中同时使用同步日志和异步日志，这使得日志的配置方式更加灵活。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;WARN&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span>&gt;</span>D:/logs<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;LOG_HOME&#125;/myfile.log&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Async</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Async&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Async</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">AsyncLogger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.ydlclass&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;trace&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">includeLocation</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">AsyncLogger</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">includeLocation</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>如上配置： com.ydlclass 日志是异步的，root日志是同步的。</p><p>使用异步日志需要注意的问题：</p><ol><li>如果使用异步日志，AsyncAppender、AsyncLogger和全局日志，不要同时出现。性能会和 AsyncAppender一致，降至最低。</li><li>设置includeLocation&#x3D;false ，打印位置信息会急剧降低异步日志的性能，比同步日志还要慢。</li></ol><h1 id="第七章：SpringBoot"><a href="#第七章：SpringBoot" class="headerlink" title="第七章：SpringBoot"></a>第七章：SpringBoot</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>准备 logback.xml</p><p>在 springboot 推荐使用  logback-spring.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br><span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>  <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;10 seconds&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--&lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot; /&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志存放目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;D:/dev/logs/boot-start/aop&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;clr&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wex&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wEx&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL</span><br><span class="hljs-comment">        %r:输出自应用启动到输出该日志讯息所耗费的毫秒数</span><br><span class="hljs-comment">        %t:输出产生该日志事件的线程名</span><br><span class="hljs-comment">        %f:输出日志讯息所属的类别的类别名</span><br><span class="hljs-comment">        %c:输出日志讯息所属的类的全名</span><br><span class="hljs-comment">        %d:输出日志时间点的日期或时间，指定格式的方式： %d&#123;yyyy-MM-dd HH:mm:ss&#125;</span><br><span class="hljs-comment">        %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。</span><br><span class="hljs-comment">        %m:输出代码中指定的讯息，如log(message)中的message</span><br><span class="hljs-comment">        %n:输出一个换行符号</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志格式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        Appender: 设置日志信息的去向,常用的有以下几个</span><br><span class="hljs-comment">            ch.qos.logback.core.ConsoleAppender (控制台)</span><br><span class="hljs-comment">            ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)</span><br><span class="hljs-comment">            ch.qos.logback.core.FileAppender (文件)</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_debug.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 格式化输出：%d表示日期,%thread表示线程名,%-5level表示级别从左显示5个字符宽度,%msg表示日志消息,%n表示换行符 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志归档 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/debug/log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 除按日志记录之外，还配置了日志文件不能超过100M，若超过100M，日志文件序号+1 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录debug级别的 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- LevelFilter： 级别过滤器，根据日志级别进行过滤 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            !-- 用于配置符合过滤条件的操作 ACCEPT：日志会被立即处理，不再经过剩余过滤器 --&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 用于配置不符合过滤条件的操作 DENY：日志将立即被抛弃不再经过其他过滤器 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span><br><span class="hljs-comment">        &lt;logger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。</span><br><span class="hljs-comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="hljs-comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="hljs-comment">              还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。</span><br><span class="hljs-comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="hljs-comment">        addtivity:是否向上级logger传递打印信息。默认是true。</span><br><span class="hljs-comment">        &lt;logger&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个logger</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;logger name=&quot;org.springframework.web&quot; level=&quot;info&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;logger name=&quot;org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor&quot; level=&quot;INFO&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="hljs-comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="hljs-comment">        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：</span><br><span class="hljs-comment">     --&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="hljs-comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="hljs-comment">        不能设置为INHERITED或者同义词NULL。默认是DEBUG</span><br><span class="hljs-comment">        可以包含零个或多个元素，标识这个appender将会添加到这个logger。</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开发环境:打印控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.log&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志输出级别 开发环境DEBUG 生产环境INFO --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--生产环境:输出到文件--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;springProfile name=&quot;pro&quot;&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;root level=&quot;info&quot;&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;DEBUG_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;INFO_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;WARN_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/root&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/springProfile&gt;--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写 @userAccess 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> UserAccess &#123;<br>    String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;无信息&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写 UserAccessAspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAccessAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(value = &quot;@annotation(com.wscode.boot.aop.aspect.UserAccess)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">access</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;access()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;second before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;@annotation(userAccess)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp, UserAccess userAccess)</span> &#123;<br>        <span class="hljs-comment">//获取注解里的值</span><br>        System.out.println();<br>        log.info(<span class="hljs-string">&quot;second around:&#123;&#125;&quot;</span> , userAccess.desc());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> pjp.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户发出请求，请求的方法上面有@UserAccess注解，会被这个Aspect拦截到，在内部可以根据传过来的值做一些处理……</p><p>编写一个 日志切面 [<strong>会记录请求的详细信息到日志系统中</strong>]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wscode.boot.aop.aspect;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日志切面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 温笙</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public * com.wscode.boot.aop.controller.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">weblog</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;weblog()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-comment">// 接收到请求，记录请求内容</span><br>        <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br><br>        <span class="hljs-keyword">assert</span> requestAttributes != <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestAttributes.getRequest();<br><br>        <span class="hljs-comment">// 记录请求内容</span><br>        log.info(<span class="hljs-string">&quot;URL : &#123;&#125;&quot;</span>,request.getRequestURL().toString());<br>        log.info(<span class="hljs-string">&quot;http_method : &#123;&#125;&quot;</span>,request.getMethod());<br>        log.info(<span class="hljs-string">&quot;IP : &#123;&#125;&quot;</span>,request.getRemoteAddr());<br>        log.info(<span class="hljs-string">&quot;class_method : &#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName()+<span class="hljs-string">&quot;.&quot;</span>+joinPoint.getSignature().getName());<br>        log.info(<span class="hljs-string">&quot;args : &#123;&#125;&quot;</span>, Arrays.toString(joinPoint.getArgs()));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;weblog()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterReturning</span><span class="hljs-params">(Object ret)</span>&#123;<br>        <span class="hljs-comment">// 处理完毕请求，返回内容</span><br>        log.info(<span class="hljs-string">&quot;方法的返回值:&#123;&#125;&quot;</span>,ret);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后置异常通知</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;weblog()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsContent</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;后置异常通知===&gt;方法异常:&#123;&#125;&quot;</span>,joinPoint.getSignature().getName());<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;weblog()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;后置最终通知,final增强，不管是抛出异常或者正常退出都会执行==&gt;切入点：&#123;&#125;&quot;</span>,joinPoint);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 环绕通知,环绕增强，相当于MethodInterceptor</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pjp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(&quot;webLog()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>        log.info(<span class="hljs-string">&quot;方法环绕start.....&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>  pjp.proceed();<br>            System.out.println(<span class="hljs-string">&quot;方法环绕proceed，结果是 :&quot;</span> + o);<br>            <span class="hljs-keyword">return</span> o;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试 请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAccessAspect</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(value = &quot;@annotation(com.wscode.boot.aop.aspect.UserAccess)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">access</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;access()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;second before&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;@annotation(userAccess)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp, UserAccess userAccess)</span> &#123;<br>        <span class="hljs-comment">//获取注解里的值</span><br>        System.out.println();<br>        log.info(<span class="hljs-string">&quot;second around:&#123;&#125;&quot;</span> , userAccess.desc());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> pjp.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章SpringBoot视图层配置(2)</title>
    <link href="/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-2/"/>
    <url>/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-2/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="第三章-Spring-Boot-整合-Freemarker"><a href="#第三章-Spring-Boot-整合-Freemarker" class="headerlink" title="第三章 Spring Boot 整合 Freemarker"></a>第三章 Spring Boot 整合 Freemarker</h1><h2 id="3-1-Freemarker-简介"><a href="#3-1-Freemarker-简介" class="headerlink" title="3.1 Freemarker 简介"></a>3.1 Freemarker 简介</h2><p>这是一个相当老牌的开源的免费的模版引擎。通过 Freemarker 模版，我们可以将数据渲染成 HTML 网页、电子邮件、配置文件以及源代码等。Freemarker 不是面向最终用户的，而是一个 Java 类库，我们可以将之作为一个普通的组件嵌入到我们的产品中。</p><img src="/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-2/10-1.png" class title="img"><p>可以看到，Freemarker 可以将模版和数据渲染成 HTML 。</p><p>Freemarker 模版后缀为 <code>.ftl</code>(FreeMarker Template Language)。FTL 是一种简单的、专用的语言，它不是像 Java 那样成熟的编程语言。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</p><p>好了，这是一个简单的介绍，接下来我们来看看 Freemarker 和 Spring Boot 的一个整合操作。</p><h2 id="3-2-整合-Spring-Boot"><a href="#3-2-整合-Spring-Boot" class="headerlink" title="3.2 整合 Spring Boot"></a>3.2 整合 Spring Boot</h2><p>在 SSM 中整合 Freemarker ，所有的配置文件加起来，前前后后大约在 50 行左右，Spring Boot 中要几行配置呢？ 0 行！</p><h3 id="3-2-1-创建工程"><a href="#3-2-1-创建工程" class="headerlink" title="3.2.1 创建工程"></a>3.2.1 创建工程</h3><p>首先创建一个 Spring Boot 工程，引入 Freemarker 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>工程创建完成后，在 <code>org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration</code> 类中，可以看到关于 Freemarker 的自动化配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; freemarker.template.Configuration.class, FreeMarkerConfigurationFactory.class &#125;)</span><br><span class="hljs-meta">@EnableConfigurationProperties(FreeMarkerProperties.class)</span><br><span class="hljs-meta">@Import(&#123; FreeMarkerServletWebConfiguration.class, FreeMarkerReactiveWebConfiguration.class,</span><br><span class="hljs-meta">                FreeMarkerNonWebConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreeMarkerAutoConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>从这里可以看出，当 <code>classpath</code> 下存在 <code>freemarker.template.Configuration</code> 以及 <code>FreeMarkerConfigurationFactory</code> 时，配置才会生效，也就是说当我们引入了 <code>Freemarker</code> 之后，配置就会生效。但是这里的自动化配置只做了模板位置检查，其他配置则是在导入的 <code>FreeMarkerServletWebConfiguration</code> 配置中完成的。那么我们再来看看 <code>FreeMarkerServletWebConfiguration</code> 类，部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, FreeMarkerConfigurer.class &#125;)</span><br><span class="hljs-meta">@AutoConfigureAfter(WebMvcAutoConfiguration.class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FreeMarkerServletWebConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFreeMarkerConfiguration</span> &#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">FreeMarkerServletWebConfiguration</span><span class="hljs-params">(FreeMarkerProperties properties)</span> &#123;<br>                <span class="hljs-built_in">super</span>(properties);<br>        &#125;<br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-meta">@ConditionalOnMissingBean(FreeMarkerConfig.class)</span><br>        <span class="hljs-keyword">public</span> FreeMarkerConfigurer <span class="hljs-title function_">freeMarkerConfigurer</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">FreeMarkerConfigurer</span> <span class="hljs-variable">configurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FreeMarkerConfigurer</span>();<br>                applyProperties(configurer);<br>                <span class="hljs-keyword">return</span> configurer;<br>        &#125;<br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;freeMarkerViewResolver&quot;)</span><br>        <span class="hljs-meta">@ConditionalOnProperty(name = &quot;spring.freemarker.enabled&quot;, matchIfMissing = true)</span><br>        <span class="hljs-keyword">public</span> FreeMarkerViewResolver <span class="hljs-title function_">freeMarkerViewResolver</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">FreeMarkerViewResolver</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FreeMarkerViewResolver</span>();<br>                getProperties().applyToMvcViewResolver(resolver);<br>                <span class="hljs-keyword">return</span> resolver;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来简单看下这段源码：</p><ol><li>@ConditionalOnWebApplication 表示当前配置在 web 环境下才会生效。</li><li>ConditionalOnClass 表示当前配置在存在 Servlet 和 FreeMarkerConfigurer 时才会生效。</li><li>@AutoConfigureAfter 表示当前自动化配置在 WebMvcAutoConfiguration 之后完成。</li><li>代码中，主要提供了 FreeMarkerConfigurer 和 FreeMarkerViewResolver。</li><li>FreeMarkerConfigurer 是 Freemarker 的一些基本配置，例如 templateLoaderPath、defaultEncoding 等</li><li>FreeMarkerViewResolver 则是视图解析器的基本配置，包含了viewClass、suffix、allowRequestOverride、allowSessionOverride 等属性。</li></ol><p>另外还有一点，在这个类的构造方法中，注入了 FreeMarkerProperties：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.freemarker&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreeMarkerProperties</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTemplateViewResolverProperties</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TEMPLATE_LOADER_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.ftl&quot;</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Well-known FreeMarker keys which are passed to FreeMarker&#x27;s Configuration.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> Map&lt;String, String&gt; settings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>FreeMarkerProperties 中则配置了 Freemarker 的基本信息，例如模板位置在 <code>classpath:/templates/</code> ，再例如模板后缀为 <code>.ftl</code>，那么这些配置我们以后都可以在 application.properties 中进行修改。</p><p>如果我们在 SSM 的 XML 文件中自己配置 Freemarker ，也不过就是配置这些东西。现在，这些配置由 FreeMarkerServletWebConfiguration 帮我们完成了。</p><h3 id="3-2-2-创建类"><a href="#3-2-2-创建类" class="headerlink" title="3.2.2 创建类"></a>3.2.2 创建类</h3><p>首先我们来创建一个 User 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>&#125;<br></code></pre></td></tr></table></figure><p>再来创建 <code>UserController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span>&#123;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(i,<span class="hljs-string">&quot;m&quot;</span>+i,<span class="hljs-string">&quot;2182908911@qq.com&quot;</span>));<br>        &#125;<br>        model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,userList);<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;2778666783@qq.com&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后在 freemarker 中渲染数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    &lt;#list users as user&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;user.id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;user.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;user.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &lt;/#list&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-3-其他配置"><a href="#3-2-3-其他配置" class="headerlink" title="3.2.3 其他配置"></a>3.2.3 其他配置</h3><p>如果我们要修改模版文件位置等，可以在 application.properties 中进行配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.freemarker.allow-request-override</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.allow-session-override</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.cache</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-attr">spring.freemarker.check-template-location</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.freemarker.content-type</span>=<span class="hljs-string">text/html</span><br><span class="hljs-attr">spring.freemarker.expose-request-attributes</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.expose-session-attributes</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.freemarker.suffix</span>=<span class="hljs-string">.ftl</span><br><span class="hljs-attr">spring.freemarker.template-loader-path</span>=<span class="hljs-string">classpath:/templates/</span><br></code></pre></td></tr></table></figure><p>配置文件按照顺序依次解释如下：</p><ol><li>HttpServletRequest的属性是否可以覆盖controller中model的同名项</li><li>HttpSession的属性是否可以覆盖controller中model的同名项</li><li>是否开启缓存</li><li>模板文件编码</li><li>是否检查模板位置</li><li>Content-Type的值</li><li>是否将HttpServletRequest中的属性添加到Model中</li><li>是否将HttpSession中的属性添加到Model中</li><li>模板文件后缀</li><li>模板文件位置</li></ol><h2 id="3-3-Freemarker-使用细节"><a href="#3-3-Freemarker-使用细节" class="headerlink" title="3.3 Freemarker 使用细节"></a>3.3 Freemarker 使用细节</h2><h3 id="3-3-1-插值与表达式"><a href="#3-3-1-插值与表达式" class="headerlink" title="3.3.1 插值与表达式"></a>3.3.1 插值与表达式</h3><h4 id="3-3-1-1直接输出值"><a href="#3-3-1-1直接输出值" class="headerlink" title="3.3.1.1直接输出值"></a>3.3.1.1直接输出值</h4><h5 id="A：字符串"><a href="#A：字符串" class="headerlink" title="A：字符串"></a>A：字符串</h5><p>可以直接输出一个字符串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;hello，我是直接输出的字符串&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;我的文件保存在C:\\盘&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>\ 需要进行转义。</p><p>如果感觉转义太麻烦，可以在目标字符串的引号前增加 r 标记,在 r 标记后的文本内容将会直接输出，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;r&quot;我的文件保存在C:\盘&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="B-数字"><a href="#B-数字" class="headerlink" title="B: 数字"></a>B: 数字</h5><p>在 FreeMarker 中使用数值需要注意以下几点:</p><ol><li>数值不能省略小数点前面的0，所以”.5″是错误的写法。</li><li>数值 8 , +8 , 8.00 都是相同的。</li></ol><p>数字还有一些其他的玩法：</p><ul><li>将数字以钱的形式展示：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#assign num=99&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;num?string.currency&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;#assign num=99&gt;</code> 表示定义了一个变量 num，值为 99。最终的展示形式是在数字前面出现了一个人民币符号：<strong>￥99.00</strong></p><ul><li>将数字以百分数的形式展示：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;num?string.percent&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>展示效果如下：<strong>9,900%</strong></p><h5 id="C-布尔"><a href="#C-布尔" class="headerlink" title="C:布尔"></a>C:布尔</h5><p>布尔类型可以直接定义，不需要引号，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#assign flag=true&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;flag?string(&quot;a&quot;,&quot;b&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先使用 <code>&lt;#assign flag=true&gt;</code> 定义了一个 Boolean 类型的变量，然后在 div 中展示，如果 flag 为 true，则输出 a，否则输出 b。</p><h5 id="D：集合"><a href="#D：集合" class="headerlink" title="D：集合"></a>D：集合</h5><p>集合也可以现场定义现场输出，例如如下方式定义一个 List 集合并显示出来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#list [&quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期天&quot;] as x&gt;<br>    $&#123;x&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;/#list&gt;<br></code></pre></td></tr></table></figure><p>x 代表集合中的每一个元素，最终显示效果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">星期一<br>星期二<br>...<br></code></pre></td></tr></table></figure><p>集合中的元素也可以是一个表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#list [2+2,&quot;ws&quot;] as x&gt;<br>    $&#123;x&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;/#list&gt;<br></code></pre></td></tr></table></figure><p>集合中的第一个元素就是 2+2 的结果，即 4。</p><p>也可以用 <code>1..5</code> 表示 1 到 5，<code>5..1</code> 表示 5 到 1，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#list 5..1 as x&gt;<br>    $&#123;x&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;/#list&gt;<br>&lt;#list 1..5 as x&gt;$&#123;x&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>&lt;/#list&gt;<br></code></pre></td></tr></table></figure><p>也可以定义 Map 集合，Map 集合用一个 <code>&#123;&#125;</code> 来描述：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#list &#123;&quot;name&quot;:&quot;javaboy&quot;,&quot;address&quot;:&quot;www.javaboy.org&quot;&#125;?keys as x&gt;<br>$&#123;x&#125;<br>&lt;/#list&gt;<br>&lt;#list &#123;&quot;name&quot;:&quot;javaboy&quot;,&quot;address&quot;:&quot;www.javaboy.org&quot;&#125;?values as x&gt;<br>    $&#123;x&#125;<br>&lt;/#list&gt;<br></code></pre></td></tr></table></figure><p>上面两个循环分别表示遍历 Map 中的 key 和 values。</p><h4 id="3-3-1-2-输出变量"><a href="#3-3-1-2-输出变量" class="headerlink" title="3.3.1.2 输出变量"></a>3.3.1.2 输出变量</h4><p>创建一个 UserController，然后添加如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span>&#123;<br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(i,<span class="hljs-string">&quot;m&quot;</span>+i,<span class="hljs-string">&quot;2182908911@qq.com&quot;</span>));<br>    &#125;<br>    model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,userList);<br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;2778666783@qq.com&quot;</span>));<br>    Map&lt;String, Object&gt; info = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    info.put(<span class="hljs-string">&quot;site&quot;</span>, <span class="hljs-string">&quot;http://www.wenx.site&quot;</span>);<br>    info.put(<span class="hljs-string">&quot;wechat&quot;</span>, <span class="hljs-string">&quot;ws&quot;</span>);<br>    info.put(<span class="hljs-string">&quot;github&quot;</span>, <span class="hljs-string">&quot;https://github.com/ws&quot;</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;info&quot;</span>, info);<br>    model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;温笙&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们在模版文件中对这里的普通变量、List 集合以及 Map 分别进行展示。</p><h5 id="A：普通变量"><a href="#A：普通变量" class="headerlink" title="A：普通变量"></a>A：普通变量</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="B：集合"><a href="#B：集合" class="headerlink" title="B：集合"></a>B：集合</h5><p><strong>直接遍历：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        &lt;#list users as u&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;u.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;u.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>输出集合中第三个元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    $&#123;users[3].name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>输出集合中第 4-6 个元素，即子集合：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        &lt;#list users[3..5] as u&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;u.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;u.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>遍历时，可以通过 <code>变量_index</code> 获取遍历的下标：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        &lt;#list users[3..5] as u&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;u.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;u.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;u_index&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="C-Map"><a href="#C-Map" class="headerlink" title="C:Map"></a>C:Map</h5><p>直接获取 Map 中的值有不同的写法，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;info.wechat&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;info[&#x27;site&#x27;]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>获取 Map 中的所有 key，并根据 key 获取 value：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#list info?keys as key&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;key&#125;--&#123;info[key]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    &lt;/#list&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>获取 Map 中的所有 value：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#list info?values as value&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    &lt;/#list&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-1-3-字符串操作"><a href="#3-3-1-3-字符串操作" class="headerlink" title="3.3.1.3 字符串操作"></a>3.3.1.3 字符串操作</h4><p>字符串的拼接有两种方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;hello$&#123;name&#125;&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;hello &quot;+ name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以从字符串中截取子串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;name[0]&#125;$&#123;name[1]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;name[0..2]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-1-4-集合操作"><a href="#3-3-1-4-集合操作" class="headerlink" title="3.3.1.4 集合操作"></a>3.3.1.4 集合操作</h4><p>集合或者 Map 都可以相加。</p><p>集合相加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#list [&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;] + [&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;,&quot;星期天&quot;] as x&gt;<br>        $&#123;x&#125;<br>    &lt;/#list&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Map 相加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#list (info+&#123;&quot;gitee&quot;:&quot;https://gitee.com/lenve&quot;&#125;)?keys as key&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;key&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    &lt;/#list&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-1-5-算数运算符"><a href="#3-3-1-5-算数运算符" class="headerlink" title="3.3.1.5 算数运算符"></a>3.3.1.5 算数运算符</h4><p><code>+</code>、<code>—</code>、<code>*</code>、<code>/</code>、<code>%</code> 运算都是支持的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#assign age=99&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;age*99/99+99-1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-1-6-比较运算"><a href="#3-3-1-6-比较运算" class="headerlink" title="3.3.1.6 比较运算"></a>3.3.1.6 比较运算</h4><p>比较运算和 Thymeleaf 比较类似:</p><ol><li>&#x3D; 或者 判断两个值是否相等。</li><li>!&#x3D; 判断两个值是否不等。</li><li><code>&gt;</code> 或者 gt 判断左边值是否大于右边值。</li><li><code>&gt;=</code> 或者 gte 判断左边值是否大于等于右边值。</li><li><code>&lt;</code> 或者 lt 判断左边值是否小于右边值。</li><li><code>&lt;=</code> 或者 lte 判断左边值是否小于等于右边值。</li></ol><p>可以看到，带 <code>&lt;</code> 或者 <code>&gt;</code> 的符号，也都有别名，建议使用别名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#assign age=99&gt;<br>    &lt;#if age=99&gt;age=99&lt;/#if&gt;<br>    &lt;#if age gt 99&gt;age gt 99&lt;/#if&gt;<br>    &lt;#if age gte 99&gt;age gte 99&lt;/#if&gt;<br>    &lt;#if age lt 99&gt;age lt 99&lt;/#if&gt;<br>    &lt;#if age lte 99&gt;age lte 99&lt;/#if&gt;<br>    &lt;#if age!=99&gt;age!=99&lt;/#if&gt;<br>    &lt;#if age==99&gt;age==99&lt;/#if&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-1-7-逻辑运算"><a href="#3-3-1-7-逻辑运算" class="headerlink" title="3.3.1.7 逻辑运算"></a>3.3.1.7 逻辑运算</h4><p>逻辑运算符有三个:</p><ul><li>逻辑与 <code>&amp;&amp;</code></li><li>逻辑或 <code>||</code></li><li>逻辑非 <code>!</code></li></ul><p>逻辑运算符只能作用于布尔值,否则将产生错误。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#assign age=99&gt;<br>    &lt;#if age=99 &amp;&amp; 1==1&gt;age=99 &amp;&amp; 1==1&lt;/#if&gt;<br>    &lt;#if age=99 || 1==0&gt;age=99 || 1==0&lt;/#if&gt;<br>    &lt;#if !(age gt 99)&gt;!(age gt 99)&lt;/#if&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-1-8-空值处理"><a href="#3-3-1-8-空值处理" class="headerlink" title="3.3.1.8 空值处理"></a>3.3.1.8 空值处理</h4><p>为了处理缺失变量,Freemarker 提供了两个运算符:</p><ol><li><code>!</code>：指定缺失变量的默认值</li><li><code>??</code>：判断某个变量是否存在</li></ol><p>如果某个变量不存在，则设置其为 ws，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;aaa!&quot;ws&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果某个变量不存在，则设置其为空字符串，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;aaa!&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即，<code>!</code> 后面的东西如果省略了，默认就是空字符串。</p><p>判断某个变量是否存在：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&lt;#if aaa??&gt;aaa&lt;/#if&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-2-内建函数"><a href="#3-3-2-内建函数" class="headerlink" title="3.3.2 内建函数"></a>3.3.2 内建函数</h3><h4 id="A：cap-first"><a href="#A：cap-first" class="headerlink" title="A：cap_first"></a>A：cap_first</h4><p>使字符串第一个字母大写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;hello&quot;?cap_first&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-lower-case"><a href="#B-lower-case" class="headerlink" title="B: lower_case"></a>B: lower_case</h4><p>将字符串转换成小写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;HELLO&quot;?lower_case&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="C-upper-case"><a href="#C-upper-case" class="headerlink" title="C: upper_case"></a>C: upper_case</h4><p>将字符串转换成大写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;&quot;hello&quot;?upper_case&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="D-trim"><a href="#D-trim" class="headerlink" title="D:trim"></a>D:trim</h4><p>去掉字符串前后空白字符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    $&#123;&quot; html&quot;?trim&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="E-size"><a href="#E-size" class="headerlink" title="E: size"></a>E: size</h4><p>获取序列中元素的个数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;users?size&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="F-int"><a href="#F-int" class="headerlink" title="F: int"></a>F: int</h4><p>取得数字的整数部分,结果带符号：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;3.14?int&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="G-日期格式化"><a href="#G-日期格式化" class="headerlink" title="G: 日期格式化"></a>G: 日期格式化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>$&#123;birthday?string(&quot;yyyy-MM-dd&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-4-常用指令"><a href="#3-4-常用指令" class="headerlink" title="3.4 常用指令"></a>3.4 常用指令</h2><h3 id="3-4-1-if-x2F-else"><a href="#3-4-1-if-x2F-else" class="headerlink" title="3.4.1 if&#x2F;else"></a>3.4.1 if&#x2F;else</h3><p>分支控制指令，作用类似于 Java 语言中的 if：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#assign age=23&gt;<br>    &lt;#if (age&gt;60)&gt;老年人<br>    &lt;#elseif (age&gt;40)&gt;中年人<br>    &lt;#elseif (age&gt;20)&gt;青年人<br>    &lt;#else&gt; 少年人<br>    &lt;/#if&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>比较符号中用了 <code>()</code>，因此不用转义。</p><h3 id="3-4-2-switch"><a href="#3-4-2-switch" class="headerlink" title="3.4.2 switch"></a>3.4.2 switch</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &lt;#assign age=99&gt;<br>    &lt;#switch age&gt;<br>        &lt;#case 23&gt;23&lt;#break&gt;<br>        &lt;#case 24&gt;24&lt;#break&gt;<br>        &lt;#default&gt;9999<br>    &lt;/#switch&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;#break&gt;</code> 是提前退出，也可以用在 <code>&lt;#list&gt;</code> 中。</p><h3 id="3-4-3-include"><a href="#3-4-3-include" class="headerlink" title="3.4.3 include"></a>3.4.3 include</h3><p>include 可以包含一个外部页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markup">&lt;#include &quot;./javaboy.ftlh&quot;&gt;<br></code></pre></td></tr></table></figure><h3 id="3-4-4-macro"><a href="#3-4-4-macro" class="headerlink" title="3.4.4 macro"></a>3.4.4 macro</h3><p>macro 用来定义一个宏</p><p>我们可以自定义一个名为 book 的宏，并引用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#macro book&gt;<br>    三国演义<br>&lt;/#macro&gt;<br>&lt;@book/&gt;<br></code></pre></td></tr></table></figure><p>最终页面中会输出宏中所定义的内容。</p><p>在定义宏的时候，也可以传入参数，那么引用时，也需要传入参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#macro book bs&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        &lt;#list bs as b&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;b&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>&lt;/#macro&gt;<br>&lt;@book [&quot;三国演义&quot;,&quot;水浒传&quot;]/&gt;<br></code></pre></td></tr></table></figure><p>bs 就是需要传入的参数。可以通过传入多个参数，多个参数跟在 bs 后面即可，中间用空格隔开。</p><p>还可以使用 <code>&lt;#nested&gt;</code> 引入用户自定义指令的标签体，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#macro book bs&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        &lt;#list bs as b&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;b&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    &lt;#nested&gt;<br>&lt;/#macro&gt;<br>&lt;@book [&quot;三国演义&quot;,&quot;水浒传&quot;]&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello javaboy!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&lt;/@book&gt;<br></code></pre></td></tr></table></figure><p>在宏定义的时候，<code>&lt;#nested&gt;</code> 相当于是一个占位符，在调用的时候，<code>&lt;@book&gt;</code> 标签中的内容会出现在 <code>&lt;#nested&gt;</code> 位置。</p><p>前面的案例中，宏都是定义在当前页面中，宏也可以定义在一个专门的页面中。新建 myjavaboy.ftlh 页面，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#macro book bs&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        &lt;#list bs as b&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;b&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &lt;/#list&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    &lt;#nested&gt;<br>&lt;/#macro&gt;<br></code></pre></td></tr></table></figure><p>此时，需要先通过 <code>&lt;#import&gt;</code> 标签导入宏，然后才能调用，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#import &quot;./myjavaboy.ftlh&quot; as com&gt;<br>&lt;@com.book bs=[&quot;三国演义&quot;,&quot;水浒传&quot;]&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello javaboy!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&lt;/@com.book&gt;<br></code></pre></td></tr></table></figure><h3 id="3-4-5-noparse"><a href="#3-4-5-noparse" class="headerlink" title="3.4.5 noparse"></a>3.4.5 noparse</h3><p>如果想在页面展示一些 Freemarker 语法而不被渲染，则可以使用 noparse 标签，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#noparse&gt;<br>&lt;#import &quot;./myjavaboy.ftlh&quot; as com&gt;<br>&lt;@com.book bs=[&quot;三国演义&quot;,&quot;水浒传&quot;]&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello javaboy!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&lt;/@com.book&gt;<br>&lt;/#noparse&gt;<br></code></pre></td></tr></table></figure><p>展示的就是标签字符串</p><h2 id="3-5-自动生成代码实践"><a href="#3-5-自动生成代码实践" class="headerlink" title="3.5 自动生成代码实践"></a>3.5 自动生成代码实践</h2><h2 id="3-6-Spring-Boot-整合-JSP"><a href="#3-6-Spring-Boot-整合-JSP" class="headerlink" title="3.6 Spring Boot 整合 JSP"></a>3.6 Spring Boot 整合 JSP</h2><p><strong>1.创建工程</strong></p><p><strong>2.添加 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.添加webapp目录 为web目录</strong></p><p><strong>4.webapp目录下新建 jsp 目录 用来存放jsp页面</strong></p><p><strong>5.配置文件配置jsp前缀后缀</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.mvc.view.prefix</span>=<span class="hljs-string">/jsp/</span><br><span class="hljs-attr">spring.mvc.view.suffix</span>=<span class="hljs-string">.jsp</span><br></code></pre></td></tr></table></figure><p><strong>6.配置运行环境工作目录</strong></p><p>%MODULE_WORKING_DIR%</p><p><strong>7.页面请求</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/01&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;01&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>8.运行项目：<a href="http://localhost:8080/01">http://localhost:8080/01</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章SpringBoot视图层配置(1)</title>
    <link href="/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-1/"/>
    <url>/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-1/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="3-Spring-Boot-的视图层配置"><a href="#3-Spring-Boot-的视图层配置" class="headerlink" title="3.Spring Boot 的视图层配置"></a>3.Spring Boot 的视图层配置</h1><h2 id="3-1-Thymeleaf-介绍"><a href="#3-1-Thymeleaf-介绍" class="headerlink" title="3.1 Thymeleaf 介绍"></a>3.1 Thymeleaf 介绍</h2><p>虽然现在流行前后端分离，但是后端模版在一些关键地方还是非常有用的，例如邮件模版、代码模版等。当然也不排除一些古老的项目后端依然使用动态模版。</p><p>Thymeleaf 简洁漂亮、容易理解，并且完美支持 HTML5，可以直接打开静态页面，同时不新增标签，只需增强属性，这样也降低了学习成本。</p><p>Thymeleaf 是新一代 Java 模板引擎，它类似于 Velocity、FreeMarker 等传统 Java 模板引擎，但是与传统 Java 模板引擎不同的是，Thymeleaf 支持 HTML 原型。</p><p>它既可以让前端工程师在浏览器中直接打开查看样式，也可以让后端工程师结合真实数据查看显示效果，同时，SpringBoot 提供了 Thymeleaf 自动化配置解决方案，因此在 SpringBoot 中使用 Thymeleaf 非常方便。</p><p>事实上， Thymeleaf 除了展示基本的 HTML ，进行页面渲染之外，也可以作为一个 HTML 片段进行渲染，例如我们在做邮件发送时，可以使用 Thymeleaf 作为邮件发送模板。</p><p>另外，由于 Thymeleaf 模板后缀为 <code>.html</code>，可以直接被浏览器打开，因此，预览时非常方便。</p><h2 id="3-2-整合-Spring-Boot"><a href="#3-2-整合-Spring-Boot" class="headerlink" title="3.2 整合 Spring Boot"></a>3.2 整合 Spring Boot</h2><h3 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a>3.2.1 基本用法</h3><p>Spring Boot 中整合 Thymeleaf 非常容易，只需要在项目创建时添加thymeleaf的依赖即可：</p><img src="/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-1/image-20220518142829626.png" class title="image-20220518142829626"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，Thymeleaf 不仅仅能在 Spring Boot 中使用，也可以使用在其他地方，只不过 Spring Boot 针对 Thymeleaf 提供了一整套的自动化配置方案，这一套配置类的属性在 <code>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties</code> 中，部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafProperties</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">DEFAULT_ENCODING</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">checkTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">checkTemplateLocation</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> DEFAULT_PREFIX;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> DEFAULT_SUFFIX;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HTML&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">encoding</span> <span class="hljs-operator">=</span> DEFAULT_ENCODING;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>首先通过 <code>@ConfigurationProperties</code> 注解，将 <code>application.properties</code> 前缀为 <code>spring.thymeleaf</code> 的配置和这个类中的属性绑定。</li><li>前三个 <code>static</code> 变量定义了默认的编码格式、视图解析器的前缀、后缀等。</li><li>从前三行配置中，可以看出来，<code>Thymeleaf</code> 模板的默认位置在 <code>resources/templates</code> 目录下，默认的后缀是 <code>html</code> 。</li><li>这些配置，如果开发者不自己提供，则使用 默认的，如果自己提供，则在 <code>application.properties</code> 中以 <code>spring.thymeleaf</code> 开始相关的配置。</li></ol><p>而我们刚刚提到的，Spring Boot 为 Thymeleaf 提供的自动化配置类，则是 <code>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration</code> ，部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafAutoConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，在这个自动化配置类中，首先导入 <code>ThymeleafProperties</code> ，然后 <code>@ConditionalOnClass</code> 注解表示当当前系统中存在 <code>TemplateMode</code> 和 <code>SpringTemplateEngine</code> 类时，当前的自动化配置类才会生效，即只要项目中引入了 <code>Thymeleaf</code> 相关的依赖，这个配置就会生效。</p><p>这些默认的配置我们几乎不需要做任何更改就可以直接使用了。如果开发者有特殊需求，则可以在 application.properties 中配置以 spring.thymeleaf 开头的属性即可。</p><p>接下来我们就可以创建 Controller 了，实际上引入 Thymeleaf 依赖之后，我们可以不做任何配置。新建的 IndexController 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(Model model)</span>&#123;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(i,<span class="hljs-string">&quot;m&quot;</span>+i,<span class="hljs-string">&quot;2182908911@qq.com&quot;</span>));<br>        &#125;<br>        model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,userList);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>UserController</code> 中返回逻辑视图名+数据，逻辑视图名为 <code>hello</code> ，意思我们需要在 <code>resources/templates</code> 目录下提供一个名为 <code>hello.html</code> 的 <code>Thymeleaf</code> 模板文件。</p><ul><li>创建 Thymeleaf</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u : $&#123;users&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.id&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.name&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.age&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>Thymeleaf</code> 中，通过 <code>th:each</code> 指令来遍历一个集合，数据的展示通过 <code>th:text</code> 指令来实现，</p><p>注意 <code>index.html</code> 最上面引入 <code>thymeleaf</code> 名称空间（最新版并无强制要求）。</p><p>配置完成后，就可以启动项目了，访问 &#x2F;hello接口，就能看到集合中的数据了：</p><h3 id="3-2-2-手动渲染"><a href="#3-2-2-手动渲染" class="headerlink" title="3.2.2 手动渲染"></a><img src="/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-1/image-20220518144826546.png" class title="image-20220518144826546">3.2.2 手动渲染</h3><p>前面我们说的是返回一个 Thymeleaf 模板，我们也可以手动渲染 Thymeleaf 模板，这个一般在邮件发送时候有用，例如我在 resources&#x2F;templates 目录下新建一个邮件模板，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello 欢迎 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#123;username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>加入 XXX 集团，您的入职信息如下：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>职位<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#123;position&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>薪水<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;salary&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.javaboy.org/images/sb/javaboy.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这一个 HTML 模板中，有几个变量，我们要将这个 HTML 模板渲染成一个 String 字符串，再把这个字符串通过邮件发送出去，那么如何手动渲染呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>TemplateEngine templateEngine;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException &#123;<br>    <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>    context.setVariable(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;javaboy&quot;</span>);<br>    context.setVariable(<span class="hljs-string">&quot;position&quot;</span>, <span class="hljs-string">&quot;Java工程师&quot;</span>);<br>    context.setVariable(<span class="hljs-string">&quot;salary&quot;</span>, <span class="hljs-number">99999</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">mail</span> <span class="hljs-operator">=</span> templateEngine.process(<span class="hljs-string">&quot;mail&quot;</span>, context);<br>    <span class="hljs-comment">//省略邮件发送</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>渲染时，我们需要首先注入一个 TemplateEngine 对象，这个对象就是在 Thymeleaf 的自动化配置类中配置的（即当我们引入 Thymeleaf 的依赖之后，这个实例就有了）。</li><li>然后构造一个 Context 对象用来存放变量。</li><li>调用 process 方法进行渲染，该方法的返回值就是渲染后的 HTML 字符串，然后我们将这个字符串发送出去。</li></ol><h3 id="3-2-3-Thymeleaf-细节"><a href="#3-2-3-Thymeleaf-细节" class="headerlink" title="3.2.3 Thymeleaf 细节"></a>3.2.3 Thymeleaf 细节</h3><h4 id="3-2-3-1-标准表达式语法"><a href="#3-2-3-1-标准表达式语法" class="headerlink" title="3.2.3.1 标准表达式语法"></a>3.2.3.1 标准表达式语法</h4><h5 id="A：简单表达式"><a href="#A：简单表达式" class="headerlink" title="A：简单表达式"></a>A：简单表达式</h5><p><strong><code>$&#123;...&#125;</code></strong></p><p>直接使用 <strong><code>th:xx = &quot;$&#123;xxx&#125;&quot;</code></strong> 获取对象属性。</p><p><strong><code>*&#123;...&#125;</code></strong></p><p>可以像**<code>$&#123;...&#125;</code><strong>一样使用，也可以通过</strong><code>th:object</code><strong>获取对象，然后使用</strong><code>th:xx=&quot;*&#123;&#125;&quot;</code>**获取对象属性，这种简写风格极为清爽，推荐大家在项目中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>地址<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>#&#123;...&#125;</code></strong></p><p>通常的国际化属性：<code>#&#123;...&#125;</code> 用于获取国际化语言翻译值。</p><p>在 resources 目录下新建两个文件：messages.properties 和 messages_zh_CN.properties，内容如下：</p><p>messages.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">zhangsan</span><br></code></pre></td></tr></table></figure><p>message_zh_CN.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">username</span>=<span class="hljs-string">张三</span><br></code></pre></td></tr></table></figure><p>然后在 Thymeleaf 中引用 username，系统会根据浏览器语言环境显示不同的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>@&#123;...&#125;</code></strong></p><ul><li><strong>引用绝对 URL：</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;http://localhost:8080/hello.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:8080/hello.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>上下文相关的 URL：</strong></li></ul><p>首先在 application.properties 中配置 Spring Boot 的上下文，以便于测试：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/myapp</span><br></code></pre></td></tr></table></figure><p>引用路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markup">&lt;script type=&quot;text/javascript&quot; th:src=&quot;@&#123;/hello.js&#125;&quot;&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/myapp/hello.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>相对 URL：</strong></li></ul><p>这个相对是指相对于服务器的 URL，例如如下引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;~/hello.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/hello.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>应用程序的上下文 <strong>&#x2F;myapp</strong> 将被忽略。</p><ul><li><strong>协议相对 URL：</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;//localhost:8080/hello.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//localhost:8080/hello.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>带参数的 URL：</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;//localhost:8080/hello.js(name=&#x27;javaboy&#x27;,age=99)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;//localhost:8080/hello.js?name=javaboy&amp;age=99&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="B-字面量"><a href="#B-字面量" class="headerlink" title="B: 字面量"></a>B: 字面量</h5><p>这些是一些可以直接写在表达式中的字符，主要有如下方式：</p><ul><li>文本字面量：’one div’…</li><li>数字字面量：0,1,3,4,5,6…</li><li>布尔字面量：true，false</li><li>Null字面量：null</li><li>字面量标记：one sometext，main</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;这是 文本字面量(有空格)&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;ws&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;99&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果文本是英文，并且不包含空格、逗号等字符，可以不用加单引号。</p><h5 id="C-文本运算"><a href="#C-文本运算" class="headerlink" title="C:文本运算"></a>C:文本运算</h5><p>文本可以使用 **<code>+</code>**进行拼接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;hello &#x27;+&#x27;ws&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;hello &#x27;+$&#123;user.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果字符串中包含变量，也可以使用另一种简单的方式，叫做字面量置换，用 <code>|</code> 代替 <code>&#39;...&#39; + &#39;...&#39;</code>，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;|hello $&#123;user.name&#125;|&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;hello &#x27;+$&#123;user.name&#125;+&#x27; &#x27;+|Go $&#123;user.age&#125;|&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="D-算术运算"><a href="#D-算术运算" class="headerlink" title="D: 算术运算"></a>D: 算术运算</h5><p>算术运算有：<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 和 <code>%</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;age=(99*99/99)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>th:with 定义了一个局部变量 age，在其所在的 div 中可以使用该局部变量。</p><h5 id="E：布尔运算"><a href="#E：布尔运算" class="headerlink" title="E：布尔运算"></a>E：布尔运算</h5><ul><li>二元运算符：and, or</li><li>布尔非（一元运算符）：!, not</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;age=(99*99/99)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;9 eq 9 or 8 ne 8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;!(9 eq 9 or 8 ne 8)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;not(9 eq 9 or 8 ne 8)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="F：比较和相等"><a href="#F：比较和相等" class="headerlink" title="F：比较和相等"></a>F：比较和相等</h5><p>表达式里的值可以使用 <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> 和 <code>&lt;=</code> 符号比较。<code>==</code> 和 <code>!=</code> 运算符用于检查相等（或者不相等）。注意 <code>XML</code>规定 <code>&lt;</code> 和 <code>&gt;</code> 标签不能用于属性值，所以应当把它们转义为 <code>&lt;</code> 和 <code>&gt;</code>。</p><p>如果不想转义，也可以使用别名：gt (&gt;)；lt (&lt;)；ge (&gt;&#x3D;)；le (&lt;&#x3D;)；not (!)。还有 eq (), neq&#x2F;ne (!&#x3D;)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;age=(99*99/99)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125; eq 197&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125; ne 197&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125; ge 197&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125; gt 197&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125; le 197&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;age&#125; lt 197&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="G-条件运算符"><a href="#G-条件运算符" class="headerlink" title="G:条件运算符"></a>G:条件运算符</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;age=(99*99/99)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;($&#123;age&#125; ne 197)?&#x27;yes&#x27;:&#x27;no&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="H-内置对象"><a href="#H-内置对象" class="headerlink" title="H: 内置对象"></a>H: 内置对象</h5><p><strong>基本内置对象</strong>：</p><ul><li>#ctx:上下文对象</li><li>#vars：上下文变量</li><li>#locale：上下文区域设置</li><li>#request：（仅在Web上下文中）HttpServletRequest 对象</li><li>#response：（仅在Web上下文中）HttpServletResponse 对象</li><li>#session：（仅在Web上下文中）HttpSssion 对象</li><li>#servletContext：（仅在Web上下文中）ServletContext 对象</li></ul><p>在页面可以访问到上面的内置对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&#x27;$&#123;#session.getAttribute(&quot;name&quot;)&#125;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>实用内置对象</strong>：</p><ul><li>#execinfo：有关正在处理的模板信息</li><li>#messages：在变量表达式中获取外部化消息的方法，与使用#{…}语法获得的方式相同</li><li>#uris：转义URL&#x2F;URI部分的方法</li><li>#conversions：执行配置的转换服务（如果有）的方法</li><li>#dates：java.util.Date 对象的方法：格式化，组件提取等</li><li>#calendars：类似于#dates 但是 java.util.Calendar 对象</li><li>#numbers：用于格式化数字对象的方法</li><li>#strings：String 对象的方法：contains，startWith，prepending&#x2F;appending等等</li><li>#objects：一般对象的方法</li><li>#bools：布尔评估的方法</li><li>arrays：数组方法</li><li>#lists：列表方法</li><li>#sets：集合方法</li><li>#maps：地图方法</li><li>#aggregates：在数组或者集合上创建聚合的方法</li><li>#ids：处理可能重复的id属性的方法（例如：作为迭代的结果）</li></ul><p>这些是内置对象以及工具方法，使用方式也都是比较容易</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#execInfo.getProcessedTemplateName()&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#arrays.length(#request.getAttribute(&#x27;names&#x27;))&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="H：片段"><a href="#H：片段" class="headerlink" title="H：片段"></a>H：片段</h5><p>片段表达式提供了模板公用的简便方法，同时还可以作为参数传递给其他模板</p><p>最常见的用途还是 <strong>th:insert</strong>或者 <strong>th:replace</strong>进行片段插入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;commons :: main&#125;&quot;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同时，他可以像其他变量意向，在任何地方使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;frag=~&#123;footer :: #main/text()&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;$&#123;frag&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3-2-设置属性值"><a href="#3-2-3-2-设置属性值" class="headerlink" title="3.2.3.2 设置属性值"></a>3.2.3.2 设置属性值</h4><p>这个是给HTML元素设置属性值，可以一次设置多个，多个之间用逗号分割</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;src=@&#123;/1.jpg&#125;,title=$&#123;user.name&#125;,alt=$&#123;user.username&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>会被渲染成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/1.png&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;ws&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;ws&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然这种设置方法不太美观，可读性也不好。Thymeleaf 还支持在每一个原生的 HTML 属性前加上 th: 前缀的方式来使用动态值，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/1.png&#125;&quot;</span> <span class="hljs-attr">th:alt</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span> <span class="hljs-attr">th:title</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种写法看起来更清晰一些，渲染效果和前面一致。</p><p>上面案例中的 alt 和 title 则是两个特殊的属性，可以一次性设置，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/1.png&#125;&quot;</span> <span class="hljs-attr">th:alt-title</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3-3-遍历"><a href="#3-2-3-3-遍历" class="headerlink" title="3.2.3.3 遍历"></a>3.2.3.3 遍历</h4><p>数组&#x2F;集合&#x2F;Map&#x2F;Enumeration&#x2F;Iterator 等的遍历也算是一个非常常见的需求，Thymeleaf 中通过 th:each 来实现遍历，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u : $&#123;users&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>users 是要遍历的集合&#x2F;数组，u 则是集合中的单个元素。</p><p>遍历的时候，我们可能需要获取遍历的状态，Thymeleaf 也对此提供了支持：</p><ul><li>index：当前的遍历索引，从0开始。</li><li>count：当前的遍历索引，从1开始。</li><li>size：被遍历变量里的元素数量。</li><li>current：每次遍历的遍历变量。</li><li>even&#x2F;odd：当前的遍历是偶数次还是奇数次。</li><li>first：当前是否为首次遍历。</li><li>last：当前是否为最后一次遍历。</li></ul><p>u 后面的 state 表示遍历状态，通过遍历状态可以引用上面的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u,state : $&#123;users&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.index&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.size&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.current&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.even&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.odd&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.first&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.last&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3-4-分支语句"><a href="#3-2-3-4-分支语句" class="headerlink" title="3.2.3.4 分支语句"></a>3.2.3.4 分支语句</h4><p>只显示奇数次数的遍历，可以使用 th:if ，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u,state : $&#123;users&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;state.odd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.index&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.size&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.current&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.even&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.odd&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.first&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.last&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>th:if 不仅仅只接受布尔值，也接受其他类型的值，例如如下值都会判定为 true：</p><ul><li>如果值是布尔值，并且为 true。</li><li>如果值是数字，并且不为 0。</li><li>如果值是字符，并且不为 0。</li><li>如果值是字符串，并且不为 “false”， “off” 或者 “no”。</li><li>如果值不是布尔值，数字，字符或者字符串。</li></ul><p>但是如果值为 null，th:if 会求值为 false。</p><p>th:unless 的判定条件则与 th:if 完全相反。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u,state : $&#123;users&#125;&quot;</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;state.odd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.index&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.size&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.current&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.even&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.odd&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.first&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.last&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个显示效果则与上面的完全相反。</p><p>当可能性比较多的时候，也可以使用 switch：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u,state : $&#123;users&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.index&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.size&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.current&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.even&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.odd&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.first&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;state.last&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$&#123;state.odd&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>odd<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>even<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3-5-本地变量"><a href="#3-2-3-5-本地变量" class="headerlink" title="3.2.3.5 本地变量"></a>3.2.3.5 本地变量</h4><p>这个我们前面已经涉及到了，通过 th:with 可以定义一个本地变量</p><h4 id="3-2-3-6-内联"><a href="#3-2-3-6-内联" class="headerlink" title="3.2.3.6 内联"></a>3.2.3.6 内联</h4><p>我们可以使用属性将数据放入页面模板中，但是很多时候，内联的方式看起来更加直观一些，比如下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello [[$&#123;user.username&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用内联的方式去做拼接也显得更加自然。</p><p><code>[[...]]</code> 对应于 th:text （结果会是转义的 HTML），<code>[(...)]</code>对应于 th:utext，它不会执行任何的 HTML 转义。</p><p>像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;str=&#x27;hello &lt;strong&gt;javaboy&lt;/strong&gt;&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>[[&#123;str&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>[(&#123;str&#125;)]<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终效果如下：</p><img src="/2022/05/20/%E7%AC%AC%E4%B8%89%E7%AB%A0SpringBoot%E8%A7%86%E5%9B%BE%E5%B1%82%E9%85%8D%E7%BD%AE-1/20201215210604.png" class title="img"><p>不过内联方式有一个问题。我们使用 Thymeleaf 的一大优势在于不用动态渲染就可以直接在浏览器中看到显示效果，当我们使用属性配置的时候确实是这样，但是如果我们使用内联的方式，各种表达式就会直接展示在静态网页中。</p><p>也可以在 js 或者 css 中使用内联，以 js 为例，使用方式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> username=[[$&#123;user.<span class="hljs-property">username</span>&#125;]]</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(username)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js 中需要通过 <code>th:inline=&quot;javascript&quot;</code> 开启内联。</p><h3 id="3-2-3-模板布局"><a href="#3-2-3-模板布局" class="headerlink" title="3.2.3 模板布局"></a>3.2.3 模板布局</h3><h4 id="3-2-3-1-包括模板片段"><a href="#3-2-3-1-包括模板片段" class="headerlink" title="3.2.3.1 包括模板片段"></a>3.2.3.1 包括模板片段</h4><h5 id="A：定义和引用片段"><a href="#A：定义和引用片段" class="headerlink" title="A：定义和引用片段"></a>A：定义和引用片段</h5><p>在我们的模板中，我经常会希望包含其他模板中的部分，比如页脚，页眉，菜单等部分</p><p>可以使用 <strong>th:fragment</strong>来实现</p><p>假设我们要在所有页面中添加一个搬迁页脚，因此我们可以创建以下代码 <strong>&#x2F;templates&#x2F;footer.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span><br>      <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的代码定义了一个 <strong>copy</strong>的片段，我们可以使用 <strong>th:insert</strong> 或者 <strong>th:replace</strong>属性之一以及 <strong>th:include</strong>轻松包含在主页面中，尽管 Thymeleaf 3.0 不建议使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请注意，<strong>th:insert</strong>期望一个 * fragment表达式*(<del>{…}),他是一个导入片段的表达式。但是，在上面的示例中，他是一个非复杂的 * fragment 表达式*(</del>{,})包围是完全可选的，因此上述代码等价于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="B：片段规范语法"><a href="#B：片段规范语法" class="headerlink" title="B：片段规范语法"></a>B：片段规范语法</h5><p>片段表达式的语法非常简单。有三种不同的格式：</p><ul><li><p><code>&quot;~&#123;templatename::selector&#125;&quot;</code>包括将指定的标记 selectors 应用于名为<code>templatename</code>的模板所产生的片段。请注意，<code>selector</code>只能是片段名称，因此您可以指定与<code>~&#123;templatename::fragmentname&#125;</code>一样简单的名称，例如上面的<code>~&#123;footer :: copy&#125;</code>。</p></li><li><p><code>&quot;~&#123;templatename&#125;&quot;</code>包括名为<code>templatename</code>的完整模板。</p></li><li><p><code>~&#123;::selector&#125;&quot;</code>或<code>&quot;~&#123;this::selector&#125;&quot;</code>从同一模板插入与<code>selector</code>匹配的片段。如果在出现表达式的模板上未找到，则将模板调用(插入)堆栈遍历到原始处理的模板(* root *)，直到<code>selector</code>在某个级别上匹配。</p></li></ul><p>上面示例中的<code>templatename</code>和<code>selector</code>都可以是功能齐全的表达式(甚至是条件表达式！)，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;footer :: ($&#123;user.isAdmin&#125;? #&#123;footer.admin&#125; : #&#123;footer.normaluser&#125;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次注意周围的<code>~&#123;...&#125;</code>信封在<code>th:insert</code>&#x2F;<code>th:replace</code>中是可选的。</p><p>片段可以包含任何<code>th:*</code>属性。一旦将片段包含到目标模板(具有<code>th:insert</code>&#x2F;<code>th:replace</code>属性的片段)中，将评估这些属性，并且它们将能够引用此目标模板中定义的任何上下文变量。</p><h5 id="C-引用没有-th：fragment-的片段"><a href="#C-引用没有-th：fragment-的片段" class="headerlink" title="C: 引用没有 th：fragment 的片段"></a>C: 引用没有 th：fragment 的片段</h5><p>借助标记 selectors 的功能，我们可以包含不使用任何<code>th:fragment</code>属性的片段。甚至可能是完全不了解 Thymeleaf 的来自不同应用程序的标记代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy-section&quot;</span>&gt;</span><br>  <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以使用上面的片段，只需通过其<code>id</code>属性引用它即可，类似于 CSSselectors：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;footer :: #copy-section&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="D-th：insert-和-th：replace-和-th：include-之间的区别"><a href="#D-th：insert-和-th：replace-和-th：include-之间的区别" class="headerlink" title="D: th：insert 和 th：replace(和 th：include)之间的区别"></a>D: th：insert 和 th：replace(和 th：include)之间的区别</h5><p><code>th:insert</code>和<code>th:replace</code>(和<code>th:include</code>，从 3.0 开始不推荐使用)有什么区别？</p><ul><li><code>th:insert</code>最简单：它将简单地将指定的片段作为其 host 标签的主体插入。</li><li><code>th:replace</code>实际上将其主机标签替换为指定的片段。</li><li><code>th:include</code>与<code>th:insert</code>类似，但是不插入片段，而是仅插入该片段的* content *。</li></ul><p>因此，HTML 片段如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span><br>  <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>… 在主机<code>&lt;div&gt;</code>标签中包含了 3 次，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  ...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>…将导致：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  ...<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>      <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Thymeleaf 的官方文档：<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a></p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二章SpringBoot的基本配置</title>
    <link href="/2022/05/20/%E7%AC%AC%E4%BA%8C%E7%AB%A0SpringBoot%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/20/%E7%AC%AC%E4%BA%8C%E7%AB%A0SpringBoot%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="第二章-Spring-Boot-的基本配置"><a href="#第二章-Spring-Boot-的基本配置" class="headerlink" title="第二章 Spring Boot 的基本配置"></a>第二章 Spring Boot 的基本配置</h1><h2 id="2-1-Spring-Boot-的-banner"><a href="#2-1-Spring-Boot-的-banner" class="headerlink" title="2.1 Spring Boot 的 banner"></a>2.1 Spring Boot 的 banner</h2><p>首先创建一个新的 springboot 工程</p><p>启动项目，你会发现在控制台会有一个 spring boot 官方的 Banner 图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">  .   ____          _            __ _ _<br> /\\ / ___<span class="hljs-string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="hljs-string">( ( )\___ | &#x27;</span>_ | <span class="hljs-string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \<br> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )<br>  <span class="hljs-string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="hljs-string"> =========|_|==============|___/=/_/_/_/</span><br><span class="hljs-string"> :: Spring Boot ::        (v2.3.7.RELEASE)</span><br></code></pre></td></tr></table></figure><p>SpringBoot 有一个接口<code>org.springframework.boot.Banner</code> 是专门来做这个操作的。</p><p>我们可以实现这个接口来自定义打印 Banner 信息</p><ul><li><p><strong>org.springframework.boot.ResourceBanner</strong></p><blockquote><p>文本格式，Spring Boot 会读取配置项 banner.txt 和 banner.location ，从配置项中获取真实的文件地址；如果配置项中没有配置，会把配置项作为文件去加载</p></blockquote></li><li><p><strong>org.springframework.boot.ImageBanner</strong></p><blockquote><p>图片格式，Spring Boot 会加载配置项 banner.image.location,从配置项获取真实的路径，Spring Boot 会根据配置项的路径加载文件。</p><p>如果没有配置  banner.image.localtion ，转而以此加载 banner.gif、banner.jpg、banner.png 这三个中存在的文件</p></blockquote></li></ul><p><strong>SpringApplicationBannerPrinter：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringApplicationBannerPrinter</span> &#123;<br>    <span class="hljs-comment">//1. banner 资源的位置</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BANNER_LOCATION_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.banner.location&quot;</span>;<br>    <span class="hljs-comment">//2. banner 图片的位置</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BANNER_IMAGE_LOCATION_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.banner.image.location&quot;</span>;<br>    <span class="hljs-comment">//3. 默认 banner 地址</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_BANNER_LOCATION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;banner.txt&quot;</span>;<br>    <span class="hljs-comment">//4. 默认 banner 图片的后缀</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] IMAGE_EXTENSION = &#123; <span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span> &#125;;<br>    ......省略<br>Banner <span class="hljs-title function_">print</span><span class="hljs-params">(Environment environment, Class&lt;?&gt; sourceClass, PrintStream out)</span> &#123;<br><span class="hljs-type">Banner</span> <span class="hljs-variable">banner</span> <span class="hljs-operator">=</span> getBanner(environment);<br>banner.printBanner(environment, sourceClass, out);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintedBanner</span>(banner, sourceClass);<br>&#125;<br><br><span class="hljs-keyword">private</span> Banner <span class="hljs-title function_">getBanner</span><span class="hljs-params">(Environment environment)</span> &#123;<br>        <span class="hljs-comment">//5. 创建一个 banner 集合</span><br><span class="hljs-type">Banners</span> <span class="hljs-variable">banners</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Banners</span>();<br>        <span class="hljs-comment">//6. banner 存在-&gt;添加</span><br>banners.addIfNotNull(getImageBanner(environment));<br>banners.addIfNotNull(getTextBanner(environment));<br>        <span class="hljs-comment">//7. banners 不是空的返回 banner集合</span><br><span class="hljs-keyword">if</span> (banners.hasAtLeastOneBanner()) &#123;<br><span class="hljs-keyword">return</span> banners;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.fallbackBanner != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.fallbackBanner;<br>&#125;<br>        <br>        <span class="hljs-comment">//8.banner 为空返回 springboot 默认的 banner 字符串</span><br><span class="hljs-keyword">return</span> DEFAULT_BANNER;<br>&#125;<br><br>    <span class="hljs-comment">//获取 banner 文本</span><br><span class="hljs-keyword">private</span> Banner <span class="hljs-title function_">getTextBanner</span><span class="hljs-params">(Environment environment)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> environment.getProperty(BANNER_LOCATION_PROPERTY, DEFAULT_BANNER_LOCATION);<br><span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceLoader.getResource(location);<br><span class="hljs-keyword">if</span> (resource.exists()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceBanner</span>(resource);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br>    <span class="hljs-comment">//获取 banner 图片</span><br><span class="hljs-keyword">private</span> Banner <span class="hljs-title function_">getImageBanner</span><span class="hljs-params">(Environment environment)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> environment.getProperty(BANNER_IMAGE_LOCATION_PROPERTY);<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(location)) &#123;<br><span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceLoader.getResource(location);<br><span class="hljs-keyword">return</span> resource.exists() ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageBanner</span>(resource) : <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (String ext : IMAGE_EXTENSION) &#123;<br><span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceLoader.getResource(<span class="hljs-string">&quot;banner.&quot;</span> + ext);<br><span class="hljs-keyword">if</span> (resource.exists()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageBanner</span>(resource);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">createStringFromBanner</span><span class="hljs-params">(Banner banner, Environment environment, Class&lt;?&gt; mainApplicationClass)</span><br><span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>banner.printBanner(environment, mainApplicationClass, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(baos));<br><span class="hljs-type">String</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> environment.getProperty(<span class="hljs-string">&quot;spring.banner.charset&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-keyword">return</span> baos.toString(charset);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果在resources目录下有 banner.txt 和 banner.png 两种 banner ，springboot 会加载 banner集合中的 两个 banner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">banners.addIfNotNull(getImageBanner(environment));<br>banners.addIfNotNull(getTextBanner(environment));<br></code></pre></td></tr></table></figure><p>如果上面两种都没有进行配置，Spring Boot 就会加载默认的 Banner，也就是 Spring Boot 官方默认的 Banner 图</p><p><strong>配置banner</strong></p><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 启动颜色格式化</span><br>       <span class="hljs-comment">// 这不是唯一启动颜色格式的方式，有兴趣的同学可以查看源码</span><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1. AnsiOutput.setEnabled(AnsiOutput.Enabled.ALWAYS);</span><br><span class="hljs-comment">         * 2. 在`src/main/resources`目录下新建文件`application.properties`,</span><br><span class="hljs-comment">         *    内容为：`spring.output.ansi.enabled=always`</span><br><span class="hljs-comment">         * </span><br><span class="hljs-comment">         * 重要：如果配置第二种方式，第一种方式就不会起作用</span><br><span class="hljs-comment">         */</span><br>        AnsiOutput.setEnabled(AnsiOutput.Enabled.ALWAYS);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>(Application.class)<span class="hljs-comment">//</span><br>                .main(SpringVersion.class) <span class="hljs-comment">// 这个是为了可以加载 Spring 版本</span><br>                .bannerMode(Banner.Mode.CONSOLE)<span class="hljs-comment">// 控制台打印</span><br>                .run(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建Banner文件</strong><br><code>src/main/resource/banner.txt</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">$&#123;AnsiColor.BRIGHT_YELLOW&#125;<br>\ \  \   / __| <br> \ \  \ /\__ \ <br>  \_/\_/ ____/ <br>$&#123;AnsiColor.BRIGHT_RED&#125;<br>Application Version: $&#123;application.version&#125;$&#123;application.formatted-version&#125;<br>Spring Boot Version: $&#123;spring-boot.version&#125;$&#123;spring-boot.formatted-version&#125;<br></code></pre></td></tr></table></figure><p>从上面的内容中可以看到，还使用了一些属性设置：</p><ul><li>${AnsiColor.BRIGHT_RED}：设置控制台中输出内容的颜色，可以自定义，具体参考<code>org.springframework.boot.ansi.AnsiColor</code></li><li>${application.version}：用来获取MANIFEST.MF文件中的版本号，这就是为什么要在Application.java中指定 SpringVersion.class</li><li>{application.formatted-version}：格式化后的{application.version}版本信息</li><li>${spring-boot.version}：Spring Boot的版本号</li><li>{spring-boot.formatted-version}：格式化后的{spring-boot.version}版本信息</li></ul><p>效果如下：</p><p>![image-20220516165240098](..&#x2F;..&#x2F;..&#x2F;local_blog&#x2F;springboot&#x2F;第二章 Spring Boot 的基本配置&#x2F;image-20220516165240098.png)</p><p>banner 文件名称默认为  banner.txt 如果想要修改需要在 application.properties 中声明：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.banner.image.location</span>=<span class="hljs-string">classpath:banner.txt</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Tomcat-web容器"><a href="#2-2-Tomcat-web容器" class="headerlink" title="2.2 Tomcat web容器"></a>2.2 Tomcat web容器</h2><h3 id="2-2-1基本配置"><a href="#2-2-1基本配置" class="headerlink" title="2.2.1基本配置"></a>2.2.1基本配置</h3><p><strong>切换web容器</strong></p><p>在 springboot 中引入了 spring-boot-starter-web 依赖，会引入 tomcat 容器</p><p>![image-20220516172815940](..&#x2F;..&#x2F;..&#x2F;local_blog&#x2F;springboot&#x2F;第二章 Spring Boot 的基本配置&#x2F;image-20220516172815940.png)</p><p>当我们想要切换web容器的时候，需要先剔除tomcat容器，再添加其他容器比如 <strong>jetty</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行启动类，我们会发现 web 容器已经切换成了 <strong>jetty</strong></p><p><strong>关闭容器：</strong></p><p>在 application.properties 进行配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.main.web-application-type</span>=<span class="hljs-string">none</span><br></code></pre></td></tr></table></figure><p><strong>修改端口号：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br></code></pre></td></tr></table></figure><p><strong>关闭端口:</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><p><strong>随机端口:</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure><p><strong>gzip 压缩:</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.compression.enable</span>=<span class="hljs-string">true # 开启压缩</span><br><span class="hljs-attr">server.compression.min-response-size</span>=<span class="hljs-string">2KB # 开启压缩的最小数据，当返回小于2KB不压缩</span><br></code></pre></td></tr></table></figure><h3 id="2-2-2-Tomcat-日志配置"><a href="#2-2-2-Tomcat-日志配置" class="headerlink" title="2.2.2 Tomcat 日志配置"></a>2.2.2 Tomcat 日志配置</h3><p>创建一个新的 SpringBoot 项目 <strong>tomcat-log</strong></p><p>tomcat 的日志分为两种类型：</p><ul><li>访问日志：accesslog</li><li>服务器内部日志</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">2-3-tomcat-log</span><br><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-comment"># 生成的访问日志目录设置</span><br><span class="hljs-attr">server.tomcat.basedir</span>=<span class="hljs-string">my-tomcat</span><br><span class="hljs-comment"># 开启tomcat的访问日志，默认的日志位置在项目运行的临时目录，默认生成的日志格式 access_log.2020-12-10.log</span><br><span class="hljs-attr">server.tomcat.accesslog.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 生成的日志文件名的前缀，默认是 access_log</span><br><span class="hljs-attr">server.tomcat.accesslog.prefix</span>=<span class="hljs-string">ws_log</span><br><span class="hljs-comment"># 生成的日志文件后缀</span><br><span class="hljs-attr">server.tomcat.accesslog.suffix</span>=<span class="hljs-string">.log</span><br><span class="hljs-comment"># 生成日志文件名日期格式</span><br><span class="hljs-attr">server.tomcat.accesslog.file-date-format</span>=<span class="hljs-string">.yyyyMMdd</span><br><span class="hljs-comment"># 生成的日志文件内容格式也是可以调整的</span><br><span class="hljs-comment"># %h 请求的客户端 IP</span><br><span class="hljs-comment"># %l 用户的身份</span><br><span class="hljs-comment"># %u 用户名</span><br><span class="hljs-comment"># %t 请求时间</span><br><span class="hljs-comment"># %r 请求地址</span><br><span class="hljs-comment"># %s 响应状态码</span><br><span class="hljs-comment"># %b 响应的大小</span><br><span class="hljs-attr">server.tomcat.accesslog.pattern</span>=<span class="hljs-string">%h %l %u %t \&quot;%r\&quot; %s %b</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 服务器内部日志开启</span><br><span class="hljs-attr">logging.level.org.apache.tomcat</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><h2 id="2-3-配置文件"><a href="#2-3-配置文件" class="headerlink" title="2.3 配置文件"></a>2.3 配置文件</h2><blockquote><p>在 spring Boot 中支持两种配置文件一种是 properties 文件，另一种是 yaml 配置文件</p><p><strong>如果两种类型的配置文件同时存在，properties文件的优先级大于yaml文件</strong></p></blockquote><h3 id="2-3-1-配置文件的位置和路径问题"><a href="#2-3-1-配置文件的位置和路径问题" class="headerlink" title="2.3.1 配置文件的位置和路径问题"></a>2.3.1 配置文件的位置和路径问题</h3><p><strong>配置文件有四个位置</strong></p><ul><li>config&#x2F;application.properties</li><li>application.properties</li><li>src&#x2F;main&#x2F;resource&#x2F;config&#x2F;application.properties</li><li>src&#x2F;main&#x2F;resource&#x2F;application.properties</li></ul><p>四个文件的优先级依次降低</p><p>当我们需要自定义配置文件位置的时候，项目启动，需要添加虚拟变量</p><p><strong>spring.config.location&#x3D;classpath:&#x2F;wsconfig&#x2F;</strong></p><p>项目打包之后，运行添加参数</p><p><strong>java -jar xxx.jar –spring.config.location&#x3D;classpath:&#x2F;wsconfig&#x2F;</strong></p><p>项目启动时，默认加载的文件名就是 application.properties,那么我们如何更换配置文件的名称呢？</p><p><strong>更换配置文件名称：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">spring.config.name=wsconfig<br>文件名称就是wsconfig.properties<br></code></pre></td></tr></table></figure><h3 id="2-3-2-属性注入"><a href="#2-3-2-属性注入" class="headerlink" title="2.3.2 属性注入"></a>2.3.2 属性注入</h3><p><strong>普通属性注入</strong></p><p><strong>1.application.properties 配置文件注入</strong></p><p>首先在配置文件添加需要注入的属性的值</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 普通属性注入</span><br><span class="hljs-attr">book.name</span>=<span class="hljs-string">ws</span><br><span class="hljs-attr">book.author</span>=<span class="hljs-string">wwss</span><br><span class="hljs-attr">book.tags</span>=<span class="hljs-string">m1,m2,m3,m4</span><br></code></pre></td></tr></table></figure><p>然后，在类的属性上面通过 @Value 注解进行属性注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;book.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;$&#123;book.author&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-meta">@Value(&quot;$&#123;book.tags&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String[] tags;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.自定义配置文件注入：</strong></p><p>首先在类路径下面创建一个配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># user.properties</span><br><span class="hljs-attr">user.name</span>=<span class="hljs-string">ws</span><br></code></pre></td></tr></table></figure><p>然后，在类上标注注解@PropertySource(“classpath:user.properties”)，值是配置文件的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:user.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类型安全的属性注入</strong></p><p>只需要在类上添加@ConfigurationProperties就可以实现</p><p>需要在注解中写明前缀 <strong>prefix</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;emp&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String[] aliases;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; set;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，就会自动在配置文件中查找 <code>emp.name</code>的值并注入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 类型安全的属性注入</span><br><span class="hljs-attr">emp.name</span>=<span class="hljs-string">ws</span><br><span class="hljs-attr">emp.aliases</span>=<span class="hljs-string">ali1,ali2,ali3</span><br><span class="hljs-attr">emp.list</span>=<span class="hljs-string">l1,l2,l3</span><br><span class="hljs-attr">emp.set</span>=<span class="hljs-string">1,2,3,4,shanxi,jiangsi,guizhou</span><br><span class="hljs-attr">emp.map.k1</span>=<span class="hljs-string">v1</span><br><span class="hljs-attr">emp.map.k2</span>=<span class="hljs-string">v2</span><br></code></pre></td></tr></table></figure><p><strong>配置文件中引用maven的配置</strong></p><p>在application.properties中引用本文件中配置的参数：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user.name</span>=<span class="hljs-string">ws</span><br><span class="hljs-attr">emp.name</span>=<span class="hljs-string">$&#123;user.name&#125;</span><br></code></pre></td></tr></table></figure><p>在 application.properties 中 引用 pom.xml 文件的参数需要把${xxx}改成@xxx@</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user.name</span>&gt;</span>pomws<span class="hljs-tag">&lt;/<span class="hljs-name">user.name</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user.name</span>=<span class="hljs-string">@user.name@</span><br></code></pre></td></tr></table></figure><h3 id="2-3-3-yaml-配置"><a href="#2-3-3-yaml-配置" class="headerlink" title="2.3.3 yaml 配置"></a>2.3.3 yaml 配置</h3><ul><li><p>k:(空格)v：表示一对键值对（空格必须有）；</p></li><li><p>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的;</p></li><li><p>属性和值也是大小写敏感；</p></li><li><p>k:v：字面直接写；</p></li><li><p>字符串默认不用加上单引号或者双引号；</p></li><li><p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>name:“zhangsan\nlisi”：输出；zhangsan换行lisi</p></li><li><p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p></li><li><p>—：代表区块，将一个ymal文件分为多个文件</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">emp:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">沐沐</span><br>  <span class="hljs-attr">list:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">张三</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">李四</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">王五</span><br>  <span class="hljs-attr">set:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">s1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">s2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">map:</span><br>    <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Employee&#123;name=&#x27;沐沐&#x27;, aliases=null, list=[张三, 李四, 王五], set=[s1, s2, 1, 2], map=&#123;k1=v1, k2=v2&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-4-profile-环境配置"><a href="#2-3-4-profile-环境配置" class="headerlink" title="2.3.4 profile 环境配置"></a>2.3.4 profile 环境配置</h3><blockquote><p>配置profile作用：我们在开发Spring  Boot应用时，通常同一套程序会被安装到不同环境，比如:开发、测试、生产等。其中数据库地址、服务器端口等等配置都不同，如果每次打包时，都要修改配置文件，那么非常麻烦。profile功能就是来进行动态配置切换的。</p></blockquote><p><strong>properties</strong></p><p>准备三个文件：</p><p>application.properties 【指定配置文件和配置公共配置】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profile.active</span>=<span class="hljs-string">dev # 需要激活的配置文件</span><br></code></pre></td></tr></table></figure><p>application-dev.properties【开发配置环境】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8001</span><br></code></pre></td></tr></table></figure><p>application-prod.properties【生产配置环境】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8002</span><br></code></pre></td></tr></table></figure><p>注意：在公共配置文件配置的参数，在独立配置文件中不会生效</p><p><strong>yaml</strong></p><blockquote><p>在application.yml配置文件中，通过 - - - 对不同profile配置进行区分,并通过Spring Boot中的profiles对不同profile进行命名</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8002</span><br></code></pre></td></tr></table></figure><h2 id="2-2-spring-boot-中的日志配置"><a href="#2-2-spring-boot-中的日志配置" class="headerlink" title="2.2 spring boot 中的日志配置"></a>2.2 spring boot 中的日志配置</h2><p>Spring Boot 使用 <code>Apache Commons Logging</code> 作为内部的日志框架门面，它只是一个日志接口，在实际应用中需要为该接口来指定相应的日志实现。</p><p>Spring Boot 默认的日志实现是 <code>Logback</code>。</p><p>Spring Boot 的日志系统会自动根据 classpath 下的内容选择合适的日志配置，在这个过程中首选 Logback。</p><p>如果开发者需要修改日志级别，只需要在 application.properties 文件中通过 <code>logging.level 前缀+包名</code> 的形式进行配置即可，例如下面这样：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.level.org.springframework.web</span>=<span class="hljs-string">debug</span><br><span class="hljs-attr">logging.level.org.hibernate</span>=<span class="hljs-string">error</span><br></code></pre></td></tr></table></figure><p>如果你想将日志输出到文件，可以通过如下配置指定日志文件名：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.name</span>=<span class="hljs-string">javaboy.log</span><br></code></pre></td></tr></table></figure><p>logging.file.name 可以只指定日志文件名，也可以指定日志文件全路径，例如下面这样：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.name</span>=<span class="hljs-string">D:/wslog/wslog.log</span><br></code></pre></td></tr></table></figure><p>如果你只是想重新定义输出日志文件的路径，也可以使用 <code>logging.file.path</code> 属性，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.file.path</span>=<span class="hljs-string">D:/wslog</span><br></code></pre></td></tr></table></figure><p>如果想对输出到文件中的日志进行精细化管理，还有如下一些属性可以配置：</p><ul><li>logging.logback.rollingpolicy.file-name-pattern：日志归档的文件名，日志文件达到一定大小之后，自动进行压缩归档。</li><li>logging.logback.rollingpolicy.clean-history-on-start：是否在应用启动时进行归档管理。</li><li>logging.logback.rollingpolicy.max-file-size：日志文件大小上限，达到该上限后，会自动压缩。</li><li>logging.logback.rollingpolicy.total-size-cap：日志文件被删除之前，可以容纳的最大大小。</li><li>logging.logback.rollingpolicy.max-history：日志文件保存的天数。</li></ul><p>日志文件归档这块，小伙伴们感兴趣可以自己试下，可以首先将 max-file-size 属性调小，这样方便看到效果：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="hljs-string">1MB</span><br></code></pre></td></tr></table></figure><p>然后添加如下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> getLogger(HelloController.class);<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>            logger.info(<span class="hljs-string">&quot;hello javaboy&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问该接口，可以看到最终生成的日志文件被自动压缩了</p><p>application.properties 中还可以配置日志分组。</p><p>日志分组能够把相关的 logger 放到一个组统一管理。</p><p>例如我们可以定义一个 tomcat 组：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.group.tomcat</span>=<span class="hljs-string">org.apache.catalina,org.apache.coyote, org.apache.tomcat</span><br></code></pre></td></tr></table></figure><p>然后统一管理 tomcat 组中的所有 logger：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.level.tomcat</span>=<span class="hljs-string">TRACE</span><br></code></pre></td></tr></table></figure><p>Spring Boot 中还预定义了两个日志分组 web 和 sql，如下：</p><p>![img](..&#x2F;..&#x2F;..&#x2F;local_blog&#x2F;springboot&#x2F;第二章 Spring Boot 的基本配置&#x2F;20201214124953.png)</p><p>不过在 application.properties 中只能实现对日志一些非常简单的配置，如果想实现更加细粒度的日志配置，那就需要使用日志实现的原生配置，例如 <code>Logback</code> 的 <code>classpath:logback.xml</code>，<code>Log4j</code> 的 <code>classpath:log4j.xml</code> 等。如果这些日志配置文件存在于 classpath 下，那么默认情况下，Spring Boot 就会自动加载这些配置文件。</p><h3 id="2-2-1-Logback-配置"><a href="#2-2-1-Logback-配置" class="headerlink" title="2.2.1 Logback 配置"></a>2.2.1 Logback 配置</h3><p><strong>基本配置：</strong></p><p>默认<code>logback</code>配置文件名称有两种：</p><ul><li>logback.xml：这种配置文件会直接被日志框架加载</li><li>logback-spring.xml：这种配置文件不会被日志框架直接加载，而是由 Spring Boot 去解析日志配置，可以使用 SpringBoot 的高级 Profile 功能。</li></ul><p>Spring Boot 中为 <code>Logback</code> 提供了四个默认的配置文件，位置在 <code>org/springframework/boot/logging/logback/</code>，分别是：</p><ul><li>defaults.xml：提供了公共的日志配置，日志输出规则等。</li><li>console-appender.xml：使用 CONSOLE_LOG_PATTERN 添加一个ConsoleAppender。</li><li>file-appender.xml：添加一个 RollingFileAppender。</li><li>base.xml：为了兼容旧版 Spring Boot 而提供的。</li></ul><p>如果需要自定义 <code>logback.xml</code> 文件，可以在自定义时使用这些默认的配置文件，也可以不使用。一个典型的 <code>logback.xml</code> 文件如下（resources&#x2F;logback.xml）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.web&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以通过 include 引入 Spring Boot 已经提供的配置文件，也可以自定义。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br><span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>  <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;10 seconds&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--&lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot; /&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志存放目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;D:/dev/logs/boot-start/aop&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;clr&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wex&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">conversionRule</span> <span class="hljs-attr">conversionWord</span>=<span class="hljs-string">&quot;wEx&quot;</span> <span class="hljs-attr">converterClass</span>=<span class="hljs-string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL</span><br><span class="hljs-comment">        %r:输出自应用启动到输出该日志讯息所耗费的毫秒数</span><br><span class="hljs-comment">        %t:输出产生该日志事件的线程名</span><br><span class="hljs-comment">        %f:输出日志讯息所属的类别的类别名</span><br><span class="hljs-comment">        %c:输出日志讯息所属的类的全名</span><br><span class="hljs-comment">        %d:输出日志时间点的日期或时间，指定格式的方式： %d&#123;yyyy-MM-dd HH:mm:ss&#125;</span><br><span class="hljs-comment">        %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。</span><br><span class="hljs-comment">        %m:输出代码中指定的讯息，如log(message)中的message</span><br><span class="hljs-comment">        %n:输出一个换行符号</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志格式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        Appender: 设置日志信息的去向,常用的有以下几个</span><br><span class="hljs-comment">            ch.qos.logback.core.ConsoleAppender (控制台)</span><br><span class="hljs-comment">            ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)</span><br><span class="hljs-comment">            ch.qos.logback.core.FileAppender (文件)</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_debug.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 格式化输出：%d表示日期,%thread表示线程名,%-5level表示级别从左显示5个字符宽度,%msg表示日志消息,%n表示换行符 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志归档 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/debug/log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 除按日志记录之外，还配置了日志文件不能超过100M，若超过100M，日志文件序号+1 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录debug级别的 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- LevelFilter： 级别过滤器，根据日志级别进行过滤 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            !-- 用于配置符合过滤条件的操作 ACCEPT：日志会被立即处理，不再经过剩余过滤器 --&gt;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 用于配置不符合过滤条件的操作 DENY：日志将立即被抛弃不再经过其他过滤器 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/log_error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span><br><span class="hljs-comment">        &lt;logger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。</span><br><span class="hljs-comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="hljs-comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="hljs-comment">              还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。</span><br><span class="hljs-comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="hljs-comment">        addtivity:是否向上级logger传递打印信息。默认是true。</span><br><span class="hljs-comment">        &lt;logger&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个logger</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;logger name=&quot;org.springframework.web&quot; level=&quot;info&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;logger name=&quot;org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor&quot; level=&quot;INFO&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="hljs-comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="hljs-comment">        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：</span><br><span class="hljs-comment">     --&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="hljs-comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="hljs-comment">        不能设置为INHERITED或者同义词NULL。默认是DEBUG</span><br><span class="hljs-comment">        可以包含零个或多个元素，标识这个appender将会添加到这个logger。</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--开发环境:打印控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.log&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志输出级别 开发环境DEBUG 生产环境INFO --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--生产环境:输出到文件--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;springProfile name=&quot;pro&quot;&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;root level=&quot;info&quot;&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;DEBUG_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;INFO_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;WARN_FILE&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/root&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/springProfile&gt;--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>输出到文件：</strong></p><p>如果想禁止控制台的日志输出，转而将日志内容输出到一个文件，我们可以自定义一个 <code>logback-spring.xml</code> 文件，并引入前面所说的 <code>file-appender.xml</code> 文件。</p><p>像下面这样（<code>resources/logback-spring.xml</code>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_FILE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;LOG_FILE:-&#123;LOG_PATH:-&#123;LOG_TEMP:-&#123;java.io.tmpdir:-/tmp&#125;&#125;/&#125;spring.log&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/springframework/boot/logging/logback/file-appender.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-2-Log4j-配置"><a href="#2-2-2-Log4j-配置" class="headerlink" title="2.2.2 Log4j 配置"></a>2.2.2 Log4j 配置</h3><p>如果 classpath 下存在 <code>Log4j2</code> 的依赖，Spring Boot 会自动进行配置。</p><p>默认情况下 classpath 下当然不存在 <code>Log4j2</code> 的依赖，如果想使用 <code>Log4j2</code>，可以排除已有的 <code>Logback</code>，然后再引入 <code>Log4j2</code>，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>Log4j2</code> 的配置就比较容易了，在 reources 目录下新建 log4j2.xml 文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br> <span class="hljs-comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span><br> <span class="hljs-comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span><br> <span class="hljs-comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;WARN&quot;</span> <span class="hljs-attr">monitorInterval</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--先定义所有的appender--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--这个输出控制台的配置--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--输出日志的格式--&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">console</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;log/test.log&quot;</span> <span class="hljs-attr">append</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileInfo&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;sys:user.home&#125;/logs/info.log&quot;</span></span><br><span class="hljs-tag">                      <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span>&gt;</span><br>             <span class="hljs-comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;100 MB&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileWarn&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;sys:user.home&#125;/logs/warn.log&quot;</span></span><br><span class="hljs-tag">                      <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;100 MB&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">DefaultRolloverStrategy</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;20&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">RollingFile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;RollingFileError&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;sys:user.home&#125;/logs/error.log&quot;</span></span><br><span class="hljs-tag">                      <span class="hljs-attr">filePattern</span>=<span class="hljs-string">&quot;$&#123;sys:user.home&#125;/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">Policies</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">TimeBasedTriggeringPolicy</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">SizeBasedTriggeringPolicy</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;100 MB&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">Policies</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">RollingFile</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileInfo&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileWarn&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;RollingFileError&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1.入门.md</title>
    <link href="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/"/>
    <url>/2022/05/20/1-%E5%85%A5%E9%97%A8-md/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-搭建-SSM【省略M】"><a href="#Java-搭建-SSM【省略M】" class="headerlink" title="Java 搭建 SSM【省略M】"></a>Java 搭建 SSM【省略M】</h1><h2 id="1-基于XML配置"><a href="#1-基于XML配置" class="headerlink" title="1.基于XML配置"></a>1.基于XML配置</h2><h3 id="1-1-创建普通Maven工程"><a href="#1-1-创建普通Maven工程" class="headerlink" title="1.1 创建普通Maven工程"></a>1.1 创建普通Maven工程</h3><p><strong>引入 spring-webmvc 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>设置打包方式为 <strong>war</strong> 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-修改项目结构"><a href="#1-2-修改项目结构" class="headerlink" title="1.2 修改项目结构"></a>1.2 修改项目结构</h3><p><strong>添加webapp和web.xml描述性文件</strong></p><h3 id="1-3-添加-spring-配置文件和-springmvc-配置文件"><a href="#1-3-添加-spring-配置文件和-springmvc-配置文件" class="headerlink" title="1.3 添加 spring 配置文件和 springmvc 配置文件"></a>1.3 添加 spring 配置文件和 springmvc 配置文件</h3><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring:扫描除去controller之外的注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ws&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>spring-servlet.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring:只扫描注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ws&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-修改web-xml"><a href="#1-4-修改web-xml" class="headerlink" title="1.4 修改web.xml"></a>1.4 修改web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-准备接口-测试"><a href="#1-5-准备接口-测试" class="headerlink" title="1.5 准备接口 测试"></a>1.5 准备接口 测试</h3><p><strong>HelloController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SSM&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目：<a href="http://localhost:8080/get:%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0">http://localhost:8080/get:在浏览器可以看到</a> <strong>SSM</strong> 表示项目搭建成功</p><h2 id="2-基于-JAVA-代码搭建SSM"><a href="#2-基于-JAVA-代码搭建SSM" class="headerlink" title="2.基于 JAVA 代码搭建SSM"></a>2.基于 JAVA 代码搭建SSM</h2><h3 id="2-1创建普通Maven项目"><a href="#2-1创建普通Maven项目" class="headerlink" title="2.1创建普通Maven项目"></a>2.1创建普通Maven项目</h3><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-三个核心配置类"><a href="#2-2-三个核心配置类" class="headerlink" title="2.2 三个核心配置类"></a>2.2 三个核心配置类</h3><p><strong>SpringmvcConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.指定扫描包</span><br><span class="hljs-comment"> * 2.不采用默认的扫描方式：不扫描注解</span><br><span class="hljs-comment"> * 3.只扫描controller注解</span><br><span class="hljs-comment"> * 这个配置类相当于 spring-servlet.xml</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 温笙</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">        basePackages = &quot;com.ws&quot;,</span><br><span class="hljs-meta">        useDefaultFilters = false,</span><br><span class="hljs-meta">        includeFilters = &#123;</span><br><span class="hljs-meta">                @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class),//扫描 controller</span><br><span class="hljs-meta">                @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Configuration.class)&#125; // 扫描 configuration 注入 applicationContext.xml</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringmvcConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SpringConfig.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.指定扫描包</span><br><span class="hljs-comment"> * 2.采用默认的扫描方式：扫描所有注解</span><br><span class="hljs-comment"> * 3.只扫描controller之外的注解</span><br><span class="hljs-comment"> * 这个配置类相当于 applicationContext.xml</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 温笙</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">        basePackages = &quot;com.ws&quot;,</span><br><span class="hljs-meta">        useDefaultFilters = true,</span><br><span class="hljs-meta">        excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class)&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>WebInit.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个类的作用相当于 web.xml</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebApplicationInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStartup</span><span class="hljs-params">(javax.servlet.ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        <span class="hljs-comment">//1.1引入 springmvc</span><br>        context.register(SpringmvcConfig.class);<br>        <span class="hljs-comment">//1.2添加 dispatcherServlet</span><br>        ServletRegistration.<span class="hljs-type">Dynamic</span> <span class="hljs-variable">springmvc</span> <span class="hljs-operator">=</span> servletContext.addServlet(<span class="hljs-string">&quot;springmvc&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DispatcherServlet</span>(context));<br>        <span class="hljs-comment">//1.3添加映射路径</span><br>        springmvc.addMapping(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">//1.4springmvc 启动顺序</span><br>        springmvc.setLoadOnStartup(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完成后，启动项目：浏览器访问接口，配置完成</p><h2 id="3-细节问题"><a href="#3-细节问题" class="headerlink" title="3.细节问题"></a>3.细节问题</h2><h3 id="3-1-静态资源访问"><a href="#3-1-静态资源访问" class="headerlink" title="3.1 静态资源访问"></a>3.1 静态资源访问</h3><p>首先，SpringmvcConfig.java 配置实现 <code>WebMvcConfigurationSupport</code>接口，实现资源映射的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">        basePackages = &quot;com.ws&quot;,</span><br><span class="hljs-meta">        useDefaultFilters = false,</span><br><span class="hljs-meta">        includeFilters = &#123;</span><br><span class="hljs-meta">                @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class),//扫描 controller</span><br><span class="hljs-meta">                @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Configuration.class)&#125; // 扫描 configuration 注入 applicationContext.xml</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringmvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.静态资源映射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置中，将 resources 目录映射为 资源文件夹</p><p>然后，启动项目，打开浏览器输入：<a href="http://localhost:8080/01.html">http://localhost:8080/01.html</a> 就会访问到resources下面的静态资源（html css js）</p><h3 id="3-2-jsp-资源映射"><a href="#3-2-jsp-资源映射" class="headerlink" title="3.2 jsp 资源映射"></a>3.2 jsp 资源映射</h3><p>在 springmvc 配置类添加 视图映射的方法，并添加视图映射前缀和后缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 2.jsp 的视图映射</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureViewResolvers</span><span class="hljs-params">(ViewResolverRegistry registry)</span> &#123;<br>registry.jsp(<span class="hljs-string">&quot;/jsp/&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>通过打断点发现：当项目中没有 jstl 的依赖时，使用的是 <strong>InternalResourceView</strong>，当添加了 jstl 依赖，就会自动映射到 <strong>jstlResourceView</strong></p><h3 id="3-3-无数据视图映射跳转"><a href="#3-3-无数据视图映射跳转" class="headerlink" title="3.3 无数据视图映射跳转"></a>3.3 无数据视图映射跳转</h3><p>实现方法 <strong>addViewControllers</strong>添加对应的<strong>地址</strong>和<strong>视图名称</strong>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>    registry.addViewController(<span class="hljs-string">&quot;/h3&quot;</span>).setViewName(<span class="hljs-string">&quot;hello.jsp&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-JSON-映射"><a href="#3-4-JSON-映射" class="headerlink" title="3.4 JSON 映射"></a>3.4 JSON 映射</h3><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当项目中添加了 json 的依赖，返回的数据就会自动进行json数据解析，返回JSON数据。</p><p><strong>准备一个User类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Date birthDate;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>请求数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/h4&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>    List&lt;User&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    names.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zs&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    names.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;mm&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    <span class="hljs-keyword">return</span> names;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515201606626.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515201606626"><p>发现前端数据转换成了 JSON 数据，但是时间格式并不是我们想要的。</p><p>我们只需要在User对象的日期字段添加 注解 即可解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Date birthDate;<br></code></pre></td></tr></table></figure><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515201834492.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515201834492"><p>当我们想要给全局的日期都添加 JSON 解析的话，需要做如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息转换器解析</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> converters</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    objectMapper.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>));<br>    <span class="hljs-type">MappingJackson2HttpMessageConverter</span> <span class="hljs-variable">jackson2HttpMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>(objectMapper);<br>    converters.add(jackson2HttpMessageConverter);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515202529993.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515202529993"><h1 id="Spring-Boot-入门"><a href="#Spring-Boot-入门" class="headerlink" title="Spring Boot 入门"></a>Spring Boot 入门</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>Spring Boot使创建独立的、生产级的Spring应用程序变得很容易，你可以“直接运行”。</p><p>大多数Spring Boot应用程序只需要最小的Spring配置。</p><h3 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1.特点"></a>1.1.特点</h3><ul><li><p>创建独立的Spring应用程序</p></li><li><p>直接嵌入Tomcat、Jetty或Undertow(不需要部署WAR文件)</p></li><li><p>提供固执的“启动器”依赖项，以简化构建配置</p></li><li><p>尽可能自动配置Spring和第三方库</p></li><li><p>提供可用于生产的特性，如度量、健康检查和外部化配置</p></li><li><p>完全不需要代码生成，也不需要XML配置</p></li></ul><h3 id="1-2-资料"><a href="#1-2-资料" class="headerlink" title="1.2 资料"></a>1.2 资料</h3><p>springboot中文导航：<a href="http://springboot.fun/">http://springboot.fun/</a></p><p>springboot中文社区：<a href="http://springboot.io/">http://springboot.io/</a></p><p>Spring</p><h2 id="2-springboot项目的创建"><a href="#2-springboot项目的创建" class="headerlink" title="2.springboot项目的创建"></a>2.springboot项目的创建</h2><h3 id="方式一：【官网创建】"><a href="#方式一：【官网创建】" class="headerlink" title="方式一：【官网创建】"></a><strong>方式一：【官网创建】</strong></h3><p><a href="https://start.spring.io/">https://start.spring.io/</a></p><p>点击上述连接，在官方网站创建 springboot 项目</p><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515204056549.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515204056549"><p>下载下来并解压，导入到 IDEA 中：</p><p>编写一个请求的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(Application.class, args);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello spring boot&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目：在浏览器输入：<a href="http://lcoalhost:8080/index">http://lcoalhost:8080/index</a></p><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515204800520.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515204800520"><h3 id="方式二：IDEA-创建"><a href="#方式二：IDEA-创建" class="headerlink" title="方式二：IDEA 创建"></a><strong>方式二：IDEA 创建</strong></h3><p>通过 IDEA 的 spring 初始化器来创建</p><p><strong>点击新建项目，选择 spring Initializr来创建</strong></p><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515205222499.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515205222499"><p><strong>选择对应版本和依赖</strong></p><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515205244751.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515205244751"><p><strong>编写接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IDEA BOOT&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>启动项目，访问接口：</strong></p><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220515205519011.png" class title="2022-05-20-1-入门-md&#x2F;image-20220515205519011"><p>使用方式二和方式一本质上相同的，当我们访问不到 <a href="https://start.spring.io/">https://start.spring.io/</a> 的时候，方式二也不可用，可以添加国内阿里云的网站来进行创建：</p><p><a href="http://start.aliyun.com/">http://start.aliyun.com</a></p><h3 id="方式三：将-maven-配置成-springboot-项目"><a href="#方式三：将-maven-配置成-springboot-项目" class="headerlink" title="方式三：将 maven 配置成 springboot 项目"></a>方式三：将 maven 配置成 springboot 项目</h3><p><strong>1.创建普通Maven项目</strong></p><p><strong>2.添加 springboot 父依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.添加web依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>4.添加启动类注解和添加请求</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(AppApplication.class,args);<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MAVEN SPRING BOOT&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-Configuration注解详情"><a href="#3-Configuration注解详情" class="headerlink" title="3.@Configuration注解详情"></a>3.@Configuration注解详情</h2><p><strong>@Configuration</strong></p><p>用法：作用在类上面</p><p>作用：告诉 Spring Boot 这是一个配置类，相当于 Spring 中的 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>@Bean</strong></p><p>用法：配置类里面使用@Bean标注在方法上面给IOC容器注册组件，默认是单实例的</p><p>作用：给容器添加组件，相当于Spring中xml配置文件中的bean标签</p><p>理解：以方法名为组件ID，返回类型就是组件类型，返回值就是组件在容器中的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//告诉SpringBoot这是一个配置类 == 配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span>   <span class="hljs-comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Mr.Yu&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;male&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;customize&quot;)</span>  <span class="hljs-comment">//id值也可以指定</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;male&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在启动类中打印输出IOC容器中的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.返回我们IOC容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>        <span class="hljs-comment">//2.查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过查看控制台我们可以发现：输出的Bean中有我们存在进IOC容器中的两个对象：person1 customize</p><p><strong>单实例：</strong></p><p>@Bean 注解存放到IOC容器中的实例是单实例的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.返回我们IOC容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>        <span class="hljs-comment">//2.查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br><br>        <span class="hljs-comment">//单实例</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;person1&quot;</span>,Person.class);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> run.getBean(<span class="hljs-string">&quot;person1&quot;</span>,Person.class);<br>        System.out.println(<span class="hljs-string">&quot;person1 == person2 :&quot;</span>+ (person1 == person2));<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">person1==person2 : <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>配置类也是容器中的组件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.返回我们IOC容器</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br>        <span class="hljs-comment">//2.查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>        <span class="hljs-comment">//配置类本身也是组件</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> run.getBean(Config.class);<br>        System.out.println(bean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.ysw.boot.config.Config$$EnhancerBySpringCGLIB$$4aa44992@381d7219<br></code></pre></td></tr></table></figure><p><strong>直接调用配置类里面的 person1 方法</strong></p><p>如果我们直接调用配置类里面的方法会发生什么情况？他是从IOC容器中获取还是直接 new 一个对象呢？</p><ol><li>在 new 一个配置类出来的情况下，调用 person1 方法，他返回的是 new 出来的对象。</li><li>但是如果我们从容器冲获取出来的配置类，无论调用多少次 perosn1 方法，他始终返回的都是同一个单例对象，也就是从 IOC 容器中获取出来的对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.返回我们IOC容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>        <span class="hljs-comment">//2.查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br><br>        <span class="hljs-comment">//配置类本身也是组件</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> run.getBean(Config.class);<br>        <span class="hljs-comment">//获取到的本身就是代理对象</span><br>        <span class="hljs-comment">//com.ysw.boot.config.Config$$EnhancerBySpringCGLIB$$4aa44992@381d7219</span><br>        System.out.println(bean);<br><br>        <span class="hljs-comment">//如果我们直接调用person1方法，它是从IoC容器中拿还是直接new一个对象呢,</span><br>        <span class="hljs-comment">//在new一个配置类出来的情况下，调用person1方法，它返回的是new出来的对象</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person3</span> <span class="hljs-operator">=</span> config.person1();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person4</span> <span class="hljs-operator">=</span> config.person1();<br>        System.out.println(<span class="hljs-string">&quot;person3 == person4 :&quot;</span>+ (person3 == person4));<br><br>        <span class="hljs-comment">//但是如果我们从容器中取得的配置类，无论再去掉用多少次person1方法，它始终返回的都是同一个单实例对象，也就是从IoC容器中拿的对象。</span><br>        <span class="hljs-comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有；</span><br>        <span class="hljs-comment">//保持组件单实例</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person5</span> <span class="hljs-operator">=</span> bean.person1();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person6</span> <span class="hljs-operator">=</span> bean.person1();<br>        System.out.println(<span class="hljs-string">&quot;person5 == person6 :&quot;</span>+ (person5 == person6));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">com.ws.config.MyConfig$$EnhancerBySpringCGLIB$$4deriwjq@17<span class="hljs-type">fdh3h2</span><br><span class="hljs-variable">perosn3</span> <span class="hljs-operator">=</span>= person4 :<span class="hljs-type">false</span><br><span class="hljs-variable">person5</span> <span class="hljs-operator">=</span>= person6 :<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>proxyBeanMethods—-代理Bean的方法</strong></p><p>从容器中获取到的配置类对象输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.ws.config.MyConfig$$EnhancerBySpringCGLIB$$4deriwjq@17fdh3h2<br></code></pre></td></tr></table></figure><p>从上述输出的结果中，我们可以看出从容器中获取到的配置类对象本身就是一个被SpringCGLIB增强了的代理对象</p><ul><li>@Configuration 默认设置的是 proxyBeanmethods &#x3D; true</li><li>如果 <strong>@Configuration(proxyBeanMethods&#x3D;true)</strong> 就是代理对象调用方法。Spring Boot 总会检查这个组件是否在容器中已经存在，调用配置类中的方法时会返回容器中已有的组件(即IOC容器中已经存在的对象)。</li><li>如果 **@Configuration(proxyBeanMethods&#x3D;fasle)**，就不是代理对象调用方法，SpringBoot不会检查这个组件是否在容器中存在，调用配置类的时候会返回新的对象。</li></ul><p><strong>总结：</strong></p><ul><li>Full模式(proxyBeanMethods &#x3D; true)：保证每个@Bean方法被调用多少次返回的组件都是单实例的</li><li>Lite模式(proxyBeanMethods &#x3D; false)：每个@Bean方法被调用多少次返回的组件都是新创建的</li><li>组件依赖必须使用Full模式默认。其他默认是否Lite模式</li><li>配置类组件之间无依赖关系用Lite模式加速容器启动过程，调用配置类中的方法时，SpringBoot每次都不会判断对象在容器中是否已经存在，减少了判断过程</li><li>配置类组件之间有依赖关系，调用配置类中的方法时，SpringBoot每次都会判断对象在容器中是否已经存在，方法会被调用得到之前单实例组件，用Full模式</li></ul><h2 id="4-SpringBootApplciation"><a href="#4-SpringBootApplciation" class="headerlink" title="4.@SpringBootApplciation"></a>4.@SpringBootApplciation</h2><p>SpringBootApplication是springboot的基本注解，是写在springboot的启动类上的注解，目的是开启springboot的自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;<br></code></pre></td></tr></table></figure><p>在这里可以看到这里有7个注解</p><p>其中@Target(ElementType.TYPE)、@Retention(RetentionPolicy.RUNTIME)、@Documented、@Inherited这四个注解是Java原生的，用来标注这个注解的用法的这里不再解释。</p><p>重点是@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan这三个注解</p><p><strong>@1.ComponentScan</strong>，看到这个注解很容易想到spring配置里的一个标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>看到这个标签可能就明白了就是扫描指定包的，同理@ComponentScans注解是可以配置多个需要扫描的包</p><p><strong>2.@EnableAutoConfiguration</strong>这个注解也是很常见的，这个注解的意思就是开启自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;&#125;<br></code></pre></td></tr></table></figure><p>在原生的 Spring Framework 中，组件装配有三个阶段：</p><ol><li>Spring2.5+ @Component</li><li>Spring3.0+，使用 @Configuration + @Bean</li><li>Spring3.1+，使用 @EnableXXX+@Import</li></ol><p>举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-comment">//1.@Import(&#123;Apple.class, Banana.class&#125;)</span><br><span class="hljs-comment">//2.直接导入配置类@Import(&#123;MyConfig.class&#125;)</span><br><span class="hljs-comment">//3.导入选择器@Import(&#123;FruitImportSelector.class&#125;)</span><br><span class="hljs-meta">@Import(&#123;FruitDefinitionRegistrar.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableFruit &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式一：通过 @Import 直接导入</p><p>方式二：通过 @Import 导入配置类，在配置类中通过 @Bean 导入</p><p>方式三：通过 @Import 导入一个 Selector ，在 Selector 中注册Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;Apple.class.getName(), Banana.class.getName()&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式四：通过 @Import 导入 DefinitionRegistrar </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FruitDefinitionRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry, BeanNameGenerator importBeanNameGenerator)</span> &#123;<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Apple.class));<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(Banana.class));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上方式都可以注册Bean</p><p>以上两个注解配合，扫描到了包，然后开始自动配置。</p><p><strong>3.@SpringBootConfiguration</strong>不是spring原生的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是@SpringBootConfiguration这个注解的全部代码，他只是用了下@Configuration注解。</p><p>综上，springboot的启动类不用@SpringBootApplication，而是@Configuration、@EnableAutoConfiguration、@ComponentScan，同样能达到启动的目的。</p><h2 id="5-Maven-工程结构问题"><a href="#5-Maven-工程结构问题" class="headerlink" title="5.Maven 工程结构问题"></a>5.Maven 工程结构问题</h2><h3 id="5-1父子模块打包"><a href="#5-1父子模块打包" class="headerlink" title="5.1父子模块打包"></a>5.1父子模块打包</h3><p>当父模块中包含了子模块 module ，打包父模块会连着所有子模块一起打包</p><p>如果父模块中没有写明子模块，则需要每个子模块自行打包</p><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">mall<br><span class="hljs-bullet">  -</span> mall-zhifull      ①<br><span class="hljs-bullet">  -</span> mall-wuliu     ②<br><span class="hljs-bullet">  -</span> mail-email-server ③<br><span class="hljs-bullet">      -</span> mapper   ④<br><span class="hljs-bullet">      -</span> service       ⑤<br><span class="hljs-bullet">      -</span> web   ⑥<br></code></pre></td></tr></table></figure><p>1、 2、 3 是三个独立的微服务，在父模块中可以不写 module</p><p>4、 5、 6 是 mall-email-server 中三个相互依赖的子模块，需要在 mall-email-server 中声明三个子模块</p><h3 id="5-2-resource-节点"><a href="#5-2-resource-节点" class="headerlink" title="5.2 resource 节点"></a>5.2 resource 节点</h3><p>首先我们创建一个普通的 maven 项目</p><p>在 resource 下创建两个 属性文件，当我们需要在属性文件中引用变量值时，可以通过 pom 文件中的 resource 节点进行过滤</p><p>在 pom.xml 文件中定义变量：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ws.name</span>&gt;</span>www.ws.org<span class="hljs-tag">&lt;/<span class="hljs-name">ws.name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">a.properties</span><br>    <span class="hljs-attr">a.name</span>=<span class="hljs-string">$&#123;ws.name&#125;</span><br><span class="hljs-attr">b.properties</span><br>    <span class="hljs-attr">b.name</span>=<span class="hljs-string">$&#123;ws.name&#125;</span><br></code></pre></td></tr></table></figure><p>在 pom.xml 文件中添加 build resource 节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>a.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>a.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>directory: 表示资源文件的目录</p><p>filtering: 表示是否进行过滤</p><p>include: 表示需要进行处理的文件[将变量解析成对应的数据在进行渲染]    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>a.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>表示对 reosurces 目录下的 `a.properties` 文件进行数据处理<br></code></pre></td></tr></table></figure><p>exclude: 表示除去这个文件之外的其他文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">         <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>a.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>表示：对 resources 目录下的 `a.properties` 之外的文件不进行数据处理<br></code></pre></td></tr></table></figure></blockquote><p>打包如下：</p><img src="/2022/05/20/1-%E5%85%A5%E9%97%A8-md/image-20220516145946640.png" class title="2022-05-20-1-入门-md&#x2F;image-20220516145946640"><h2 id="6-springboot-的-parent模块"><a href="#6-springboot-的-parent模块" class="headerlink" title="6.springboot 的 parent模块"></a>6.springboot 的 parent模块</h2><ol><li>定义 Java 的编译版本</li><li>定义项目编码格式</li><li>定义依赖的版本号</li><li>项目打包的配置</li><li>自动化资源过滤</li><li>自动化插件配置</li></ol>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/11/hello-world/"/>
    <url>/2022/05/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>6.OpenFeign远程调用</title>
    <link href="/2022/05/11/6-OpenFeign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
    <url>/2022/05/11/6-OpenFeign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="6-1-OpenFeign"><a href="#6-1-OpenFeign" class="headerlink" title="6.1 OpenFeign"></a>6.1 OpenFeign</h3><p>前面无论是基本调用，还是 Hystrix，我实际上都是通过手动调用 RestTemplate<br>来实现远程调用的。使用 RestTemplate 存在几个问题</p><ul><li>繁琐，每一个请求，参数不同，请求地址不同，返回数据类型不同，其他都是一样的<br>我们能够希望请求能够简化</li></ul><p>我们希望对请求进行简化，通过 OpenFeign。</p><p>一开始这个组件不叫这个名字，就叫 Feign，Netfix Feign。但是 Netfix 中的组件现在已经停止开源工作。</p><p>OpenFeign 是 SpringCloud 团队在 Netfix Feign的基础上开发出来的声明式组件。</p><p>关于 OpenFeign 组件的 Issue：<a href="https://github.com/OpenFeign/feign/issues/373">https://github.com/OpenFeign/feign/issues/373</a></p><h3 id="6-2-HelloWorld"><a href="#6-2-HelloWorld" class="headerlink" title="6.2 HelloWorld"></a>6.2 HelloWorld</h3><p>继续使用之前的 Provider。</p><p>新建一个SpringBoot 模块，选择 OpenFeign 依赖</p><ul><li>web</li><li>eureka client</li><li>openFeign</li></ul><p>项目创建成功，配置文件如下[<strong>注册到 Eureka</strong>]:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">openfeign4000</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">4000</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://localhost:1111/eureka</span><br></code></pre></td></tr></table></figure><p>接下来在启动类添加注解，开启 Feign 的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Openfeign4000Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Openfeign4000Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，定义 provider 接口方法，供 openFeign 服务调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/open/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">openHello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;open feign&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，定义 HelloService 接口，去使用 OpenFeign：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绑定服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(&quot;provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法名随意取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后调用 HelloController 中，调用 HelloService 的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloService helloService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> helloService.hello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，启动 OpenFeign 项目，进行测试</p><h3 id="6-2-参数传递"><a href="#6-2-参数传递" class="headerlink" title="6.2 参数传递"></a>6.2 参数传递</h3><p>普通的参数传递:</p><ol><li>参数绑定</li><li>如果通过 header 来传递参数，一定记得中文转码</li></ol><p>测试的服务端几口，继续使用 provider 提供的接口。</p><p>这里，我们主要在 openFeign 中添加调用接口即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绑定服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(&quot;provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法名随意取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * openFeign get 接口</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     *     <span class="hljs-doctag">@GetMapping</span>(&quot;/open/name&quot;)</span><br><span class="hljs-comment">     *     public String name(String name)&#123;</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/open/name&quot;)</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     *     <span class="hljs-doctag">@PostMapping</span>(&quot;/open/user2&quot;)</span><br><span class="hljs-comment">     *     public User addUser4(<span class="hljs-doctag">@RequestBody</span> User user)</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/open/user2&quot;)</span><br>    String <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     *     <span class="hljs-doctag">@DeleteMapping</span>(&quot;/open/user/&#123;id&#125;&quot;)</span><br><span class="hljs-comment">     *     public void deleteUser4(<span class="hljs-doctag">@PathVariable</span> Integer id)</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/open/user/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser4</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;</span><br><span class="hljs-comment">     *     <span class="hljs-doctag">@GetMapping</span>(&quot;/open/user3&quot;)</span><br><span class="hljs-comment">     *     void getUserByName(<span class="hljs-doctag">@RequestHeader</span> String name);</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/open/user3&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByName</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;name&quot;)</span> String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：凡是 key&#x2F;value 形式的参数，一定要标记参数的名称</p><p>HelloController 中调用 HelloService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * openFeign get 请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> helloService.name(<span class="hljs-string">&quot;ws&quot;</span>);<br>    System.out.println(ws);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setId(<span class="hljs-number">1</span>);<br>    user.setUsername(<span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> helloService.addUser(user);<br>    System.out.println(user1);<br><br>    helloService.deleteUser4(<span class="hljs-number">1</span>);<br><br>    helloService.getUserByName(URLEncoder.encode(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-keyword">return</span> helloService.hello();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>放在 Header 中的参数 ，一定要编码之后才能传递</p><h3 id="6-3-继承特性"><a href="#6-3-继承特性" class="headerlink" title="6.3 继承特性"></a>6.3 继承特性</h3><p>将 Provider 和 openFeign 中公共的部分提取出来，一起使用。</p><p>我们新建一个 Module，叫做 hello-api，注意，由于这个模块要被其它模块所依赖，所以这个模块<br>是一个 maven 项目。但是由于这个模块要用到 springMVC，因此在创建成功之后，给这个模块添加一个 web 依赖<br>，导入 springmvc需要的一套依赖。</p><p>项目创建成功后，首先添加依赖：</p><ul><li>web</li><li>commons</li></ul><p>然后定义公共接口： provider 和 openFeign 中公共的部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>;<br><br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/open/name&quot;)</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span>;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/open/user2&quot;)</span><br>    User <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>;<br><br>   <br>    <span class="hljs-meta">@DeleteMapping(&quot;/open/user/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser4</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/open/user3&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByName</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;name&quot;)</span> String name)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义完成后，接下来，在 provider 和 openFeign 中分别引用该模块</p><p>添加成功之后，在 provider 中实现该接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello MM&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;extend-&gt;&quot;</span>+name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser4</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;extend-&gt;delete-&gt;&quot;</span>+id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;extends=&gt;查找&quot;</span>+name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 openFeign 中，定义接口继承公共接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;provider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IUserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来代码测试: <a href="http://localhost:4000/hello">http://localhost:4000/hello</a></p><p>关于继承特性：</p><ol><li>使用继承特性，代码简单命令，不易出错。服务端和消费端的代码统一，一改俱改。<br>这样会提高服务端和消费端的耦合度。</li><li>上一节中所讲的参数传递，在使用了继承之后依然不变，参数该怎么传还是怎么传。</li></ol><h3 id="6-4-日志"><a href="#6-4-日志" class="headerlink" title="6.4 日志"></a>6.4 日志</h3><p>OpenFeign 中我们可以通过配置日志，来查看整个请求的配置过程。日志级别一共分为四种：</p><ol><li>NONE:不开启日志，默认就是这个</li><li>BASIC:记录请求方法、URL、响应状态码、执行时间</li><li>HEADERS: 在 BASIC 的基础上，加载请求&#x2F;响应头</li><li>FULL:在 HEADERS 基础上，在增加 body 以及请求元数据</li></ol><p>四种级别，可以通过 Bean 中来配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Openfeign4000Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Openfeign4000Application.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    Logger.Level <span class="hljs-title function_">logger</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最后，在 application.properties 中开启日志级别:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.level.com.ws.api</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><p>重启 OpenFeign，进行测试。</p><h3 id="6-5-数据压缩"><a href="#6-5-数据压缩" class="headerlink" title="6.5 数据压缩"></a>6.5 数据压缩</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#数据压缩</span><br><span class="hljs-comment"># 开启数据请求的数据压缩</span><br><span class="hljs-attr">feign.compression.request.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 开启响应请求的数据压缩</span><br><span class="hljs-attr">feign.compression.response.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 压缩的数据类型</span><br><span class="hljs-attr">feign.compression.request.mime-types</span>=<span class="hljs-string">text/html,application/json</span><br><span class="hljs-comment"># 压缩的数据下限:2048表示，当传输的数据大于2048才会 进行数据压缩</span><br><span class="hljs-attr">feign.compression.request.min-request-size</span>=<span class="hljs-string">2048</span><br></code></pre></td></tr></table></figure><h3 id="6-6-结合-Hystrix-的使用"><a href="#6-6-结合-Hystrix-的使用" class="headerlink" title="6.6 结合 Hystrix 的使用"></a>6.6 结合 Hystrix 的使用</h3><p>Hystrix 中的容错、服务降级等功能在 openFeign 中一样要使用。</p><p>首先，定义服务降级的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//防止请求地址冲突</span><br><span class="hljs-meta">@RequestMapping(&quot;/api-error&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HelloService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser4</span><span class="hljs-params">(Integer id)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByName</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，在 HelloService 中配置服务降级类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;provider&quot;,fallback = HelloServiceFallback.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IUserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，在配置文件配置开启Hystrix</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 开启 openFeign + hystrix</span><br><span class="hljs-attr">feign.hystrix.enabled</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p><strong>方式2：[自定义工厂类实现自定义降级]</strong></p><ol><li>添加 fallbackFactory</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServiceFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;HelloService&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> HelloService <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloService</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error---&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">(String name)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error---&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> User <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser4</span><span class="hljs-params">(Integer id)</span> &#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByName</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br><br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>添加注解属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;provider&quot;,</span><br><span class="hljs-meta">//        fallback = HelloServiceFallback.class,</span><br><span class="hljs-meta">        fallbackFactory = HelloServiceFallbackFactory.class</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5.Hystrix熔断器</title>
    <link href="/2022/05/11/5-Hystrix%E7%86%94%E6%96%AD%E5%99%A8/"/>
    <url>/2022/05/11/5-Hystrix%E7%86%94%E6%96%AD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="5-Hystrix"><a href="#5-Hystrix" class="headerlink" title="5.Hystrix"></a>5.Hystrix</h2><ol><li>基本介绍</li><li>简单实用</li><li>请求命令</li><li>异常处理</li><li>请求缓存</li><li>请求合并</li></ol><h3 id="5-1-基本介绍"><a href="#5-1-基本介绍" class="headerlink" title="5.1 基本介绍"></a>5.1 基本介绍</h3><p>Hystrix 叫做断路器或者熔断器。</p><p>微服务系统中，整个系统出错的概率非常高。因为在这个微服务系统中涉及到的模块太多了<br>每一个模块出错都有可能导致整个服务出错。当所有模块都稳定运行时，整个服务才算稳定运行。</p><p>我们希望当整个系统中，某一个模块无法正常工作时，能通过我们提前配置的一些东西，来使的整个系统正常运行，即单个模块出现问题，不影响整个系统。</p><h3 id="5-2-基本用法"><a href="#5-2-基本用法" class="headerlink" title="5.2 基本用法"></a>5.2 基本用法</h3><p>首先，创建新的springboot模块，然后添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目创建成功，进行如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">hystrix</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">3000</span><br><span class="hljs-attr">eureka.client.service-url.defauleZone</span>=<span class="hljs-string">http://localhost:1111/eureka</span><br></code></pre></td></tr></table></figure><p>然后，在项目启动类添加如下注解，开启断路器,提供 restTemplate：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCircuitBreaker</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hystrix3000Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Hystrix3000Application.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-meta">@Bean</span><br>    RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动类上注解可以使用 @SpringCloudApplication 代替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringCloudApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hystrix3000Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Hystrix3000Application.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-meta">@Bean</span><br>    RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，Hystrix 就配置完成了</p><p>接下来，提供接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在这个方法中，我们将发送一个远程调用，去调用 provider 中提供的 hello 接口</span><br><span class="hljs-comment">     * 但是这个调用可能会失败，</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 在方法上面添加<span class="hljs-doctag">@HystrixCollapserCommand</span> 注解</span><br><span class="hljs-comment">     * 配置 fallbackMethod 属性，表示方法调用失败时的回调方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;error&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/hello&quot;</span>,String.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注意：这个方法名称需要和 上面的回调方法名称一致</span><br><span class="hljs-comment">     * 方法返回值也要和对应的方法一致</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">error</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloService helloService;<br><br><br>    String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> helloService.hello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动成功后，在浏览器请求地址，当请求失败，会进行错误回调</p><h3 id="5-3-请求命令"><a href="#5-3-请求命令" class="headerlink" title="5.3 请求命令"></a>5.3 请求命令</h3><p>请求命令就是以继承的方式来代替前面的注解方式</p><p>我们来自定义一个 <code>HelloCommand</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义 HelloCommand 代替 HystrixCommand 注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HystrixCommand</span>&lt;String&gt; &#123;<br><br>    RestTemplate restTemplate;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">HelloCommand</span><span class="hljs-params">(Setter setter,RestTemplate restTemplate)</span> &#123;<br>        <span class="hljs-built_in">super</span>(setter);<br>        <span class="hljs-built_in">this</span>.restTemplate = restTemplate;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/hello&quot;</span>,String.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    HelloService helloService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> helloService.hello();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HelloCommand</span> <span class="hljs-variable">helloCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloCommand</span>(HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="hljs-string">&quot;hello-command&quot;</span>)), restTemplate);<br>        <span class="hljs-comment">//两种方式：2选一 只会执行一次</span><br>        <span class="hljs-comment">//1.直接执行</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> helloCommand.execute();<br>        System.out.println(execute);<br>        <span class="hljs-comment">//2.先放入队列，然后再执行</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> helloCommand.queue().get();<br>            System.out.println(s);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>只能执行一次</li><li>可以直接执行，也可以先入队，后执行</li></ol><p><strong>通过注解实现异步调用</strong><br>首先定义如下方法，返回 Future<String>:</String></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;error&quot;)</span><br><span class="hljs-keyword">public</span> Future&lt;String&gt; <span class="hljs-title function_">hello2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncResult</span>&lt;String&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/hello&quot;</span>,String.class);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后调用该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">HelloCommand</span> <span class="hljs-variable">helloCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloCommand</span>(HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="hljs-string">&quot;hello-command&quot;</span>)), restTemplate);<br>    <span class="hljs-comment">//两种方式：2选一 只会执行一次</span><br>    <span class="hljs-comment">//1.直接执行</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> helloCommand.execute();<br>    System.out.println(execute);<br>    <span class="hljs-comment">//2.先放入队列，然后再执行</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> helloCommand.queue().get();<br>        System.out.println(s);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过继承的方式使用 Hystrix 如何实现服务容错&#x2F;降级:重写继承类 getFallback 方法即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * run 请求失败的回调</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getFallback</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error-extends&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-异常处理"><a href="#5-4-异常处理" class="headerlink" title="5.4 异常处理"></a>5.4 异常处理</h3><p>就是当发起服务调用的时候，如果不是 Provider 的原因，请求调用失败，而是 Consumer 中<br>本身代码有问题而导致请求失败，consumer 抛出异常，会自动降价，只不过这个时候，我们还需要知道到底是哪里出现了异常</p><p>如下实例代码，如果 hello 方法中执行时抛出异常，一样也会进行服务降级，进入到 error 方法中，在方法中我们可以获取到异常的详细信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">error</span><span class="hljs-params">(Throwable throwable)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是注解方法，也可以通过继承的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * run 请求失败的回调</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getFallback</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error-extends:&quot;</span>+getExecutionException().getMessage();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是通过继承的方式来做 Hystrix ，在 getFallback 方法中，我们可以执行此方法来获取错误信息</p><p>另一种可能性(了解)：如果抛出异常，我们希望直接抛出，不要服务降级。那么只需要配置忽略某个异常即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;error&quot;,ignoreExceptions = &#123;ArithmeticException.class&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/hello&quot;</span>,String.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个配置表示当方法抛出 这个异常的时候，不要进行服务降级，直接将错误抛出</p><h3 id="5-5-请求缓存"><a href="#5-5-请求缓存" class="headerlink" title="5.5 请求缓存"></a>5.5 请求缓存</h3><p>请求缓存就是在 consumer 中调用同一个接口，如果参数相同 则可以使用之前缓存下来的数据</p><p>首先修改 provider 中的接口，检测缓存配置是否生效<br>然后再 hystrix 的请求方法中添加如下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 表示该方法的请求结果会被缓存起来，默认情况下缓存的key就是方法的参数缓存的 value 就是方法的返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;error&quot;,ignoreExceptions = &#123;ArithmeticException.class&#125;)</span><br><span class="hljs-meta">@CacheResult</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/hello&quot;</span>,String.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完成之后，缓存配置还未生效，一般来说，我们使用缓存，都有一个缓存生命周期这个概念</p><p>我们需要初始化 hystrixRequestContext，初始化完成后，缓存开始生效，<br>HystrixRequestContext close 之后，缓存失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">HystrixRequestContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> HystrixRequestContext.initializeContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> helloService.hello();<br>    hello = helloService.hello();<br>    context.close();<br>    <span class="hljs-keyword">return</span> hello;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>在 context 关闭之前，缓存是有效的，关闭之后缓存失效，也就是说，访问一次接口，provider之后被调用一次，第二次使用缓存，如果再次调用接口，那么之前缓存的数据是失效的</p><p>默认情况下，缓存的key就是所调用方法的参数，如果参数有多个，就是多个参数组合起来作为缓存的key。但是如果有多个参数，但是只想使用其中一个作为key，那么可以通过 @cacheKey 注解来解决<br>，在方法参数位置添加。</p><p>虽然有两个参数，但是缓存以第一个参数为准。两次请求中，只要 name 一样，即使 age 不一样，第二次请求也可以使用第一次缓存的结果。</p><p>另外还有一个注解：<code>@CacheRemove()</code>。再做数据缓存时，如果还有一个数据删除的方法，我们一般处理删除数据库中的数据，还希望顺带删除缓存中的数据。</p><p>@CacheRemove使用时必须指定 commandKey 属性，也就是缓存方法的名字，指定了 commandKey，@CacheRemove<br>才能删除缓存中的数据</p><p>如下案例：<br>首先，provider 提供接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/cache&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">cache</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello cloud &quot;</span>+name + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：缓存请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试缓存</span><br><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;getCacheError&quot;,commandKey = &quot;get-cache&quot;)</span><br><span class="hljs-meta">@CacheResult</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCache</span><span class="hljs-params">(String name,Integer age)</span>&#123;<br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/cache?name=&#123;1&#125;&quot;</span>,String.class,name);<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步：删除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除缓存</span><br><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;getCacheError&quot;)</span><br><span class="hljs-meta">@CacheRemove(commandKey = &quot;get-cache&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteCache</span><span class="hljs-params">(String name,Integer age)</span>&#123;<br>    <span class="hljs-comment">//删除数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete cache success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第四步：测试缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getCache-no-delete&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCacheNoDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">HystrixRequestContext</span> <span class="hljs-variable">hystrixRequestContext</span> <span class="hljs-operator">=</span> HystrixRequestContext.initializeContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> helloService.getCache(<span class="hljs-string">&quot;沐沐&quot;</span>, <span class="hljs-number">18</span>);<br>    System.out.println(cache);<br><br>    Thread.sleep(<span class="hljs-number">3000</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cache2</span> <span class="hljs-operator">=</span> helloService.getCache(<span class="hljs-string">&quot;沐沐&quot;</span>, <span class="hljs-number">18</span>);<br>    System.out.println(cache2);<br><br>    hystrixRequestContext.close();<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/getCache&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">HystrixRequestContext</span> <span class="hljs-variable">hystrixRequestContext</span> <span class="hljs-operator">=</span> HystrixRequestContext.initializeContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> helloService.getCache(<span class="hljs-string">&quot;沐沐&quot;</span>, <span class="hljs-number">18</span>);<br>    System.out.println(cache);<br><br>    helloService.deleteCache(<span class="hljs-string">&quot;沐沐&quot;</span>,<span class="hljs-number">18</span>);<br>    Thread.sleep(<span class="hljs-number">3000</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cache2</span> <span class="hljs-operator">=</span> helloService.getCache(<span class="hljs-string">&quot;沐沐&quot;</span>, <span class="hljs-number">18</span>);<br>    System.out.println(cache2);<br><br>    hystrixRequestContext.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@CacheRemove</code>在使用的时候，必须指定 commandKey 属性，commandKey<br>其实就是方法的名字，制定了 commandKey，才能成功删除数据</p><p><img src="/image-20220511203610926.png" alt="image-20220511203610926"></p><p>继承方式实现 缓存请求和缓存删除<br>只需要重写 getCacheKey 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回 cacheKey</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getCacheKey</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用时候，一定记得初始化 HystrixRequestContext</p><h3 id="5-6-请求合并"><a href="#5-6-请求合并" class="headerlink" title="5.6 请求合并"></a>5.6 请求合并</h3><p>如果 consumer 中，频繁调用 provider 中同一个接口，在调用时，只是参数不一样，那么这种情况，<br>我们就可以将多个请求合并成一个，可以有效提高请求发送的效率。</p><p>首先，我们在 provider 中提供一个请求合并的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 假设 consumer 传递过来多个id的格式为: 1,2,3,4</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;ids&#125;&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsersByIds</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String ids)</span>&#123;<br>    String[] split = ids.split(<span class="hljs-string">&quot;,&quot;</span>);<br>    List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span>(String s:split)&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(Integer.valueOf(s));<br>        users.add(user);<br>    &#125;<br>    <span class="hljs-keyword">return</span> users;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个接口既可以处理合并之后的请求，也可以处理单个请求</p><p>然后，在 Hystrix 中定义 UserService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsersByIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>&#123;<br>        User[] users = restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/user/&#123;1&#125;&quot;</span>, User[].class, StringUtils.join(ids, <span class="hljs-string">&quot;,&quot;</span>));<br>        <span class="hljs-keyword">return</span> Arrays.asList(users);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来定义 UserBatchCommand，相当于我们之前定义的 HelloCommand“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBatchCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HystrixCommand</span>&lt;List&lt;User&gt;&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; ids;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserBatchCommand</span><span class="hljs-params">(List&lt;Integer&gt; ids, UserService userService)</span> &#123;<br>        <span class="hljs-built_in">super</span>(HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="hljs-string">&quot;batchCommand&quot;</span>)).andCommandKey(HystrixCommandKey.Factory.asKey(<span class="hljs-string">&quot;batchKey&quot;</span>)));<br>        <span class="hljs-built_in">this</span>.ids = ids;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> List&lt;User&gt; <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> userService.getUsersByIds(ids);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，定义最关键的请求合并方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserCollapseCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HystrixCollapser</span>&lt;List&lt;User&gt;,User,Integer&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserCollapseCommand</span><span class="hljs-params">(UserService userService, Integer id)</span> &#123;<br>        <span class="hljs-built_in">super</span>(HystrixCollapser.Setter.withCollapserKey(<br>                HystrixCollapserKey.Factory.asKey(<span class="hljs-string">&quot;UserCollapseCommand&quot;</span>)<br>                ).andCollapserPropertiesDefaults(<br>                HystrixCollapserProperties.Setter().withTimerDelayInMilliseconds(<span class="hljs-number">200</span>)<br>                )<br>        );<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取请求的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getRequestArgument</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求合并的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> collection</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> HystrixCommand&lt;List&lt;User&gt;&gt; <span class="hljs-title function_">createCommand</span><span class="hljs-params">(Collection&lt;CollapsedRequest&lt;User, Integer&gt;&gt; collection)</span> &#123;<br>        List&lt;Integer&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(collection.size());<br>        collection.forEach(item-&gt;&#123;<br>            ids.add(item.getArgument());<br>        &#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserBatchCommand</span>(ids,userService);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求结果分发</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> users</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> collection</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mapResponseToRequests</span><span class="hljs-params">(List&lt;User&gt; users, Collection&lt;CollapsedRequest&lt;User, Integer&gt;&gt; collection)</span> &#123;<br><br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>        collection.forEach(item-&gt;&#123;<br>            item.setResponse(users.get(count.getAndIncrement()));<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后结果调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 假设 consumer 传递过来多个id的格式为: 1,2,3,4</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;ids&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsersByIds</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String ids)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ids=&gt;&quot;</span>+ids);<br>        String[] split = ids.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String s:split)&#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            user.setId(Integer.valueOf(s));<br>            users.add(user);<br>        &#125;<br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：发送 四次请求需要时间非常近 200ms 之内，才能在同一批次之内</p><p><strong>通过注解解决请求合并:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@HystrixCommand</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsersByIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>&#123;<br>        User[] users = restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/user/&#123;1&#125;&quot;</span>, User[].class, StringUtils.join(ids, <span class="hljs-string">&quot;,&quot;</span>));<br>        <span class="hljs-keyword">return</span> Arrays.asList(users);<br>    &#125;<br><br>    <span class="hljs-meta">@HystrixCollapser(</span><br><span class="hljs-meta">            batchMethod = &quot;getUsersByIds&quot;,</span><br><span class="hljs-meta">            collapserProperties = &#123;</span><br><span class="hljs-meta">                    @HystrixProperty(name = &quot;timerDelayInMilliseconds&quot;,value = &quot;200&quot;)</span><br><span class="hljs-meta">            &#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">public</span> Future&lt;User&gt; <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的核心是 @HystrixCollapser 注解，在这个注解中，指定批处理方法即可</p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//请求合并</span><br><span class="hljs-meta">@GetMapping(&quot;/hello6&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">HystrixRequestContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> HystrixRequestContext.initializeContext();<br><br>    Future&lt;User&gt; q1 = userService.getUserById(<span class="hljs-number">99</span>);<br>    Future&lt;User&gt; q2 = userService.getUserById(<span class="hljs-number">98</span>);<br>    Future&lt;User&gt; q3 = userService.getUserById(<span class="hljs-number">97</span>);<br>    Future&lt;User&gt; q4 = userService.getUserById(<span class="hljs-number">96</span>);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> q1.get();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> q2.get();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u3</span> <span class="hljs-operator">=</span> q3.get();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u4</span> <span class="hljs-operator">=</span> q4.get();<br><br>    System.out.println(u1);<br>    System.out.println(u2);<br>    System.out.println(u3);<br>    System.out.println(u4);<br><br>    context.close();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4.Consul注册中心</title>
    <link href="/2022/05/11/4-Consul%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <url>/2022/05/11/4-Consul%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h2 id="4-Consul"><a href="#4-Consul" class="headerlink" title="4.Consul"></a>4.Consul</h2><p>在 Spring Cloud 中，大部分组件都有备选方案，例如注册中心，除了常见的Eureka之外，像 zookeeper 我们也可以直接使用，还有另外一个就是consul</p><p>consul 是 HashiCorp 公司推出来的开源产品。主要提供了：</p><ul><li>服务发现</li><li>服务隔离</li><li>服务配置</li></ul><p>相比于 Eureka 和 zookeeper ，Consul 配置更加一站式，因为它内置了很多微服务常见的需求：服务发现与注册，分布式一致性协议的实现，健康检查，键值对存储，多数据中心等<br>我们不再需要借助第三方的组件来实现这些功能。</p><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><p>不同与 Eureka，consul 使用 Go语言 开发，使用Consul需要先安装软件。</p><p>在 Linux 中，首先执行如下命令下载 consul：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://releases.hashicrop.com/consul/1.6.2/consul_1.6.2_linux_amd64.zip<br></code></pre></td></tr></table></figure><p>然后解压下载文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unzip filename<br></code></pre></td></tr></table></figure><p>解压完成之后，在当前目录下就可以看到consul文件，执行启动命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./consul agent -dev -ui -node=consul-dev -client=192.168.204.1<br></code></pre></td></tr></table></figure><p>浏览器输入: <a href="http://192.168.204.1:8500/">http://192.168.204.1:8500</a><br><img src="/image-20220511202154631.png" alt="image-20220511202154631"></p><p>启动成功之后，在物理机中，我们可以直接访问consul后台管理界面（注意：这个访问需要确保8500端口可用，或者直接关闭防火墙）</p><h3 id="4-2-consul-使用"><a href="#4-2-consul-使用" class="headerlink" title="4.2 consul 使用"></a>4.2 consul 使用</h3><p>简单看一个注册消费的案例。</p><p>首先，创建一个服务提供者，就是一个普通的springboot项目，添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>项目创建成功后，添加如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">consul-provider</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">2000</span><br><br><span class="hljs-attr">spring.cloud.consul.host</span>=<span class="hljs-string">192.168.204.1</span><br><span class="hljs-attr">spring.cloud.consul.port</span>=<span class="hljs-string">8500</span><br><span class="hljs-attr">spring.cloud.consul.discovery.service-name</span>=<span class="hljs-string">consul-provider</span><br></code></pre></td></tr></table></figure><p>最后添加一个测试接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello1&quot;)</span><br>    String <span class="hljs-title function_">hello1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在启动类添加注解,开启服务发现的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsulProviderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConsulProviderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就是启动项目，访问consul后台管理页面，表示注册成功<br><img src="/image-20220511202237682.png" alt="image-20220511202237682"></p><h3 id="4-3consul-集群注册"><a href="#4-3consul-集群注册" class="headerlink" title="4.3consul 集群注册"></a>4.3consul 集群注册</h3><p>为了区分集群中哪一个 provider 提供的服务，我们修改一下 consul 中的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    Integer port;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello1&quot;)</span><br>    String <span class="hljs-title function_">hello1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello-&gt;&quot;</span>+port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改完成后，对项目进行打包，打包成功，启动两个 provider</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar provider.jar --server.port=2000<br>java -jar provider.jar --server.port=2001<br></code></pre></td></tr></table></figure><p>启动成功，再去访问consul后台管理，就可以看到两个实例</p><p><img src="/image-20220511202328263.png" alt="image-20220511202328263"></p><h3 id="7-4-消费"><a href="#7-4-消费" class="headerlink" title="7.4 消费"></a>7.4 消费</h3><p>首先创建一个消费实例，创建方式和 provider 一致</p><p>创建成功后，添加如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">consul-consumer</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">2002</span><br><span class="hljs-attr">spring.cloud.consul.host</span>=<span class="hljs-string">192.168.204.1</span><br><span class="hljs-attr">spring.cloud.consul.port</span>=<span class="hljs-string">8500</span><br><span class="hljs-comment"># 注册到 consul</span><br><span class="hljs-attr">spring.cloud.consul.discovery.register</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.cloud.consul.discovery.service-name</span>=<span class="hljs-string">consul-consumer</span><br></code></pre></td></tr></table></figure><p>开启服务发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsulConsumerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConsulConsumerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最后，提供一个服务调用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    LoadBalancerClient loadBalancerClient;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> loadBalancerClient.choose(<span class="hljs-string">&quot;consul-provider&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务地址:&quot;</span>+service.getUri());<br>        System.out.println(<span class="hljs-string">&quot;服务名称:&quot;</span>+service.getServiceId());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">forObject</span> <span class="hljs-operator">=</span> restTemplate.getForObject(service.getUri+<span class="hljs-string">&quot;/hello&quot;</span>, String.class);<br>        System.out.println(forObject);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello consumer&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里，我们通过 loadBalancerClient 实例，可以获取要调用的 ServiceInstance。获取到调用地址之后，再用 RestTemplate 去调用。</p><p>然后，启动项目，浏览器输入 <a href="http://localhost:2002/hello">http://localhost:2002/hello</a> ，查看请求结果，这个请求自带负载均衡功能。</p>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3.RestTemplate</title>
    <link href="/2022/05/11/3-RestTemplate/"/>
    <url>/2022/05/11/3-RestTemplate/</url>
    
    <content type="html"><![CDATA[<h2 id="3-1-服务注册"><a href="#3-1-服务注册" class="headerlink" title="3.1 服务注册"></a>3.1 服务注册</h2><p>服务注册就是把一个微服务注册到 Eureka Server 上，这样，当其他服务需要调用该服务时，只需要从<br>Eureka Server 上查询该服务的信息即可。</p><p>这里我们创建一个 provider，作为我们的服务提供者，创建项目时，选择 Eureka Client 依赖，这样，当服务创建成功后，简单配置一下，就可以被注册到 Eureka Server 上了：</p><p><img src="/image-20220511185810025.png" alt="image-20220511185810025"></p><p>项目创建成功后，我们只需要在 <code>application.properties</code> 中配置一下项目的注册地址即可。注册地址的配置，和 <code>Eureka Server</code> 集群的配置很像。配置如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">provider</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">1113</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://localhost:1111/eureka</span><br></code></pre></td></tr></table></figure><p>三行配置，分别表示当前服务的名称、端口号以及服务地址。<br>接下来，启动 Eureka Server，待服务注册中心启动成功后，再启动 provider。<br>两者都启动成功后，浏览器输入 <a href="http://localhost:1111，就可以查看">http://localhost:1111，就可以查看</a> provider 的注册信息：</p><h2 id="3-2服务消费"><a href="#3-2服务消费" class="headerlink" title="3.2服务消费"></a>3.2服务消费</h2><h3 id="3-2-1基本用法"><a href="#3-2-1基本用法" class="headerlink" title="3.2.1基本用法"></a>3.2.1基本用法</h3><p>首先在 <code>provider</code> 中提供一个接口，然后创建一个新的 <code>consumer</code> 项目，消费这个接口。<br>在 <code>provider</code> 中，提供一个 <code>hello</code> 接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello ws&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，创建一个 <code>consumer</code> 项目，<code>consumer</code> 项目中，去消费 <code>provider</code> 提供的接口。<code>consumer</code> 要能够获取到 <code>provider</code> 这个接口的地址，他就需要去 <code>Eureka Server</code> 中查询，如果直接在 <code>consumer</code> 中写死 <code>provider</code> 地址，意味着这两个服务之间的耦合度就太高了，我们要降低耦合度。首先我们来看一个写死的调用。</p><p>创建一个 consumer 项目，添加 web 和 eureka client 依赖：</p><p><img src="/image-20220511190117551.png" alt="image-20220511190117551"></p><p>创建完成后，我们首先也在 <code>application.properties</code> 中配置一下注册信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">consumer</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">1115</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://localhost:1111/eureka</span><br></code></pre></td></tr></table></figure><p>配置完成后，假设我们现在想在 <code>consumer</code> 中调用 <code>provider</code> 提供的服务，我们可以直接将调用写死，就是说，整个调用过程不会涉及到 <code>Eureka Server</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:1113/hello&quot;</span>);<br>        con = (HttpURLConnection) url.openConnection();<br>        <span class="hljs-keyword">if</span> (con.getResponseCode() == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">InputStreamReader</span>(con.getInputStream()));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br>            br.close();<br>            <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>    e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>       e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一段利用了 <code>HttpUrlConnection</code> 来发起的请求，请求中 <code>provider</code> 的地址写死了，意味着 <code>provider</code>和 <code>consumer</code> 高度绑定在一起，这个不符合微服务的思想。</p><p>要改造它，我们可以借助 Eureka Client 提供的 DiscoveryClient 工具，利用这个工具，我们可以根据服务名从 Eureka Server 上查询到一个服务的详细信息，改造后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/costumer/hello2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">()</span>&#123;<br>    List&lt;ServiceInstance&gt; serviceList = discoveryClient.getInstances(<span class="hljs-string">&quot;provider&quot;</span>);<br>    <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> serviceList.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> instance.getHost();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> instance.getPort();<br><br>    <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sb.append(<span class="hljs-string">&quot;http://&quot;</span>).append(host).append(<span class="hljs-string">&quot;:&quot;</span>).append(port).append(<span class="hljs-string">&quot;/hello&quot;</span>);<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(sb.toString());<br>        connection = (HttpURLConnection) url.openConnection();<br>        <span class="hljs-keyword">if</span>(connection.getResponseCode()==<span class="hljs-number">200</span>)&#123;<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(connection.getInputStream()));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br>            br.close();<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，DiscoveryClient 查询到的服务列表是一个集合，因为服务在部署的过程中，可能是集群化部<br>署，集合中的每一项就是一个实例。</p><p>这里我们可以稍微展示一下集群化部署。</p><p>首先，修改 <code>provider</code> 中的 hello 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    Integer port;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello ws:&quot;</span> + port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为我一会儿会启动多个 provider 实例，多个 provider 实例的端口不同，为了区分调用时到底是哪一个provider 提供的服务，这里在接口返回值中返回端口。<br>修改完成后，对 provider 进行打包。provider 打包成功之后，我们在命令行启动两个 provider 实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar provider-0.0.1-SNAPSHOT.jar --server.port=1113<br>java -jar provider-0.0.1-SNAPSHOT.jar --server.port=1116<br></code></pre></td></tr></table></figure><p>启动完成后，检查 Eureka Server 上，这两个 provider 是否成功注册上来。</p><p>注册成功后，在 consumer 中再去调用 provider，DiscoveryClient 集合中，获取到的就不是一个实例了，而是两个实例。这里我们可以手动实现一个负载均衡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-meta">@GetMapping(&quot;/hello3&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello3</span><span class="hljs-params">()</span> &#123;<br>List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="hljs-string">&quot;provider&quot;</span>);<br><span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> list.get((count++) % list.size());<br><span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> instance.getHost();<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> instance.getPort();<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sb.append(<span class="hljs-string">&quot;http://&quot;</span>)<br>.append(host)<br>.append(<span class="hljs-string">&quot;:&quot;</span>)<br>.append(port)<br>.append(<span class="hljs-string">&quot;/hello&quot;</span>);<br><span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(sb.toString());<br>con = (HttpURLConnection) url.openConnection();<br><span class="hljs-keyword">if</span> (con.getResponseCode() == <span class="hljs-number">200</span>) &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span><br><span class="hljs-title class_">InputStreamReader</span>(con.getInputStream()));<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br>br.close();<br><span class="hljs-keyword">return</span> s;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在从集合中，获取数据时，通过一个小小举动，就可以实现线性负载均衡。</p><h3 id="3-2-2升级改造"><a href="#3-2-2升级改造" class="headerlink" title="3.2.2升级改造"></a>3.2.2升级改造</h3><p>从两个方面进行改造：</p><ol><li>Http 调用</li><li>负载均衡<br>Http 调用，我们使用 Spring 提供的 RestTemplate 来实现。<br>首先，在当前服务中，提供一个 RestTemplate 的实例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    SpringApplication.run(ConsumerApplication.class, args);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    RestTemplate <span class="hljs-title function_">restTemplateOne</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，在 Http 调用时，不再使用 HttpUrlConnection，而是直接使用 RestTemplate：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>RestTemplate restTemplate;<br><span class="hljs-meta">@Autowired</span><br>DiscoveryClient discoveryClient;<br><span class="hljs-meta">@GetMapping(&quot;/hello2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">()</span> &#123;<br>    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="hljs-string">&quot;provider&quot;</span>);<br>    <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> instance.getHost();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> instance.getPort();<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    sb.append(<span class="hljs-string">&quot;http://&quot;</span>)<br>    .append(host)<br>    .append(<span class="hljs-string">&quot;:&quot;</span>)<br>    .append(port)<br>    .append(<span class="hljs-string">&quot;/hello&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> restTemplate.getForObject(sb.toString(), String.class);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p>用 RestTemplate ，一行代码就实现了 Http 调用。<br>接下来，使用 Ribbon 来快速实现负载均衡。<br>首先，我们需要给 RestTemplate 实例添加一个 @LoadBalanced 注解，开启负载均衡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br>RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的 RestTemplate 就自动具备了负载均衡的功能。<br>此时的调用代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;restTemplate&quot;)</span><br>RestTemplate restTemplate;<br><span class="hljs-meta">@GetMapping(&quot;/hello3&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello3</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/hello&quot;</span>, String.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>Java 中关于 Http 请求的工具实际上非常多，自带的 HttpUrlConnection，古老的 HttpClient，后起之秀 OkHttp 等，除了这些之外，还有一个好用的工具–RestTemplate，这是 Spring 中就开始提供的Http 请求工具，不过很多小伙伴们可能是因为 Spring Cloud 才听说它。今天我们就来聊一聊这个RestTemplate。</p><h2 id="3-3RestTemplate"><a href="#3-3RestTemplate" class="headerlink" title="3.3RestTemplate"></a>3.3RestTemplate</h2><p>RestTemplate 是从 Spring3.0 开始支持的一个 Http 请求工具，这个请求工具和 Spring Boot 无关，更和 Spring Cloud 无关。RestTemplate 提供了常见的 REST 请求方法模板，例如 GET、POST、PUT、DELETE 请求以及一些通用的请求执行方法 exchange 和 execute 方法。</p><p>RestTemplate 本身实现了 RestOperations 接口，而在 RestOperations 接口中，定义了常见的RESTful 操作，这些操作在 RestTemplate 中都得到了很好的实现。</p><h3 id="3-3-1-GET"><a href="#3-3-1-GET" class="headerlink" title="3.3.1 GET"></a>3.3.1 GET</h3><p>首先我们在 provider 中定义一个 rest-get 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/rest-get&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello &quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们在 consumer 去访问这个接口，这个接口是一个 GET 请求，所以，访问方式，就是调用<br>RestTemplate 中的 GET 请求。可以看到，在 RestTemplate 中，关于 GET 请求，一共有如下两大类方法：</p><p><img src="/image-20220511194650274.png" alt="image-20220511194650274"></p><p>这两大类方法实际上是重载的，唯一不同的，就是返回值类型。</p><p>getForObject 返回的是一个对象，这个对象就是服务端返回的具体值。getForEntity 返回的是一个<br>ResponseEntity，这个ResponseEntity 中除了服务端返回的具体数据外，还保留了 Http 响应头的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/costumer/use-rest-get&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useRestGet</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/rest-get?name=&#123;1&#125;&quot;</span>, String.class,<span class="hljs-string">&quot;mm&quot;</span>);<br>    ResponseEntity&lt;String&gt; entity = restTemplate.getForEntity(<span class="hljs-string">&quot;http://provider/rest-get?name=&#123;1&#125;&quot;</span>, String.class,<span class="hljs-string">&quot;mm&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;object-&gt;&quot;</span>);<br>    System.out.println(obj);<br>    System.out.println(<span class="hljs-string">&quot;entity-&gt;&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;body-&gt;&quot;</span>+entity.getBody());<br>    System.out.println(<span class="hljs-string">&quot;statue-&gt;&quot;</span>+entity.getStatusCode());<br>    System.out.println(<span class="hljs-string">&quot;code-&gt;&quot;</span>+entity.getStatusCodeValue());<br><br>    <span class="hljs-comment">//获取请求头</span><br>    System.out.println(<span class="hljs-string">&quot;header-&gt;&quot;</span>);<br>    <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> entity.getHeaders();<br>    Set&lt;String&gt; keySet = headers.keySet();<br>    keySet.forEach(k-&gt;&#123; System.out.println(k+<span class="hljs-string">&quot;-&gt;&quot;</span>+headers.get(k)); &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里大家可以看到，getForObject 直接拿到了服务的返回值，getForEntity 不仅仅拿到服务的返回值，还拿到 http 响应的状态码。然后，启动 Eureka Server、provider 以及 consumer ，访问 consumer 中的 hello4 接口，既可以看到请求结果。</p><p>看清楚两者的区别之后，接下来看下两个各自的重载方法，getForObject 和 getForEntity 分别有三个重载方法，两者的三个重载方法基本都是一致的。所以，这里，我们主要看其中一种。三个重载方法，<br>其实代表了三种不同的传参方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/costumer/rest-get-three&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useRestGetTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>    restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/rest-get?name=&#123;1&#125;&quot;</span>, String.class,<span class="hljs-string">&quot;mm&quot;</span>);<br><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;温笙&quot;</span>);<br>    restTemplate.getForObject(<span class="hljs-string">&quot;http://provider/rest-get?name=&#123;name&#125;&quot;</span>, String.class,map);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://provider/rest-get?name=&quot;</span>+ URLEncoder.encode(<span class="hljs-string">&quot;温笙&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> URI.create(url);<br>    restTemplate.getForObject(uri,String.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是我们说的三种不同的传参方式。</p><h3 id="3-3-2-POST"><a href="#3-3-2-POST" class="headerlink" title="3.3.2 POST"></a>3.3.2 POST</h3><p>首先在 provider 中提供两个 POST 接口，同时，因为 POST 请求可能需要传递 JSON，所以，这里我们创建一个普通的 Maven 项目作为 commons 模块，然后这个 commons 模块被 provider 和<br>consumer 共同引用，这样我们就可以方便的传递 JSON 了。</p><p>commons 模块创建成功后，首先在 commons 模块中添加 User 对象，然后该模块分别被 provider 和 consumer 引用。<br>然后，我们在 provider 中，提供和两个 POST 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/post/user1&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">addUser1</span><span class="hljs-params">(User user)</span>&#123;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br><br><span class="hljs-comment">/**JSON*/</span><br><span class="hljs-meta">@PostMapping(&quot;/post/user2&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">addUser2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里定义了两个 User 添加的方法，两个方法代表了两种不同的传参方式。第一种方法是以 key&#x2F;value<br>形式来传参，第二种方法是以 JSON 形式来传参。<br>定义完成后，接下来，我们在 consumer 中调用这两个 POST 接口。</p><p><img src="/image-20220511200818877.png" alt="image-20220511200818877"></p><p>可以看到，这里的 post 和前面的 get 非常像，只是多出来了三个方法，就是 postForLocation，另外两个 postForObject 和 postForEntiy 和前面 get 基本一致，所以这里我们主要来看 postForObject，看完之后，我们再来看这个额外的 <code>postForLocation</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**POST*/</span><br><span class="hljs-meta">@GetMapping(&quot;/rest/post&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restPost</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// key value</span><br>    MultiValueMap&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;();<br>    map.add(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;ws&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> restTemplate.postForObject(<span class="hljs-string">&quot;http://provider/post/user1&quot;</span>, map, User.class);<br>    System.out.println(user1);<br><br>    <span class="hljs-comment">// json</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> restTemplate.postForObject(<span class="hljs-string">&quot;http://provider/post/user2&quot;</span>, user1, User.class);<br>    System.out.println(user2);<br>&#125;<br></code></pre></td></tr></table></figure><p>post 参数到底是 key&#x2F;value 形式还是 json 形式，主要看第二个参数，如果第二个参数是<br>MultiValueMap ，则参数是以 key&#x2F;value 形式来传递的，如果是一个普通对象，则参数是以 json 形式来传递的。</p><p>最后再看看一下 postForLocation 。有的时候，当我执行完一个 post 请求之后，立马要进行重定向，一个非常常见的场景就是注册，注册是一个 post 请求，注册完成之后，立马重定向到登录页面去登<br>录。对于这种场景，我们就可以使用 postForLocation。</p><p>首先我们在 provider 上提供一个用户注册接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/register&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://provider/loginPage?username=&quot;</span>+user.getUsername();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/loginPage&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginPage</span><span class="hljs-params">(String username)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login=&gt;&quot;</span>+username;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，这里的 post 接口，响应一定是 302，否则 postForLocation 无效。<br><strong>注意，重定向的地址，一定要写成绝对路径，不要写相对路径，否则在 consumer 中调用时会出问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/post-location&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postLocation</span><span class="hljs-params">()</span>&#123;<br>    MultiValueMap&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;();<br>    map.add(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;ws&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> restTemplate.postForLocation(<span class="hljs-string">&quot;http://provider/register&quot;</span>, map);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> restTemplate.getForObject(uri, String.class);<br>    System.out.println(object);<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是 postForLocation ，调用该方法返回的是一个 Uri，这个 Uri 就是重定向的地址（里边也包含了重定向的参数），拿到 Uri 之后，就可以直接发送新的请求了。</p><h3 id="3-3-3PUT"><a href="#3-3-3PUT" class="headerlink" title="3.3.3PUT"></a>3.3.3PUT</h3><p>PUT 请求比较简单，重载的方法也比较少。<br>我们首先在 provider 中提供一个 PUT 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/update/user1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser1</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>&#125;<br><br><span class="hljs-meta">@PutMapping(&quot;/update/user2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，PUT 接口传参其实和 POST 很像，也接受两种类型的参数，key&#x2F;value 形式以及 JSON 形式。<br>在 consumer 中，我们来调用该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/put&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putKey</span><span class="hljs-params">()</span>&#123;<br>    MultiValueMap&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;();<br>    map.add(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;ws&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">2</span>);<br>    restTemplate.put(<span class="hljs-string">&quot;http://provider/update/user1&quot;</span>,map);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    restTemplate.put(<span class="hljs-string">&quot;http://provider/update/user2&quot;</span>, user);<br>&#125;<br></code></pre></td></tr></table></figure><p>consumer 中的写法基本和 post 类似，也是两种方式，可以传递两种不同类型的参数。</p><h3 id="3-3-4-DELETE"><a href="#3-3-4-DELETE" class="headerlink" title="3.3.4 DELETE"></a>3.3.4 DELETE</h3><p>DELETE 也比较容易，我们有两种方式来传递参数，key&#x2F;value 形式或者 PathVariable（参数放在路径中），首先我们在 provider 中定义两个 DELETE 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/delete/user1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser1</span><span class="hljs-params">(Integer id)</span>&#123;<br>    System.out.println(id);<br>&#125;<br><br><span class="hljs-meta">@DeleteMapping(&quot;/delete/user2/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>    System.out.println(id);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 consumer 中调用这两个删除的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/del&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">()</span>&#123;<br>    restTemplate.delete(<span class="hljs-string">&quot;http://provider/delete/user1?id=&#123;1&#125;&quot;</span>,<span class="hljs-number">99</span>);<br>    restTemplate.delete(<span class="hljs-string">&quot;http://provider/delete/user2/&#123;1&#125;&quot;</span>,<span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>delete 中参数的传递，也支持 map，这块实际上和 get 是一样的。</p><h2 id="3-4-客户端负载均衡"><a href="#3-4-客户端负载均衡" class="headerlink" title="3.4 客户端负载均衡"></a>3.4 客户端负载均衡</h2><p>客户端负载均衡就是相对服务端负载均衡而言的。<br>服务端负载均衡，就是传统的 Nginx 的方式，用 Nginx 做负载均衡，我们称之为服务端负载均衡：</p><p><img src="/image-20220511201334587.png" alt="image-20220511201334587"></p><p>这种负载均衡，我们称之为服务端负载均衡，它的一个特点是，就是调用的客户端并不知道具体是哪一<br>个 Server 提供的服务，它也不关心，反正请求发送给 Nginx，Nginx 再将请求转发给 Tomcat，客户端只需要记着 Nginx 的地址即可。</p><p>客户端负载均衡则是另外一种情形：</p><p><img src="/image-20220511201401646.png" alt="image-20220511201401646"></p><p>客户端负载均衡，就是调用的客户端本身是知道所有 Server 的详细信息的，当需要调用 Server 上的接口的时候，客户端从自身所维护的 Server 列表中，根据提前配置好的负载均衡策略，自己挑选一个<br>Server 来调用，此时，客户端知道它所调用的是哪一个 Server。</p><p>在 RestTemplate 中，要想使用负载均衡功能，只需要给 RestTemplate 实例上添加一个<br>@LoadBalanced 注解即可，此时，RestTemplate 就会自动具备负载均衡功能，这个负载均衡就是客户端负载均衡。</p><h2 id="3-5-负载均衡原理"><a href="#3-5-负载均衡原理" class="headerlink" title="3.5 负载均衡原理"></a>3.5 负载均衡原理</h2><p>在 Spring Cloud 中，实现负载均衡非常容易，只需要添加 @LoadBalanced 注解即可。只要添加了该注解，一个原本普普通通做 Rest 请求的工具 RestTemplate 就会自动具备负载均衡功能，这个是怎么实现的呢？<br>整体上来说，这个功能的实现就是三个核心点：</p><ol><li>从 Eureka Client 本地缓存的服务注册信息中，选择一个可以调用的服务</li><li>根据 1 中所选择的服务，重构请求 URL 地址</li><li>将 1、2 步的功能嵌入到 RestTemplate 中</li></ol>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2.Eureka</title>
    <link href="/2022/05/11/2-Eureka/"/>
    <url>/2022/05/11/2-Eureka/</url>
    
    <content type="html"><![CDATA[<h2 id="2-Eureka"><a href="#2-Eureka" class="headerlink" title="2.Eureka"></a>2.Eureka</h2><p><strong>注册中心</strong></p><p>Eureka 是 Spring Cloud 中的注册中心，类似于 Dubbo 中的 zookeeper ，那么到底什么是注册中心，我们为什么需要注册中心》</p><p>我们首先来看一个传统的单体应用：</p><p><img src="/image-20220511172825438.png" alt="image-20220511172825438"></p><p>在单体应用中，所有的业务都集中在一个项目中，当用户从浏览器发起请求时，直接由前端发起请求给后端，后端调用业务逻辑，给前端请求作出响应，完成一次调用。整个调用过程是一条直线，不需要服务之家你的中转，所以没有必要引入注册中心。</p><p>随着公司的项目越来越大，我们会将系统进行拆分，例如一个电商系统，可以拆分成订单模块、物流模块等等，这样，当用户发起请求，就需要各个模块之间进行协作，这样不可避免的要进行模块之间的调用。此时，我们的系统就会发生变化：</p><p><img src="/image-20220511174027989.png" alt="image-20220511174027989"></p><p>在这里，大家可以看到，模块之间的调用，变得越来越复杂，而且模块之间还存在强耦合，例如 A 调用 B，那么就要在 A 中写上 B 地址，也意味着 B 的部署位置要固定，同时，如果以后要进行集群化部署，A 也需要修改。</p><p>为了解决服务之间的耦合，注册中心闪亮登场。</p><h3 id="2-1Eureka-介绍"><a href="#2-1Eureka-介绍" class="headerlink" title="2.1Eureka 介绍"></a>2.1Eureka 介绍</h3><p>Eureka 是 Netfix 公司提供的一款服务注册中心，Eureka 基于 REST 来实现服务的注册与发现，曾经 Eureka 是 Spring Cloud 中最重要的核心组件之一。Spring Cloud 中封装了 Eureka，在 Eureka 的基础上，优化了一些配置，然后提供了可视化的页面，可以方便的查看注册情况以及服务注册中心集群的运行状况。</p><p>Eureka 有两部分：服务端和客户端，五福段就是注册中心，用来接收其他服务的注册，客户端则是一个 Java 客户端，用来注册，并可以实现负载均衡等功能。</p><p><img src="/image-20220511174713240.png" alt="image-20220511174713240"></p><p>从图中，我们可以看出，Eureka 中，有三个角色：</p><ul><li>Eureka Server：注册中心</li><li>Eureka Provider：服务提供者</li><li>Eureka Consumer：服务消费者</li></ul><h3 id="2-2Eureka-搭建"><a href="#2-2Eureka-搭建" class="headerlink" title="2.2Eureka 搭建"></a>2.2Eureka 搭建</h3><p>Eureka 本身是 Java 来开发的，Spring Cloud 使用 Spring Boot 技术对Eureka进行了封装，所以，在Spring Cloud中使用 Eureka 非常方便，只需要进入 <code>spring-cloud-starter-netfix-eureka-server</code>这个依赖即可，然后就像启动一个普通的 Spring Boot 项目启动 Eureka 即可。</p><p>创建一个普通的 Spring Boot 项目，创建时，添加 Eureka 依赖：</p><p><img src="/image-20220511175127289.png" alt="image-20220511175127289"></p><p>项目创建成功后，在项目启动类上添加注解，标记该项目是一个 Eureka Server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@EnableEurekaServer</span> 开启 Eureka server 功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@EnableEurekaServer</code>:注解表示开启 Eureka 功能</p><p>接下来，在 Application.properties 中添加基本配置信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 设置端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">1111</span><br><span class="hljs-comment"># 给项目起一个名字</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">eureka</span><br><span class="hljs-comment"># 默认情况下 Eureka Server 也是一个普通的微服务，所以当他还是一个注册中心的时候，他会有两层身份，</span><br><span class="hljs-comment"># 第一个就是注册中心，第二个就是普通服务，即当前服务会自己把自己注册到自己上面</span><br><span class="hljs-comment"># eureka.client.register-with-eureka=false 表示当前项目不要注册到注册中心</span><br><span class="hljs-attr">eureka.client.register-with-eureka</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 表示是否层 Eureka Server 获取注册信息</span><br><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure><p>配置完成后，就可以启动项目了。</p><p>如果在项目启动时，遇到<code>java.lang.TypeNotPresentException</code>异常，这是因为JDK9以上，移除了JAXB，这个时候，只需要我们手动引入 JAXB 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">jaxb-api<br>jaxb-impl<br>jaxb-runtime<br>activation<br></code></pre></td></tr></table></figure><p>项目启动成功后，浏览器输入 <a href="http://localhost:1111/">http://localhost:1111</a> 就可以看到 Eureka 后台管理页面了：</p><p><img src="/image-20220511181428802.png" alt="image-20220511181428805"></p><h3 id="2-3Eureka-集群"><a href="#2-3Eureka-集群" class="headerlink" title="2.3Eureka 集群"></a>2.3Eureka 集群</h3><p>使用了注册中心之后，所有的服务都需要通过注册中心来进行信息交换。注册中心的稳定性就非常重要了，一旦服务注册中心掉线，会影响到整个系统的稳定性，所以，在实际开发中，Eureka 一般都是以集群的形式出现的。</p><p>Eureka 集群，实际上就是启动多个 Eureka 实例，多个 Eureka 实例之间，互相注册，互相同步数据。共同组成一个 Eureka 集群。</p><p>搭建 Eureka 集群，首先我们需要一点准备工作，修改电脑的 host 文件（c:windows\system32\drivers\etc\hosts）：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1 eurekaA eurekaB<br></code></pre></td></tr></table></figure><p>在 <strong>2.2</strong> 基础上，我们在 resource 目录下，再添加两个配置文件。分别为 application-a.properties 以及 application-b.properties</p><p><img src="/image-20220511181508000.png" alt="image-20220511181508000"></p><p>application-a.properites 内如如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 给当前服务取一个名字</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">eureka</span><br><span class="hljs-comment"># 设置端口号</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">1111</span><br><span class="hljs-attr">eureka.instance.hostname</span>=<span class="hljs-string">eurekaA</span><br><span class="hljs-comment"># 默认情况下，Eureka Server 也是一个普通的微服务，所以当它还是一个注册中心的时候，他会有两层</span><br><span class="hljs-attr">身份：1.注册中心；2.普通服务，即当前服务会自己把自己注册到自己上面来</span><br><span class="hljs-comment"># register-with-eureka 设置为 false，表示当前项目不要注册到注册中心上</span><br><span class="hljs-attr">eureka.client.register-with-eureka</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 表示是否从 Eureka Server 上获取注册信息</span><br><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># A 服务要注册到 B 上面</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://eurekaB:1112/eureka</span><br></code></pre></td></tr></table></figure><p>application-b.properites 内如如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 给当前服务取一个名字</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">eureka</span><br><span class="hljs-comment"># 设置端口号</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">1112</span><br><span class="hljs-attr">eureka.instance.hostname</span>=<span class="hljs-string">eurekaB</span><br><span class="hljs-comment"># 默认情况下，Eureka Server 也是一个普通的微服务，所以当它还是一个注册中心的时候，他会有两层</span><br><span class="hljs-attr">身份：1.注册中心；2.普通服务，即当前服务会自己把自己注册到自己上面来</span><br><span class="hljs-comment"># register-with-eureka 设置为 false，表示当前项目不要注册到注册中心上</span><br><span class="hljs-attr">eureka.client.register-with-eureka</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 表示是否从 Eureka Server 上获取注册信息</span><br><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">eureka.client.service-url.defaultZone</span>=<span class="hljs-string">http://eurekaA:1111/eureka</span><br></code></pre></td></tr></table></figure><p>配置完成后，对当前项目打包，打成 jar 包：</p><p><img src="/image-20220511181645087.png" alt="image-20220511181645087"></p><p>打包完成后，在命令行启动两个 Eureka 实例。两个启动命令分别如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=a<br>java -jar eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=b<br></code></pre></td></tr></table></figure><p>启动成功后，就可以看到，两个服务之间互相注册，共同给组成一个集群。</p><h3 id="2-4-Eureka-工作细节"><a href="#2-4-Eureka-工作细节" class="headerlink" title="2.4 Eureka 工作细节"></a>2.4 Eureka 工作细节</h3><p>Eureka 本身可以分为两大部分，Eureka Server 和 Eureka Client</p><h4 id="2-4-1-Eureka-Server"><a href="#2-4-1-Eureka-Server" class="headerlink" title="2.4.1 Eureka Server"></a>2.4.1 Eureka Server</h4><p>Eureka Server 主要对外提供了三个功能：</p><ol><li>服务注册，所有的服务都注册到 Eureka Server 上面来</li><li>提供注册表，注册表就是所有注册上来服务的一个列表，Eureka Client 在调用服务时，需要获取<br>这个注册表，一般来说，这个注册表会缓存下来，如果缓存失效，则直接获取最新的注册表</li><li>同步状态，Eureka Client 通过注册、心跳等机制，和 Eureka Server 同步当前客户端的状态</li></ol><h4 id="2-4-2-Eureka-Client"><a href="#2-4-2-Eureka-Client" class="headerlink" title="2.4.2 Eureka Client"></a>2.4.2 Eureka Client</h4><p>Eureka Client 主要是用来简化每一个服务和 Eureka Server 之间的交互。Eureka Client 会自动拉取、更新以及缓存 Eureka Server 中的信息，这样，即使 Eureka Server 所有节点都宕机，Eureka Client 依然能够获取到想要调用服务的地址（但是地址可能不准确）。</p><h5 id="2-4-2-1-服务注册"><a href="#2-4-2-1-服务注册" class="headerlink" title="2.4.2.1 服务注册"></a>2.4.2.1 服务注册</h5><p>服务提供者将自己注册到服务注册中心（Eureka Server），需要注意，所谓的服务提供者，只是一个<br>业务上上的划分，本质上他就是一个 Eureka Client。当 Eureka Client 向 Eureka Server 注册时，他需要提供自身的一些元数据信息，例如 IP 地址、端口、名称、运行状态等等。</p><h5 id="2-4-2-2-服务续约"><a href="#2-4-2-2-服务续约" class="headerlink" title="2.4.2.2 服务续约"></a>2.4.2.2 服务续约</h5><p>Eureka Client 注册到 Eureka Server 上之后，事情没有结束，刚刚开始而已。注册成功后，默认情况下，Eureka CLient 每隔 30 秒就要向 Eureka Server 发送一条心跳消息，来告诉 Eureka Server 我还在运行。如果 Eureka Server 连续 90 秒都有没有收到 Eureka Client 的续约消息（连续三次没发送），它会认为 Eureka Client 已经掉线了，会将掉线的 Eureka Client 从当前的服务注册列表中剔除。</p><p>服务续约，有两个相关的属性（一般不建议修改）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="hljs-string">90</span><br></code></pre></td></tr></table></figure><blockquote><p>eureka.instance.lease-renewal-interval-in-seconds 表示服务的续约时间，默认是 30 秒<br>eureka.instance.lease-expiration-duration-in-seconds 服务失效时间，默认是 90 秒</p></blockquote><h5 id="2-4-2-3-服务下线"><a href="#2-4-2-3-服务下线" class="headerlink" title="2.4.2.3 服务下线"></a>2.4.2.3 服务下线</h5><p>当 Eureka Client 下线时，它会主动发送一条消息，告诉 Eureka Server ，我下线啦。</p><h5 id="2-4-2-4-获取注册表信息"><a href="#2-4-2-4-获取注册表信息" class="headerlink" title="2.4.2.4 获取注册表信息"></a>2.4.2.4 获取注册表信息</h5><p>Eureka Client 从 Eureka Server 上获取服务的注册信息，并将其缓存在本地。本地客户端，在需要调用远程服务时，会从该信息中查找远程服务所对应的 IP 地址、端口等信息。Eureka Client 上缓存的服务注册信息会定期更新(30 秒)，如果 Eureka Server 返回的注册表信息与本地缓存的注册表信息不同的话，Eureka Client 会自动处理。</p><p>这里，也涉及到两个属性，一个是是否允许获取注册表信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">eureka.client.fetch-registry</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>Eureka Client 上缓存的服务注册信息，定期更新的时间间隔，默认 30 秒：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">eureka.client.registry-fetch-interval-seconds</span>=<span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><h3 id="2-5-Eureka-集群原理"><a href="#2-5-Eureka-集群原理" class="headerlink" title="2.5 Eureka 集群原理"></a>2.5 Eureka 集群原理</h3><p>我们来看官方的一张 Eureka 集群架构图：</p><p><img src="/image-20220511182112887.png" alt="image-20220511182112887"></p><p>在这个集群架构中，Eureka Server 之间通过 Replicate 进行数据同步，不同的 Eureka Server 之间不区分主从节点，所有节点都是平等的。节点之间，通过置顶 serviceUrl 来互相注册，形成一个集群，进而提高节点的可用性。</p><p>在 Eureka Server 集群中，如果有某一个节点宕机，Eureka Client 会自动切换到新的 Eureka Server上。每一个 Eureka Server 节点，都会互相同步数据。Eureka Server 的连接方式，可以是单线的，就是 A–&gt;b–&gt;C ，此时，A 的数据也会和 C 之间互相同步。但是一般不建议这种写法，在我们配置<code>serviceUrl</code> 时，可以指定多个注册地址，即 A 可以即注册到 B 上，也可以同时注册到 C 上。<br>Eureka 分区：</p><ol><li>region：地理上的不同区域</li><li>zone：具体的机房</li></ol>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1.微服务介绍</title>
    <link href="/2022/05/11/1-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/11/1-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="1-课程介绍"><a href="#1-课程介绍" class="headerlink" title="1.课程介绍"></a>1.课程介绍</h2><h3 id="1-1课程内容"><a href="#1-1课程内容" class="headerlink" title="1.1课程内容"></a>1.1课程内容</h3><ol><li>介绍微服务的由来，以及微服务和SpringCloud之间的关系</li><li>介绍 Spring Cloud 核心组件的使用，可以通过核心组件快速搭建一个微服务架构</li><li>介绍 Spring Cloud 中的辅助类组件，例如微服务监控、链路追踪等等</li><li>介绍 Spring Cloud Alibaba，以及相关核心组件的具体用法</li></ol><h3 id="1-2课程收获"><a href="#1-2课程收获" class="headerlink" title="1.2课程收获"></a>1.2课程收获</h3><ol><li>了解微服务的由来以及基本原理</li><li>学会 Spring Cloud 中各个组件的使用</li><li>了解 Spring Cloud 中黑虚拟组建的运行原理</li><li>掌握通过 Spring Cloud 搭建微服务架构</li><li>掌握辅助组件的用法</li></ol><h2 id="2-微服务介绍"><a href="#2-微服务介绍" class="headerlink" title="2.微服务介绍"></a>2.微服务介绍</h2><p>微服务架构越来越流行，这个没有异议。</p><p>2009 年，Netflix 重新定义了它的应用程序员的开发模型，这个算是微服务的首次探索。</p><p>20014 年，《Microservices》，这篇文章以一个更加通俗易懂的方式，为大家定义了微服务。</p><p>为什么要用微服务？</p><p>互联网应用产品的两大特点：</p><ol><li>需求变化大</li><li>用户群体庞大</li></ol><p>在这样的情况下，我们需要构建一个能够灵活扩展，同时能够快速对应外界环境变化的一个应用，使用传统的开发方式，显然无法满足需求，这个时候，微服务就出现了。</p><h3 id="2-1什么是微服务"><a href="#2-1什么是微服务" class="headerlink" title="2.1什么是微服务"></a>2.1什么是微服务</h3><p>简单的来说，微服务就是一种将一个单一应用程序拆分成一组小型服务的方法，拆分完成之后，每一个服务都运行在独立的进程中，服务与服务之间采用轻量级的通信机制来进行沟通（Spring Cloud 中采用基于HTTP 的 RESTful API）。</p><p>每一个微服务，都是围绕具体的业务进行构建，例如一个电商系统，订单服务、支付服务、物流服务等等，这些拆分后的应用都是独立的应用，都可以独立部署到生产环境中，就是在采用微服务之后，我们的项目不在拘泥于一种语言，可以 Java，Go，Python，PHP等等，混合使用，这在传统的应用开发中，是无法想象的。而使用了微服务之后，我们可以根据业务上下文来选择合适的语言和构建工具进行构建。</p><p>微服务可以理解为是 SOA 的一个传承，一个本质的区别是微服务是一个真正分布式、去中心化的，微<br>服务的拆分比 SOA 更加彻底。</p><h3 id="2-2微服务优势"><a href="#2-2微服务优势" class="headerlink" title="2.2微服务优势"></a>2.2微服务优势</h3><ol><li>复杂度可控</li><li>独立部署</li><li>技术选型灵活</li><li>较好的容错性</li><li>较强的可扩展性</li></ol><h3 id="2-3使用-Spring-Cloud-的优势"><a href="#2-3使用-Spring-Cloud-的优势" class="headerlink" title="2.3使用 Spring Cloud 的优势"></a>2.3使用 Spring Cloud 的优势</h3><p>Spring Cloud 可以理解为微服务这种思想在 Java 领域的一个具体落地，Spring Cloud 在发展之初，就借鉴了微服务的思想，同时结合 Spring Boot，Spring Cloud 提供了一键式启动和部署的能力，极大的的简化了微服务架构的落地。</p><p>Spring Cloud 这种框架，从设计之初，就充分考虑了分布式架构演化所需的功能，例如服务注册、配置中心、消息总线以及负载均衡等。这些功能都是可插拔的形式提供出来的，这样，在分布式系统不选演化的过程中，我们的 Spring Cloud 也可以非常方便的进化。</p><h2 id="3-Spring-Cloud-介绍"><a href="#3-Spring-Cloud-介绍" class="headerlink" title="3.Spring Cloud 介绍"></a>3.Spring Cloud 介绍</h2><h3 id="3-1什么是-Spring-Cloud"><a href="#3-1什么是-Spring-Cloud" class="headerlink" title="3.1什么是 Spring Cloud"></a>3.1什么是 Spring Cloud</h3><p>Spring Cloud 是一系列框架的集合，Spring Cloud 内部包含了许多框架，这些框架互相协作，共同来构建分布式系统。利用这些组件，可以非常方便的构建一个分布式系统。</p><h3 id="3-2核心特性"><a href="#3-2核心特性" class="headerlink" title="3.2核心特性"></a>3.2核心特性</h3><ol><li>服务注册与发现</li><li>负载均衡</li><li>服务之间调用</li><li>容错、服务降级、断路器</li><li>消息总线</li><li>分布式配置中心</li><li>链路器</li></ol><h3 id="3-3版本名称"><a href="#3-3版本名称" class="headerlink" title="3.3版本名称"></a>3.3版本名称</h3><p>不同于其他的框架，Spring Cloud 版本名称是通过 A（Angel）、B（Brixton）、C（Camden）、<br>D（Dalston）、E（Edgware）、F（Finchley）。。 这样来明明的，这些名字使用了伦敦地铁站的名<br>字，目前最新版是 H （Hoxton）版。</p><p>Spring Cloud 中，除了大的版本之外，还有一些小版本，小版本命名方式如下：</p><ul><li>M ，M 版是 milestone 的缩写，所以我们会看到一些版本叫 M1、M2</li><li>RC，RC 是 Release Candidate，表示该项目处于候选状态，这是正式发版之前的一个状态，所以<br>我们会看到 RC1、RC2</li><li>SR，SR 是 Service Release ，表示项目正式发布的稳定版，其实相当于 GA（Generally<br>Available） 版。所以，我们会看到 SR1、SR2</li><li>SNAPSHOT，这个表示快照版</li></ul><h2 id="4-Spring-Cloud-体系"><a href="#4-Spring-Cloud-体系" class="headerlink" title="4.Spring Cloud 体系"></a>4.Spring Cloud 体系</h2><h3 id="4-1-Spring-Cloud-包含的组件"><a href="#4-1-Spring-Cloud-包含的组件" class="headerlink" title="4.1 Spring Cloud 包含的组件"></a>4.1 Spring Cloud 包含的组件</h3><ul><li><p>Spring Cloud Netflix，这个组件，在 Spring Cloud 成立之初，立下了汗马功劳。但是， 2018 年的断更，也是 Netflix 掉链子了。</p></li><li><p>Spring Cloud Config，分布式配置中心，利用 Git&#x2F;Svn 来集中管理项目的配置文件</p></li><li><p>Spring Cloud Bus，消息总线，可以构建消息驱动的微服务，也可以用来做一些状态管理等</p></li><li><p>Spring Cloud Consul，服务注册发现</p></li><li><p>Spring Cloud Stream，基于 Redis、RabbitMQ、Kafka 实现的消息微服务</p></li><li><p>Spring Cloud OpenFeign，提供 OpenFeign 集成到 Spring Boot 应用中的方式，主要解决微服务之间的调用问题</p></li><li><p>Spring Cloud Gateway，Spring Cloud 官方推出的网关服务</p></li><li><p>Spring Cloud Cloudfoundry，利用 Cloudfoundry 集成我们的应用程序</p></li><li><p>Spring Cloud Security，在 Zuul 代理中，为 OAuth2 客户端认证提供支持</p></li><li><p>Spring Cloud AWS ，快速集成亚马逊云服务</p></li><li><p>Spring Cloud Contract，一个消费者驱动的、面向 Java 的契约框架</p></li><li><p>Spring Cloud Zookeeper，基于 Apache Zookeeper 的服务注册和发现</p></li><li><p>Spring Cloud Data Flow，在一个结构化的平台上，组成数据微服务</p></li><li><p>Spring Cloud Kubernetes，Spring Cloud 提供的针对 Kubernetes 的支持</p></li><li><p>Spring Cloud Function</p></li><li><p>Spring Cloud Task，短生命周期的微服务</p></li></ul><h3 id="4-2-Spring-Cloud-和-Spring-Boot-版"><a href="#4-2-Spring-Cloud-和-Spring-Boot-版" class="headerlink" title="4.2 Spring Cloud 和 Spring Boot 版"></a>4.2 Spring Cloud 和 Spring Boot 版</h3><table><thead><tr><th>Spring Boot</th><th><strong>Spring Cloud</strong></th></tr></thead><tbody><tr><td>2.2.x</td><td>Hoxton</td></tr><tr><td>2.1.x</td><td>Greenwich</td></tr><tr><td>2.0.x</td><td>Finchley</td></tr><tr><td>1.5.x</td><td>Edgware</td></tr><tr><td>1.5.x</td><td>Dalston</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于微服务的代码讲解</title>
    <link href="/2022/05/11/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BB%A3%E7%A0%81%E8%AE%B2%E8%A7%A3/"/>
    <url>/2022/05/11/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BB%A3%E7%A0%81%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="1-什么是微服务"><a href="#1-什么是微服务" class="headerlink" title="1.什么是微服务"></a>1.什么是微服务</h3><p>通过传统方式编写的网站系统，就是一个独立的项目，所有的后端代码都需要运行在同一个进程中</p><p>通过微服务编写的网站，可以理解为将一个大型的网站通过业务功能拆分成为好几个独立的小项目，拆分完成之后，每一个服务都运行在独立的进程中</p><p>比如京东商城：</p><ul><li>他的一整个前端页面是一个微服务</li><li>他的订单系统是一个微服务</li><li>他的物流管理(快递)是一个微服务</li><li>他的商品管理是一个微服务</li><li>他的支付服务是一个微服务</li></ul><h3 id="2-代码流程"><a href="#2-代码流程" class="headerlink" title="2.代码流程"></a>2.代码流程</h3><p>他写的这个代码是将前端页面放到了 nginx 中，我是将前端页面作为了一个微服务放到系统中</p><p>一共分成了五个微服务</p><ul><li>eurekaserver：注册中心</li><li>serviceA</li><li>serviceB</li><li>serviceC</li><li>web：存放前端页面</li></ul><p>还有一个公共的common模块：存放一些公共的类</p><p><strong>CommonResult:封装返回前端的数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonResult</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> Long code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonResult</span><span class="hljs-params">(Long code, String message, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ServiceAResponse：前端请求的响应实体</strong></p><blockquote><p>保存的是 -&gt; </p><p>  serviceA的响应情况 和 serviceB的响应实体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceAResponse</span> &#123;<br>    ServiceCResponse aResponse;<br>    ServiceBResponse bResponse;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ServiceBResponse：serviceB微服务的响应实体</strong></p><blockquote><p>保存的是 -&gt; </p><p>​    ServiceB 的自己的响应情况</p><p>​ServiceC 的响应实体 （也是响应情况）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceBResponse</span> &#123;<br>    ServiceCResponse bResponse;<br>    ServiceCResponse cResponse;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ServiceCResponse：serviceC微服务的响应实体</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceCResponse</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       运行服务的线程名</span><br><span class="hljs-comment">     */</span><br>    String threadId;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       运行的时间戳</span><br><span class="hljs-comment">     */</span><br>    String timeStamp;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">       本机的ip</span><br><span class="hljs-comment">     */</span><br>    String serverIp;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也就是说：</p><p>A【前端需要的总体数据】 里面的数据是 A【服务A本身实体：包含<code>线程名</code>，<code>时间</code>,<code>ip地址</code>】 和 B 【服务B的响应实体】</p><p>在 【服务B的响应实体】里面的数据是 B【服务B本身实体：包含<code>线程名</code>，<code>时间</code>,<code>ip地址</code>】和 C【服务C的响应实体[包含<code>线程名</code>，<code>时间</code>,<code>ip地址</code>]】</p></blockquote><p>流程是：</p><p><code>ServiceA中的helloA方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/helloa&quot;)</span><br><span class="hljs-keyword">public</span> CommonResult&lt;ServiceAResponse&gt; <span class="hljs-title function_">helloA</span><span class="hljs-params">()</span> &#123;<br><br>    log.info(<span class="hljs-string">&quot;Call helloA function, Time:&quot;</span> + Long.toString(System.currentTimeMillis()));<br>    <span class="hljs-comment">//请求发送 serviceB的helloB 方法</span><br>    CommonResult&lt;ServiceBResponse&gt; responseB = serviceAApi.helloB();<br>    <span class="hljs-type">ServiceAResponse</span> <span class="hljs-variable">aResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceAResponse</span>();<br>    <span class="hljs-comment">//设置ServiceA的响应情况</span><br>    aResponse.setAResponse(commonService.getResponse());<br>    <span class="hljs-comment">//设置ServiceB的响应情况</span><br>    aResponse.setBResponse(responseB.getData());<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonResult</span>&lt;&gt;(<span class="hljs-number">0L</span>, <span class="hljs-string">&quot;成功&quot;</span>, aResponse);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>前端发送请求：请求发送到serviceA的helloA方法</p><p>在ServiceA的helloA方法中，</p><ul><li>请求调用ServiceB中helloB方法获取 ServiceB的响应情况</li><li>设置ServiceA的响应情况</li><li>设置ServiceB的响应情况</li></ul><p>请求获取 ServiceB 的helloB方法中：</p><ul><li>请求调用ServiceC中的helloC方法获取 ServiceC的响应情况</li><li>设置serviceB的响应情况</li><li>设置serviceC的响应情况</li></ul><p>所有请求发送完之后：</p><p>返回给前端的数据就是如下所示</p><p><img src="/image-20220511161305123.png" alt="image-20220511161305123"></p><h3 id="3-模块划分"><a href="#3-模块划分" class="headerlink" title="3.模块划分"></a>3.模块划分</h3><h4 id="3-1注册中心"><a href="#3-1注册中心" class="headerlink" title="3.1注册中心"></a>3.1注册中心</h4><p><strong>eurekaService:就是注册中心</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka.demo.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br>    <span class="hljs-attr">service-url:</span><br>    <span class="hljs-comment">#单机就是7001自己</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka/</span><br></code></pre></td></tr></table></figure><p><strong>Eureka启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span><span class="hljs-comment">//表示是一个注册中心</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaServer.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>serviceA serviceB serviceC 都要在eruekaService中进行注册，才能够相互调用</p><p><strong>serviceA的配置文件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#表示是否将自己注册进EurekaServer默认为true。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka</span><br><br></code></pre></td></tr></table></figure><p><strong>serviceA的启动类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><span class="hljs-comment">//表示开启远程调用</span><br><span class="hljs-meta">@EnableEurekaClient</span><span class="hljs-comment">//表示需要注册到注册中心</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(AppA.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    MeterRegistryCustomizer&lt;MeterRegistry&gt; <span class="hljs-title function_">configurer</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span> String applicationName)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> (registry) -&gt; registry.config().commonTags(<span class="hljs-string">&quot;application&quot;</span>, applicationName);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>serviceB的配置文件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#表示是否将自己注册进EurekaServer默认为true。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#单机版</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka</span><br></code></pre></td></tr></table></figure><p><strong>serviceC的配置文件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#表示是否将自己注册进EurekaServer默认为true。</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#单机版</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:8761/eureka</span><br></code></pre></td></tr></table></figure><h4 id="3-4OpenFeign"><a href="#3-4OpenFeign" class="headerlink" title="3.4OpenFeign"></a>3.4OpenFeign</h4><p>openFeign是一个远程调用框架</p><p><strong>只有配置了这个openFeign，serviceA才能调用serviceB的方法，ServiceB才能调用serviceC中的方法</strong></p><p>在common公共模块中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = &quot;b.demo.com&quot;)</span><span class="hljs-comment">//表示可以调用serviceB中的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServiceAApi</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/hellob&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;ServiceBResponse&gt; <span class="hljs-title function_">helloB</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = &quot;c.demo.com&quot;)</span><span class="hljs-comment">//表示可以调用serviceC中的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServiceBApi</span> &#123;<br>    <span class="hljs-meta">@GetMapping(value = &quot;/helloc&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;ServiceCResponse&gt; <span class="hljs-title function_">helloC</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就能在 A 中调用 B，在 B 中调用 C</p>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis考试内容</title>
    <link href="/2022/05/11/mybatis%E8%80%83%E8%AF%95%E5%86%85%E5%AE%B9/"/>
    <url>/2022/05/11/mybatis%E8%80%83%E8%AF%95%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<p>title: mybatis考试复习<br>date: 2022-05-11 11:23:19</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><h1 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h1><p>1、数据库导入<br>2、项目导入（5分）<br>3、核心配置文件如（别名配置等）（10分）<br>4、基本CRUD操作（10分）<br>5、关联映射（20分）<br>6、动态sql（30分）<br>7、缓存的配置（10分）<br>8、编写拦截器（15分）</p><h2 id="1-数据库导入-不给分"><a href="#1-数据库导入-不给分" class="headerlink" title="1.数据库导入(不给分)"></a>1.数据库导入(不给分)</h2><h2 id="2-项目导入"><a href="#2-项目导入" class="headerlink" title="2.项目导入"></a>2.项目导入</h2><ul><li>导入项目</li><li>修改 build path</li></ul><p><strong>正常状态</strong></p><p><img src="/1652166601876-5dda4cd2-f24d-4d49-86c0-7d95cf3b87a6-16522377452862.png" alt="img"></p><blockquote><p>如果<code>JRE System Library</code> 右侧是 <code>unbround</code> ，点击右侧 <code>edit</code> </p></blockquote><p><img src="/1652166747072-f8cff634-e53d-4a7f-a4f9-864f4297bfe1.png" alt="img"></p><h3 id="3-核心配置文件"><a href="#3-核心配置文件" class="headerlink" title="3.核心配置文件"></a>3.核心配置文件</h3><p>位置：mybatis-config.xml 位于 <code>src</code> 文件夹下面</p><h4 id="3-1配置-properties-属性文件"><a href="#3-1配置-properties-属性文件" class="headerlink" title="3.1配置 properties 属性文件"></a>3.1配置 properties 属性文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">&lt;properties</span> <span class="hljs-string">resource=&quot;db.properties&quot;&gt;</span><br><span class="hljs-attr">&lt;!--</span> <span class="hljs-string">此处可配置属性，此处的配置的属性的优先级最低 --&gt;</span><br><span class="hljs-attr">&lt;property</span> <span class="hljs-string">name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;amp;useSSL=false&quot;/&gt;</span><br><span class="hljs-attr">&lt;/properties&gt;</span><br></code></pre></td></tr></table></figure><p>db.properties 是一个文件，在 <code>src</code> 文件夹下面，内容如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>:<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>:<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/mybatis?serverTimezone=UTC&amp;useSSL=false</span><br><span class="hljs-attr">username</span>:<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>:<span class="hljs-string">000823</span><br></code></pre></td></tr></table></figure><h4 id="3-2-配置-settings"><a href="#3-2-配置-settings" class="headerlink" title="3.2 配置 settings"></a>3.2 配置 settings</h4><p><strong>书上98-100页是详细配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- mapUnderscoreToCamelCase从官方文档拷贝 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-别名配置"><a href="#3-3-别名配置" class="headerlink" title="3.3 别名配置"></a>3.3 别名配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 1、typeAlias:为某个java类型起别名, 它仅用于 XML 配置，意在降低冗余的全限定类名书写</span><br><span class="hljs-comment">type:指定要起别名的类型全类名;默认别名就是类名首字母小写；news</span><br><span class="hljs-comment">alias:指定新的别名</span><br><span class="hljs-comment"> --&gt;</span><br> <span class="hljs-comment">&lt;!-- &lt;typeAlias alias=&quot;emp&quot; type=&quot;com.demo.bean.Employee&quot;/&gt; --&gt;</span><br><br><br>     <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">         2、package:为某个包下的所有类批量起别名 </span><br><span class="hljs-comment">name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.demo.bean&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 --&gt;</span><br><span class="hljs-comment">&lt;!-- 尽量不使用别名，使用全类名，鼠标放到全类名上按住ctrl键点击可以跳转到类，方便查错 </span><br><span class="hljs-comment">别名优先级：typeAlias==@Alias注解&gt;package</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>推荐:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.demo.bean&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-environments"><a href="#3-4-environments" class="headerlink" title="3.4 environments"></a>3.4 environments</h4><p>如果配置文件配置了 properties 属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mybatis&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mybatis&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><p>没有配置 properties 属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mybatis&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mybatis&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?serverTimezone=UTC&amp;useSSL=false&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;000823&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-5-mappers"><a href="#3-5-mappers" class="headerlink" title="3.5 mappers"></a>3.5 mappers</h4><p>配置 mapper 接口的映射文件</p><p>单个配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/demo/dao/EmployeeMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>全部配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.demo.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-基本增删改查"><a href="#4-基本增删改查" class="headerlink" title="4.基本增删改查"></a>4.基本增删改查</h3><p>manager类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>&#125;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>查询:</p><p>manager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询一个</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectEmpById</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmployeeMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(com.demo.dao.EmployeeMapper.class);<br>com.demo.domain.<span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>System.out.println(employee);<br>&#125;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeMapper</span> &#123;<br><span class="hljs-comment">// 根据id查询员工</span><br>Employee <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- MyBatis Mapper文件的DTD --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.demo.dao.EmployeeMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empMap2&quot;</span>&gt;</span><br>    select * from tbl_emp where emp_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empMap2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>       多端映射补充 association collection<br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>增加：</p><p>manager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加员工数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEmp</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmployeeMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(com.demo.dao.EmployeeMapper.class);<br><span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;2182908922&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dept</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;开发&quot;</span>));<br><span class="hljs-type">Integer</span> <span class="hljs-variable">addEmp</span> <span class="hljs-operator">=</span> mapper.addEmp(employee);<br>System.out.println(addEmp);<br>&#125;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeMapper</span> &#123;<br><span class="hljs-comment">// 根据id查询员工</span><br>Employee <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(Integer id)</span>;<br><span class="hljs-comment">// 添加员工</span><br>Integer <span class="hljs-title function_">addEmp</span><span class="hljs-params">(Employee emp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- MyBatis Mapper文件的DTD --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.demo.dao.EmployeeMapper&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--上一个查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empMap2&quot;</span>&gt;</span><br>    select * from tbl_emp where emp_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       tbl_emp:数据库表名</span><br><span class="hljs-comment">emp_name,gender,email,d_id：数据库字段</span><br><span class="hljs-comment">id：如果id是自增，不需要写id 【查看AI】</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    insert into tbl_emp(emp_name,gender,email,d_id) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;,#&#123;dept.id&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--上一个查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empMap2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改：</p><p>manager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateEmp</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmployeeMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(com.demo.dao.EmployeeMapper.class);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">addEmp</span> <span class="hljs-operator">=</span> mapper.updateEmp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;2182908922&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dept</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;经理&quot;</span>)));<br>System.out.println(addEmp);<br>&#125;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">updateEmp</span><span class="hljs-params">(Employee emp)</span>;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>    update tbl_emp set emp_name=#&#123;name&#125;,d_id=#&#123;dept.id&#125;,【数据库内所有字段都写完】 where emp_id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删除：</p><p>manager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EmployeeMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(com.demo.dao.EmployeeMapper.class);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">addEmp</span> <span class="hljs-operator">=</span> mapper.deleteEmpById(<span class="hljs-number">1003</span>);<br>System.out.println(addEmp);<br>&#125;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">deleteEmpById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><p>EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    delete from 表名 where id=&#123;删除的id&#125;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteEmpById&quot;</span>&gt;</span><br>    delete from tbl_emp where emp_id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、关联映射（20分）"><a href="#5、关联映射（20分）" class="headerlink" title="5、关联映射（20分）"></a>5、关联映射（20分）</h3><p>一对一映射：</p><p>一个员工属于一个部</p><p><strong>一对多的一端：使用association</strong></p><p><strong>多端使用 collection</strong></p><p>EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empMap&quot;</span>&gt;</span><br>    select * from tbl_emp where emp_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empMap&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>        <br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> </span><br><span class="hljs-tag">            <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.demo.domain.Dept&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;d_id&quot;</span>&lt;!<span class="hljs-attr">--column</span>放的是数据库中部门<span class="hljs-attr">id-</span>&gt;</span><br> fetchType=&quot;lazy&quot;<br>           <span class="hljs-comment">&lt;!--getDeptById：是 DeptMapper.xml 文件中的方法-&gt;</span><br><span class="hljs-comment"> select=&quot;com.demo.dao.DeptMapper.getDeptById&quot;</span><br><span class="hljs-comment"> &gt;&lt;/association&gt;</span><br><span class="hljs-comment">&lt;/resultMap</span><br></code></pre></td></tr></table></figure><p>DeptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- MyBatis Mapper文件的DTD --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.demo.dao.DeptMapper&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptMap&quot;</span>&gt;</span><br>select * from tbl_dept where dept_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptMap&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> </span><br><span class="hljs-tag"><span class="hljs-attr">property</span>=<span class="hljs-string">&quot;employee&quot;</span> ：<span class="hljs-attr">Dept.java</span> 中 <span class="hljs-attr">List</span>括号后面的 <span class="hljs-attr">employee</span></span><br><span class="hljs-tag"><span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">Dept.java</span> 中 <span class="hljs-attr">List</span>括号后面的 <span class="hljs-attr">employee</span></span><br><span class="hljs-tag"><span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.demo.dao.EmployeeMapper.getEmpByIdInfo&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;lazy&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-动态SQL"><a href="#6-动态SQL" class="headerlink" title="6.动态SQL"></a>6.动态SQL</h3><p>UserMapper.xml</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">原来的<span class="hljs-keyword">SQL</span>:<span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> username<span class="hljs-operator">=</span>#&#123;username&#125;,password<span class="hljs-operator">=</span>#&#123;password&#125;,phone<span class="hljs-operator">=</span>#&#123;phone&#125;,email<span class="hljs-operator">=</span>#&#123;email&#125;, avatar<span class="hljs-operator">=</span>#&#123;avator&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>update user <br><span class="hljs-comment">&lt;!-- set元素可以去除多余的逗号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username!=null&quot;</span>&gt;</span>username=#&#123;username&#125;, <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当password不为null，增加对password的更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password!=null&quot;</span>&gt;</span>password=#&#123;password&#125;, <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone!=null&quot;</span>&gt;</span>phone=#&#123;phone&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email!=null&quot;</span>&gt;</span>email=#&#123;email&#125;, <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span> <br> where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ProductMapper.xml 多条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="hljs-string">&#x27;%&#x27;</span>) <span class="hljs-keyword">or</span> brief <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;brief&#125;,<span class="hljs-string">&#x27;%&#x27;</span>) <span class="hljs-keyword">or</span> detail <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;detail&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByKeywords&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;productMap&quot;</span>&gt;</span><br>select * from product<br><span class="hljs-comment">&lt;!-- where元素可以去除查询条件中多余的and，or等运算符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当name字段不为null时，增加根据name查询的条件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当brief字段不为null时，增加根据brief查询的条件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brief != null&quot;</span>&gt;</span><br>or brief like concat(&#x27;%&#x27;,#&#123;brief&#125;,&#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当detail字段不为null时，增加根据detail查询的条件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;detail != null&quot;</span>&gt;</span><br>or detail like concat(&#x27;%&#x27;,#&#123;detail&#125;,&#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接口：NewsMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> org.crazyit.app.dao;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.crazyit.app.domain.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NewsMapper</span><br>&#123;<br><span class="hljs-comment">//查询</span><br>List&lt;News&gt; <span class="hljs-title function_">findNewsByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> Integer... ids)</span>;<br><span class="hljs-comment">//插入</span><br>Integer <span class="hljs-title function_">saveNews</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;newsList&quot;)</span> List&lt;News&gt; news)</span>;<br><span class="hljs-comment">//更新</span><br>Integer <span class="hljs-title function_">updateNews</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;newsList&quot;)</span> List&lt;News&gt; news)</span>;<br><span class="hljs-comment">//删除</span><br>Integer <span class="hljs-title function_">delNewsByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> Integer[] ids)</span>;<br><span class="hljs-comment">//bind</span><br>List&lt;News&gt; <span class="hljs-title function_">findNewsByTitle</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;title&quot;)</span> String title)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>映射文件:NewsMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.crazyit.app.dao.NewsMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 批量查询：--&gt;</span><br>    <br>    #原来的SQL:select * from news_inf where news_id in (1,2,3,4)<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findNewsByIds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.crazyit.app.domain.News&quot;</span>&gt;</span><br>select news_id id,news_title title,news_content content from news_inf<br>where news_id in<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br> #&#123;id&#125;    <br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 批量插入 --&gt;</span><br>    #原来的SQL：insert into news_inf values（#&#123;news.id&#125;,#&#123;news.title&#125;,#&#123;news.content&#125;），（#&#123;news.id&#125;,#&#123;news.title&#125;,#&#123;news.content&#125;）<br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveNews&quot;</span>&gt;</span><br>insert into news_inf<br>values <br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;newsList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;news&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>(  #&#123;news.id&#125;,#&#123;news.title&#125;,#&#123;news.content&#125;   )<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 批量更新 --&gt;</span><br>    # 原来的SQL：update news_inf <br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateNews&quot;</span>&gt;</span><br>update news_inf<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;news_title=case&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;end,&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;newsList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;news.title!=null&quot;</span>&gt;</span><br>                        when news_id=#&#123;news.id&#125; then #&#123;news.title&#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                   <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;news_content=case&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;end,&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;newsList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;news.content!=null&quot;</span>&gt;</span><br>                        when news_id=#&#123;news.id&#125; then #&#123;news.content&#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                    <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>where news_id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;newsList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;news&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;news.id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 批量删除 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delNewsByIds&quot;</span>&gt;</span><br>delete from news_inf<br>where news_id in<br><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--使用bind标签定义变量，实现模糊查询  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findNewsByTitle&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- _parameter代表是整个参数的上下文 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;titlePattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;%&#x27;+_parameter.title+&#x27;%&#x27;&quot;</span>/&gt;</span><br>select news_id id,news_title title,news_content content from news_inf<br>where news_title like #&#123;titlePattern&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>where 标签：去除多余的 and or</strong></p><p><strong>set 标签：去除多余的逗号</strong></p><p>trim:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveNews&quot;</span>&gt;</span><br>insert into news_inf<br>       去除后面多余的逗号<br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title!=null&quot;</span>&gt;</span><br>news_title,<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;content!=null&quot;</span>&gt;</span><br>news_content,<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status!=null&quot;</span>&gt;</span><br>status<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>       去除后面多余的逗号<br><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;values(&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title!=null&quot;</span>&gt;</span><br>#&#123;title&#125;,<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;content!=null&quot;</span>&gt;</span><br>#&#123;content&#125;,<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status!=null&quot;</span>&gt;</span><br>#&#123;status&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-二级缓存"><a href="#7-二级缓存" class="headerlink" title="7.二级缓存"></a>7.二级缓存</h3><p>某个Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span> <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span> <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>实体类实现序列化接口 Serializable</p><p>例如：Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>second</title>
    <link href="/2022/05/11/second/"/>
    <url>/2022/05/11/second/</url>
    
    <content type="html"><![CDATA[<p>中华人民共和国</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2022/05/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
